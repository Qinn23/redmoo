{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/utils/sui-types.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB58, splitGenericParameters } from '@mysten/bcs';\n\nconst TX_DIGEST_LENGTH = 32;\n\n/** Returns whether the tx digest is valid based on the serialization format */\nexport function isValidTransactionDigest(value: string): value is string {\n\ttry {\n\t\tconst buffer = fromB58(value);\n\t\treturn buffer.length === TX_DIGEST_LENGTH;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\n// TODO - can we automatically sync this with rust length definition?\n// Source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67\n// which uses the Move account address length\n// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .\n\nexport const SUI_ADDRESS_LENGTH = 32;\nexport function isValidSuiAddress(value: string): value is string {\n\treturn isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\n\nexport function isValidSuiObjectId(value: string): boolean {\n\treturn isValidSuiAddress(value);\n}\n\ntype StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: (string | StructTag)[];\n};\n\nfunction parseTypeTag(type: string): string | StructTag {\n\tif (!type.includes('::')) return type;\n\n\treturn parseStructTag(type);\n}\n\nexport function parseStructTag(type: string): StructTag {\n\tconst [address, module] = type.split('::');\n\n\tconst rest = type.slice(address.length + module.length + 4);\n\tconst name = rest.includes('<') ? rest.slice(0, rest.indexOf('<')) : rest;\n\tconst typeParams = rest.includes('<')\n\t\t? splitGenericParameters(rest.slice(rest.indexOf('<') + 1, rest.lastIndexOf('>'))).map(\n\t\t\t\t(typeParam) => parseTypeTag(typeParam.trim()),\n\t\t  )\n\t\t: [];\n\n\treturn {\n\t\taddress: normalizeSuiAddress(address),\n\t\tmodule,\n\t\tname,\n\t\ttypeParams,\n\t};\n}\n\nexport function normalizeStructTag(type: string | StructTag): string {\n\tconst { address, module, name, typeParams } =\n\t\ttypeof type === 'string' ? parseStructTag(type) : type;\n\n\tconst formattedTypeParams =\n\t\ttypeParams.length > 0\n\t\t\t? `<${typeParams\n\t\t\t\t\t.map((typeParam) =>\n\t\t\t\t\t\ttypeof typeParam === 'string' ? typeParam : normalizeStructTag(typeParam),\n\t\t\t\t\t)\n\t\t\t\t\t.join(',')}>`\n\t\t\t: '';\n\n\treturn `${address}::${module}::${name}${formattedTypeParams}`;\n}\n\n/**\n * Perform the following operations:\n * 1. Make the address lower case\n * 2. Prepend `0x` if the string does not start with `0x`.\n * 3. Add more zeros if the length of the address(excluding `0x`) is less than `SUI_ADDRESS_LENGTH`\n *\n * WARNING: if the address value itself starts with `0x`, e.g., `0x0x`, the default behavior\n * is to treat the first `0x` not as part of the address. The default behavior can be overridden by\n * setting `forceAdd0x` to true\n *\n */\nexport function normalizeSuiAddress(value: string, forceAdd0x: boolean = false): string {\n\tlet address = value.toLowerCase();\n\tif (!forceAdd0x && address.startsWith('0x')) {\n\t\taddress = address.slice(2);\n\t}\n\treturn `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, '0')}`;\n}\n\nexport function normalizeSuiObjectId(value: string, forceAdd0x: boolean = false): string {\n\treturn normalizeSuiAddress(value, forceAdd0x);\n}\n\nfunction isHex(value: string): boolean {\n\treturn /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\n\nfunction getHexByteLength(value: string): number {\n\treturn /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAGA,SAAS,SAAS,8BAA8B;;;AAEhD,MAAM,mBAAmB;AAGlB,SAAS,yBAAyB,KAAA,EAAgC;IACxE,IAAI;QACH,MAAM,+JAAS,UAAA,EAAQ,KAAK;QAC5B,OAAO,OAAO,MAAA,KAAW;IAC1B,EAAA,OAAS,GAAP;QACD,OAAO;IACR;AACD;AAQO,MAAM,qBAAqB;AAC3B,SAAS,kBAAkB,KAAA,EAAgC;IACjE,OAAO,MAAM,KAAK,KAAK,iBAAiB,KAAK,MAAM;AACpD;AAEO,SAAS,mBAAmB,KAAA,EAAwB;IAC1D,OAAO,kBAAkB,KAAK;AAC/B;AASA,SAAS,aAAa,IAAA,EAAkC;IACvD,IAAI,CAAC,KAAK,QAAA,CAAS,IAAI,GAAG,OAAO;IAEjC,OAAO,eAAe,IAAI;AAC3B;AAEO,SAAS,eAAe,IAAA,EAAyB;IACvD,MAAM,CAAC,SAAS,MAAM,CAAA,GAAI,KAAK,KAAA,CAAM,IAAI;IAEzC,MAAM,OAAO,KAAK,KAAA,CAAM,QAAQ,MAAA,GAAS,OAAO,MAAA,GAAS,CAAC;IAC1D,MAAM,OAAO,KAAK,QAAA,CAAS,GAAG,IAAI,KAAK,KAAA,CAAM,GAAG,KAAK,OAAA,CAAQ,GAAG,CAAC,IAAI;IACrE,MAAM,aAAa,KAAK,QAAA,CAAS,GAAG,IACjC,iLAAA,EAAuB,KAAK,KAAA,CAAM,KAAK,OAAA,CAAQ,GAAG,IAAI,GAAG,KAAK,WAAA,CAAY,GAAG,CAAC,CAAC,EAAE,GAAA,CACjF,CAAC,YAAc,aAAa,UAAU,IAAA,CAAK,CAAC,KAE5C,CAAC,CAAA;IAEJ,OAAO;QACN,SAAS,oBAAoB,OAAO;QACpC;QACA;QACA;IACD;AACD;AAEO,SAAS,mBAAmB,IAAA,EAAkC;IACpE,MAAM,EAAE,OAAA,EAAS,MAAA,EAAQ,IAAA,EAAM,UAAA,CAAW,CAAA,GACzC,OAAO,SAAS,WAAW,eAAe,IAAI,IAAI;IAEnD,MAAM,sBACL,WAAW,MAAA,GAAS,IACjB,IAIS,OAJL,WACH,GAAA,CAAI,CAAC,YACL,OAAO,cAAc,WAAW,YAAY,mBAAmB,SAAS,GAExE,IAAA,CAAK,GAAG,GAAA,OACT;IAEJ,OAAO,UAAG,SAAA,MAAuB,OAAX,QAAA,mBAAkB,OAAA;AACzC;AAaO,SAAS,oBAAoB,KAAA;qBAAe,iEAAsB,OAAe;IACvF,IAAI,UAAU,MAAM,WAAA,CAAY;IAChC,IAAI,CAAC,cAAc,QAAQ,UAAA,CAAW,IAAI,GAAG;QAC5C,UAAU,QAAQ,KAAA,CAAM,CAAC;IAC1B;IACA,OAAO,KAAiD,OAA5C,QAAQ,QAAA,CAAS,qBAAqB,GAAG,GAAG;AACzD;AAEO,SAAS,qBAAqB,KAAA;qBAAe,iEAAsB,OAAe;IACxF,OAAO,oBAAoB,OAAO,UAAU;AAC7C;AAEA,SAAS,MAAM,KAAA,EAAwB;IACtC,OAAO,yBAAyB,IAAA,CAAK,KAAK,KAAK,MAAM,MAAA,GAAS,MAAM;AACrE;AAEA,SAAS,iBAAiB,KAAA,EAAuB;IAChD,OAAO,WAAW,IAAA,CAAK,KAAK,IAAA,CAAK,MAAM,MAAA,GAAS,CAAA,IAAK,IAAI,MAAM,MAAA,GAAS;AACzE","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/bcs/type-tag-serializer.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { splitGenericParameters } from '@mysten/bcs';\n\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { TypeTag } from './index.js';\n\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\n\nexport class TypeTagSerializer {\n\tstatic parseFromStr(str: string, normalizeAddress = false): TypeTag {\n\t\tif (str === 'address') {\n\t\t\treturn { address: null };\n\t\t} else if (str === 'bool') {\n\t\t\treturn { bool: null };\n\t\t} else if (str === 'u8') {\n\t\t\treturn { u8: null };\n\t\t} else if (str === 'u16') {\n\t\t\treturn { u16: null };\n\t\t} else if (str === 'u32') {\n\t\t\treturn { u32: null };\n\t\t} else if (str === 'u64') {\n\t\t\treturn { u64: null };\n\t\t} else if (str === 'u128') {\n\t\t\treturn { u128: null };\n\t\t} else if (str === 'u256') {\n\t\t\treturn { u256: null };\n\t\t} else if (str === 'signer') {\n\t\t\treturn { signer: null };\n\t\t}\n\t\tconst vectorMatch = str.match(VECTOR_REGEX);\n\t\tif (vectorMatch) {\n\t\t\treturn {\n\t\t\t\tvector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress),\n\t\t\t};\n\t\t}\n\n\t\tconst structMatch = str.match(STRUCT_REGEX);\n\t\tif (structMatch) {\n\t\t\tconst address = normalizeAddress ? normalizeSuiAddress(structMatch[1]) : structMatch[1];\n\t\t\treturn {\n\t\t\t\tstruct: {\n\t\t\t\t\taddress,\n\t\t\t\t\tmodule: structMatch[2],\n\t\t\t\t\tname: structMatch[3],\n\t\t\t\t\ttypeParams:\n\t\t\t\t\t\tstructMatch[5] === undefined\n\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t: TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tthrow new Error(`Encountered unexpected token when parsing type args for ${str}`);\n\t}\n\n\tstatic parseStructTypeArgs(str: string, normalizeAddress = false): TypeTag[] {\n\t\treturn splitGenericParameters(str).map((tok) =>\n\t\t\tTypeTagSerializer.parseFromStr(tok, normalizeAddress),\n\t\t);\n\t}\n\n\tstatic tagToString(tag: TypeTag): string {\n\t\tif ('bool' in tag) {\n\t\t\treturn 'bool';\n\t\t}\n\t\tif ('u8' in tag) {\n\t\t\treturn 'u8';\n\t\t}\n\t\tif ('u16' in tag) {\n\t\t\treturn 'u16';\n\t\t}\n\t\tif ('u32' in tag) {\n\t\t\treturn 'u32';\n\t\t}\n\t\tif ('u64' in tag) {\n\t\t\treturn 'u64';\n\t\t}\n\t\tif ('u128' in tag) {\n\t\t\treturn 'u128';\n\t\t}\n\t\tif ('u256' in tag) {\n\t\t\treturn 'u256';\n\t\t}\n\t\tif ('address' in tag) {\n\t\t\treturn 'address';\n\t\t}\n\t\tif ('signer' in tag) {\n\t\t\treturn 'signer';\n\t\t}\n\t\tif ('vector' in tag) {\n\t\t\treturn `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n\t\t}\n\t\tif ('struct' in tag) {\n\t\t\tconst struct = tag.struct;\n\t\t\tconst typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(', ');\n\t\t\treturn `${struct.address}::${struct.module}::${struct.name}${\n\t\t\t\ttypeParams ? `<${typeParams}>` : ''\n\t\t\t}`;\n\t\t}\n\t\tthrow new Error('Invalid TypeTag');\n\t}\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,8BAA8B;AAEvC,SAAS,2BAA2B;;;AAGpC,MAAM,eAAe;AACrB,MAAM,eAAe;AAEd,MAAM,kBAAkB;IAC9B,OAAO,aAAa,GAAA,EAAgD;+BAAnC,iEAAmB;QACnD,IAAI,QAAQ,WAAW;YACtB,OAAO;gBAAE,SAAS;YAAK;QACxB,OAAA,IAAW,QAAQ,QAAQ;YAC1B,OAAO;gBAAE,MAAM;YAAK;QACrB,OAAA,IAAW,QAAQ,MAAM;YACxB,OAAO;gBAAE,IAAI;YAAK;QACnB,OAAA,IAAW,QAAQ,OAAO;YACzB,OAAO;gBAAE,KAAK;YAAK;QACpB,OAAA,IAAW,QAAQ,OAAO;YACzB,OAAO;gBAAE,KAAK;YAAK;QACpB,OAAA,IAAW,QAAQ,OAAO;YACzB,OAAO;gBAAE,KAAK;YAAK;QACpB,OAAA,IAAW,QAAQ,QAAQ;YAC1B,OAAO;gBAAE,MAAM;YAAK;QACrB,OAAA,IAAW,QAAQ,QAAQ;YAC1B,OAAO;gBAAE,MAAM;YAAK;QACrB,OAAA,IAAW,QAAQ,UAAU;YAC5B,OAAO;gBAAE,QAAQ;YAAK;QACvB;QACA,MAAM,cAAc,IAAI,KAAA,CAAM,YAAY;QAC1C,IAAI,aAAa;YAChB,OAAO;gBACN,QAAQ,kBAAkB,YAAA,CAAa,WAAA,CAAY,CAAC,CAAA,EAAG,gBAAgB;YACxE;QACD;QAEA,MAAM,cAAc,IAAI,KAAA,CAAM,YAAY;QAC1C,IAAI,aAAa;YAChB,MAAM,UAAU,iMAAmB,sBAAA,EAAoB,WAAA,CAAY,CAAC,CAAC,IAAI,WAAA,CAAY,CAAC,CAAA;YACtF,OAAO;gBACN,QAAQ;oBACP;oBACA,QAAQ,WAAA,CAAY,CAAC,CAAA;oBACrB,MAAM,WAAA,CAAY,CAAC,CAAA;oBACnB,YACC,WAAA,CAAY,CAAC,CAAA,KAAM,KAAA,IAChB,CAAC,CAAA,GACD,kBAAkB,mBAAA,CAAoB,WAAA,CAAY,CAAC,CAAA,EAAG,gBAAgB;gBAC3E;YACD;QACD;QAEA,MAAM,IAAI,MAAM,2DAA2D,CAAK,MAAL;IAC5E;IAEA,OAAO,oBAAoB,GAAA,EAAkD;+BAArC,iEAAmB;QAC1D,+JAAO,yBAAA,EAAuB,GAAG,EAAE,GAAA,CAAI,CAAC,MACvC,kBAAkB,YAAA,CAAa,KAAK,gBAAgB;IAEtD;IAEA,OAAO,YAAY,GAAA,EAAsB;QACxC,IAAI,UAAU,KAAK;YAClB,OAAO;QACR;QACA,IAAI,QAAQ,KAAK;YAChB,OAAO;QACR;QACA,IAAI,SAAS,KAAK;YACjB,OAAO;QACR;QACA,IAAI,SAAS,KAAK;YACjB,OAAO;QACR;QACA,IAAI,SAAS,KAAK;YACjB,OAAO;QACR;QACA,IAAI,UAAU,KAAK;YAClB,OAAO;QACR;QACA,IAAI,UAAU,KAAK;YAClB,OAAO;QACR;QACA,IAAI,aAAa,KAAK;YACrB,OAAO;QACR;QACA,IAAI,YAAY,KAAK;YACpB,OAAO;QACR;QACA,IAAI,YAAY,KAAK;YACpB,OAAO,UAAkD,OAAxC,kBAAkB,WAAA,CAAY,IAAI,MAAM,GAAA;QAC1D;QACA,IAAI,YAAY,KAAK;YACpB,MAAM,SAAS,IAAI,MAAA;YACnB,MAAM,aAAa,OAAO,UAAA,CAAW,GAAA,CAAI,kBAAkB,WAAW,EAAE,IAAA,CAAK,IAAI;YACjF,OAAO,UAAG,OAAO,OAAA,EAAA,MAA8B,OAAlB,OAAO,MAAA,EAAA,oBAAkB,IAAA,EACpB,OAAjC,aAAa,IAAI,OAAA,YAAA,OAAgB;QAEnC;QACA,MAAM,IAAI,MAAM,iBAAiB;IAClC;AACD","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/bcs/index.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tbcs,\n\tBCS as BcsRegistry,\n\tfromB58,\n\tfromHEX,\n\tgetSuiMoveConfig,\n\ttoB58,\n\ttoHEX,\n} from '@mysten/bcs';\nimport type { BcsType, BcsTypeOptions } from '@mysten/bcs';\n\nimport type { MoveCallTransaction } from '../builder/Transactions.js';\nimport type { SuiObjectRef as SuiObjectRefType } from '../types/objects.js';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../utils/sui-types.js';\nimport { TypeTagSerializer } from './type-tag-serializer.js';\n\nexport { TypeTagSerializer } from './type-tag-serializer.js';\n\n/**\n * A reference to a shared object.\n */\nexport type SharedObjectRef = {\n\t/** Hex code as string representing the object id */\n\tobjectId: string;\n\n\t/** The version the object was shared at */\n\tinitialSharedVersion: number | string;\n\n\t/** Whether reference is mutable */\n\tmutable: boolean;\n};\n\n/**\n * An object argument.\n */\nexport type ObjectArg =\n\t| { ImmOrOwned: SuiObjectRefType }\n\t| { Shared: SharedObjectRef }\n\t| { Receiving: SuiObjectRefType };\n\n/**\n * A pure argument.\n */\nexport type PureArg = { Pure: ArrayLike<number> };\n\nexport function isPureArg(arg: any): arg is PureArg {\n\treturn (arg as PureArg).Pure !== undefined;\n}\n\n/**\n * An argument for the transaction. It is a 'meant' enum which expects to have\n * one of the optional properties. If not, the BCS error will be thrown while\n * attempting to form a transaction.\n *\n * Example:\n * ```js\n * let arg1: CallArg = { Object: { Shared: {\n *   objectId: '5460cf92b5e3e7067aaace60d88324095fd22944',\n *   initialSharedVersion: 1,\n *   mutable: true,\n * } } };\n * let arg2: CallArg = { Pure: bcs.ser(BCS.STRING, 100000).toBytes() };\n * let arg3: CallArg = { Object: { ImmOrOwned: {\n *   objectId: '4047d2e25211d87922b6650233bd0503a6734279',\n *   version: 1,\n *   digest: 'bCiANCht4O9MEUhuYjdRCqRPZjr2rJ8MfqNiwyhmRgA='\n * } } };\n * ```\n *\n * For `Pure` arguments BCS is required. You must encode the values with BCS according\n * to the type required by the called function. Pure accepts only serialized values\n */\nexport type CallArg = PureArg | { Object: ObjectArg };\n\n/**\n * Kind of a TypeTag which is represented by a Move type identifier.\n */\nexport type StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: TypeTag[];\n};\n\n/**\n * Sui TypeTag object. A decoupled `0x...::module::Type<???>` parameter.\n */\nexport type TypeTag =\n\t| { bool: null | true }\n\t| { u8: null | true }\n\t| { u64: null | true }\n\t| { u128: null | true }\n\t| { address: null | true }\n\t| { signer: null | true }\n\t| { vector: TypeTag }\n\t| { struct: StructTag }\n\t| { u16: null | true }\n\t| { u32: null | true }\n\t| { u256: null | true };\n\n// ========== TransactionData ===========\n\n/**\n * The GasData to be used in the transaction.\n */\nexport type GasData = {\n\tpayment: SuiObjectRefType[];\n\towner: string; // Gas Object's owner\n\tprice: number;\n\tbudget: number;\n};\n\n/**\n * TransactionExpiration\n *\n * Indications the expiration time for a transaction.\n */\nexport type TransactionExpiration = { None: null } | { Epoch: number };\n\nconst bcsRegistry = new BcsRegistry({\n\t...getSuiMoveConfig(),\n\ttypes: {\n\t\tenums: {\n\t\t\t'Option<T>': {\n\t\t\t\tNone: null,\n\t\t\t\tSome: 'T',\n\t\t\t},\n\t\t},\n\t},\n});\n\nfunction unsafe_u64(options?: BcsTypeOptions<number>) {\n\treturn bcs\n\t\t.u64({\n\t\t\tname: 'unsafe_u64',\n\t\t\t...(options as object),\n\t\t})\n\t\t.transform({\n\t\t\tinput: (val: number) => val,\n\t\t\toutput: (val) => Number(val),\n\t\t});\n}\n\nfunction optionEnum<T extends BcsType<any, any>>(type: T) {\n\treturn bcs.enum('Option', {\n\t\tNone: null,\n\t\tSome: type,\n\t});\n}\n\n/**\n * Wrapper around Enum, which transforms any `T` into an object with `kind` property:\n * @example\n * ```\n * let bcsEnum = { TransferObjects: { objects: [], address: ... } }\n * // becomes\n * let translatedEnum = { kind: 'TransferObjects', objects: [], address: ... };\n * ```\n */\nfunction enumKind<T extends object, Input extends object>(type: BcsType<T, Input>) {\n\ttype Merge<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;\n\ttype EnumKindTransform<T> = T extends infer U\n\t\t? Merge<(U[keyof U] extends null | boolean ? object : U[keyof U]) & { kind: keyof U }>\n\t\t: never;\n\n\treturn type.transform({\n\t\tinput: (val: EnumKindTransform<Input>) =>\n\t\t\t({\n\t\t\t\t[val.kind]: val,\n\t\t\t}) as Input,\n\t\toutput: (val) => {\n\t\t\tconst key = Object.keys(val)[0] as keyof T;\n\n\t\t\treturn { kind: key, ...val[key] } as EnumKindTransform<T>;\n\t\t},\n\t});\n}\n\nconst Address = bcs.bytes(SUI_ADDRESS_LENGTH).transform({\n\tinput: (val: string | Uint8Array) =>\n\t\ttypeof val === 'string' ? fromHEX(normalizeSuiAddress(val)) : val,\n\toutput: (val) => normalizeSuiAddress(toHEX(val)),\n});\n\nconst ObjectDigest = bcs.vector(bcs.u8()).transform({\n\tname: 'ObjectDigest',\n\tinput: (value: string) => fromB58(value),\n\toutput: (value) => toB58(new Uint8Array(value)),\n});\n\nconst SuiObjectRef = bcs.struct('SuiObjectRef', {\n\tobjectId: Address,\n\tversion: bcs.u64(),\n\tdigest: ObjectDigest,\n});\n\nconst SharedObjectRef = bcs.struct('SharedObjectRef', {\n\tobjectId: Address,\n\tinitialSharedVersion: bcs.u64(),\n\tmutable: bcs.bool(),\n});\n\nconst ObjectArg = bcs.enum('ObjectArg', {\n\tImmOrOwned: SuiObjectRef,\n\tShared: SharedObjectRef,\n\tReceiving: SuiObjectRef,\n});\n\nconst CallArg = bcs.enum('CallArg', {\n\tPure: bcs.vector(bcs.u8()),\n\tObject: ObjectArg,\n\tObjVec: bcs.vector(ObjectArg),\n});\n\nconst TypeTag: BcsType<TypeTag> = bcs.enum('TypeTag', {\n\tbool: null,\n\tu8: null,\n\tu64: null,\n\tu128: null,\n\taddress: null,\n\tsigner: null,\n\tvector: bcs.lazy(() => TypeTag),\n\tstruct: bcs.lazy(() => StructTag),\n\tu16: null,\n\tu32: null,\n\tu256: null,\n}) as never;\n\nconst Argument = enumKind(\n\tbcs.enum('Argument', {\n\t\tGasCoin: null,\n\t\tInput: bcs.struct('Input', { index: bcs.u16() }),\n\t\tResult: bcs.struct('Result', { index: bcs.u16() }),\n\t\tNestedResult: bcs.struct('NestedResult', { index: bcs.u16(), resultIndex: bcs.u16() }),\n\t}),\n);\n\n/** Custom serializer for decoding package, module, function easier */\nconst ProgrammableMoveCall = bcs\n\t.struct('ProgrammableMoveCall', {\n\t\tpackage: Address,\n\t\tmodule: bcs.string(),\n\t\tfunction: bcs.string(),\n\t\ttype_arguments: bcs.vector(TypeTag),\n\t\targuments: bcs.vector(Argument),\n\t})\n\t.transform({\n\t\tinput: (data: MoveCallTransaction) => {\n\t\t\tconst [pkg, module, fun] = data.target.split('::');\n\t\t\tconst type_arguments = data.typeArguments.map((tag) =>\n\t\t\t\tTypeTagSerializer.parseFromStr(tag, true),\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tpackage: normalizeSuiAddress(pkg),\n\t\t\t\tmodule,\n\t\t\t\tfunction: fun,\n\t\t\t\ttype_arguments,\n\t\t\t\targuments: data.arguments,\n\t\t\t};\n\t\t},\n\t\toutput: (data) => {\n\t\t\treturn {\n\t\t\t\ttarget: [data.package, data.module, data.function].join(\n\t\t\t\t\t'::',\n\t\t\t\t) as `${string}::${string}::${string}`,\n\t\t\t\targuments: data.arguments,\n\t\t\t\ttypeArguments: data.type_arguments.map(TypeTagSerializer.tagToString),\n\t\t\t};\n\t\t},\n\t});\n\nconst Transaction = enumKind(\n\tbcs.enum('Transaction', {\n\t\t/**\n\t\t * A Move Call - any public Move function can be called via\n\t\t * this transaction. The results can be used that instant to pass\n\t\t * into the next transaction.\n\t\t */\n\t\tMoveCall: ProgrammableMoveCall,\n\t\t/**\n\t\t * Transfer vector of objects to a receiver.\n\t\t */\n\t\tTransferObjects: bcs.struct('TransferObjects', {\n\t\t\tobjects: bcs.vector(Argument),\n\t\t\taddress: Argument,\n\t\t}),\n\t\t/**\n\t\t * Split `amount` from a `coin`.\n\t\t */\n\t\tSplitCoins: bcs.struct('SplitCoins', { coin: Argument, amounts: bcs.vector(Argument) }),\n\t\t/**\n\t\t * Merge Vector of Coins (`sources`) into a `destination`.\n\t\t */\n\t\tMergeCoins: bcs.struct('MergeCoins', { destination: Argument, sources: bcs.vector(Argument) }),\n\t\t/**\n\t\t * Publish a Move module.\n\t\t */\n\t\tPublish: bcs.struct('Publish', {\n\t\t\tmodules: bcs.vector(bcs.vector(bcs.u8())),\n\t\t\tdependencies: bcs.vector(Address),\n\t\t}),\n\t\t/**\n\t\t * Build a vector of objects using the input arguments.\n\t\t * It is impossible to construct a `vector<T: key>` otherwise,\n\t\t * so this call serves a utility function.\n\t\t */\n\t\tMakeMoveVec: bcs.struct('MakeMoveVec', {\n\t\t\ttype: optionEnum(TypeTag),\n\t\t\tobjects: bcs.vector(Argument),\n\t\t}),\n\t\t/**  */\n\t\tUpgrade: bcs.struct('Upgrade', {\n\t\t\tmodules: bcs.vector(bcs.vector(bcs.u8())),\n\t\t\tdependencies: bcs.vector(Address),\n\t\t\tpackageId: Address,\n\t\t\tticket: Argument,\n\t\t}),\n\t}),\n);\n\nconst ProgrammableTransaction = bcs.struct('ProgrammableTransaction', {\n\tinputs: bcs.vector(CallArg),\n\ttransactions: bcs.vector(Transaction),\n});\n\nconst TransactionKind = bcs.enum('TransactionKind', {\n\tProgrammableTransaction: ProgrammableTransaction,\n\tChangeEpoch: null,\n\tGenesis: null,\n\tConsensusCommitPrologue: null,\n});\n\nconst TransactionExpiration = bcs.enum('TransactionExpiration', {\n\tNone: null,\n\tEpoch: unsafe_u64(),\n});\n\nconst StructTag = bcs.struct('StructTag', {\n\taddress: Address,\n\tmodule: bcs.string(),\n\tname: bcs.string(),\n\ttypeParams: bcs.vector(TypeTag),\n});\n\nconst GasData = bcs.struct('GasData', {\n\tpayment: bcs.vector(SuiObjectRef),\n\towner: Address,\n\tprice: bcs.u64(),\n\tbudget: bcs.u64(),\n});\n\nconst TransactionDataV1 = bcs.struct('TransactionDataV1', {\n\tkind: TransactionKind,\n\tsender: Address,\n\tgasData: GasData,\n\texpiration: TransactionExpiration,\n});\n\nconst TransactionData = bcs.enum('TransactionData', {\n\tV1: TransactionDataV1,\n});\n\n// Signed transaction data needed to generate transaction digest.\nconst SenderSignedData = bcs.struct('SenderSignedData', {\n\tdata: TransactionData,\n\ttxSignatures: bcs.vector(bcs.vector(bcs.u8())),\n});\n\nconst CompressedSignature = bcs.enum('CompressedSignature', {\n\tED25519: bcs.fixedArray(64, bcs.u8()),\n\tSecp256k1: bcs.fixedArray(64, bcs.u8()),\n\tSecp256r1: bcs.fixedArray(64, bcs.u8()),\n\tZkLogin: bcs.vector(bcs.u8()),\n});\n\nconst PublicKey = bcs.enum('PublicKey', {\n\tED25519: bcs.fixedArray(32, bcs.u8()),\n\tSecp256k1: bcs.fixedArray(33, bcs.u8()),\n\tSecp256r1: bcs.fixedArray(33, bcs.u8()),\n\tZkLogin: bcs.vector(bcs.u8()),\n});\n\nconst MultiSigPkMap = bcs.struct('MultiSigPkMap', {\n\tpubKey: PublicKey,\n\tweight: bcs.u8(),\n});\n\nconst MultiSigPublicKey = bcs.struct('MultiSigPublicKey', {\n\tpk_map: bcs.vector(MultiSigPkMap),\n\tthreshold: bcs.u16(),\n});\n\nconst MultiSig = bcs.struct('MultiSig', {\n\tsigs: bcs.vector(CompressedSignature),\n\tbitmap: bcs.u16(),\n\tmultisig_pk: MultiSigPublicKey,\n});\n\nconst suiBcs = {\n\t...bcs,\n\tU8: bcs.u8(),\n\tU16: bcs.u16(),\n\tU32: bcs.u32(),\n\tU64: bcs.u64(),\n\tU128: bcs.u128(),\n\tU256: bcs.u256(),\n\tULEB128: bcs.uleb128(),\n\tBool: bcs.bool(),\n\tString: bcs.string(),\n\tAddress,\n\tArgument,\n\tCallArg,\n\tCompressedSignature,\n\tGasData,\n\tMultiSig,\n\tMultiSigPkMap,\n\tMultiSigPublicKey,\n\tObjectArg,\n\tObjectDigest,\n\tProgrammableMoveCall,\n\tProgrammableTransaction,\n\tPublicKey,\n\tSenderSignedData,\n\tSharedObjectRef,\n\tStructTag,\n\tSuiObjectRef,\n\tTransaction,\n\tTransactionData,\n\tTransactionDataV1,\n\tTransactionExpiration,\n\tTransactionKind,\n\tTypeTag,\n\n\t// preserve backwards compatibility with old bcs export\n\tser: bcsRegistry.ser.bind(bcsRegistry),\n\tde: bcsRegistry.de.bind(bcsRegistry),\n\tgetTypeInterface: bcsRegistry.getTypeInterface.bind(bcsRegistry),\n\thasType: bcsRegistry.hasType.bind(bcsRegistry),\n\tparseTypeName: bcsRegistry.parseTypeName.bind(bcsRegistry),\n\tregisterAddressType: bcsRegistry.registerAddressType.bind(bcsRegistry),\n\tregisterAlias: bcsRegistry.registerAlias.bind(bcsRegistry),\n\tregisterBcsType: bcsRegistry.registerBcsType.bind(bcsRegistry),\n\tregisterEnumType: bcsRegistry.registerEnumType.bind(bcsRegistry),\n\tregisterStructType: bcsRegistry.registerStructType.bind(bcsRegistry),\n\tregisterType: bcsRegistry.registerType.bind(bcsRegistry),\n\ttypes: bcsRegistry.types,\n};\n\nbcsRegistry.registerBcsType('utf8string', () => bcs.string({ name: 'utf8string' }));\nbcsRegistry.registerBcsType('unsafe_u64', () => unsafe_u64());\nbcsRegistry.registerBcsType('enumKind', (T) => enumKind(T));\n\n[\n\tAddress,\n\tArgument,\n\tCallArg,\n\tCompressedSignature,\n\tGasData,\n\tMultiSig,\n\tMultiSigPkMap,\n\tMultiSigPublicKey,\n\tObjectArg,\n\tObjectDigest,\n\tProgrammableMoveCall,\n\tProgrammableTransaction,\n\tPublicKey,\n\tSenderSignedData,\n\tSharedObjectRef,\n\tStructTag,\n\tSuiObjectRef,\n\tTransaction,\n\tTransactionData,\n\tTransactionDataV1,\n\tTransactionExpiration,\n\tTransactionKind,\n\tTypeTag,\n].forEach((type) => {\n\tbcsRegistry.registerBcsType(type.name, () => type);\n});\n\nexport { suiBcs as bcs, bcsRegistry };\n"],"names":["TypeTagSerializer"],"mappings":";;;;;AAGA;;;;AAaA,SAAS,qBAAqB,0BAA0B;AACxD,SAAS,yBAAyB;;;;;AA+B3B,SAAS,UAAU,GAAA,EAA0B;IACnD,OAAQ,IAAgB,IAAA,KAAS,KAAA;AAClC;AAwEA,MAAM,cAAc,qKAAI,MAAA,CAAY;IACnC,GAAG,wLAAA,CAAiB,EAAA;IACpB,OAAO;QACN,OAAO;YACN,aAAa;gBACZ,MAAM;gBACN,MAAM;YACP;QACD;IACD;AACD,CAAC;AAED,SAAS,WAAW,OAAA,EAAkC;IACrD,wJAAO,OAAA,CACL,GAAA,CAAI;QACJ,MAAM;QACN,GAAI,OAAA;IACL,CAAC,EACA,SAAA,CAAU;QACV,OAAO,CAAC,MAAgB;QACxB,QAAQ,CAAC,MAAQ,OAAO,GAAG;IAC5B,CAAC;AACH;AAEA,SAAS,WAAwC,IAAA,EAAS;IACzD,yJAAO,MAAA,CAAI,IAAA,CAAK,UAAU;QACzB,MAAM;QACN,MAAM;IACP,CAAC;AACF;AAWA,SAAS,SAAiD,IAAA,EAAyB;IAMlF,OAAO,KAAK,SAAA,CAAU;QACrB,OAAO,CAAC,MAAA,CACN;gBACA,CAAC,IAAI,IAAI,CAAA,EAAG;YACb,CAAA;QACD,QAAQ,CAAC,QAAQ;YAChB,MAAM,MAAM,OAAO,IAAA,CAAK,GAAG,CAAA,CAAE,CAAC,CAAA;YAE9B,OAAO;gBAAE,MAAM;gBAAK,GAAG,GAAA,CAAI,GAAG,CAAA;YAAE;QACjC;IACD,CAAC;AACF;AAEA,MAAM,4JAAU,MAAA,CAAI,KAAA,2KAAM,qBAAkB,EAAE,SAAA,CAAU;IACvD,OAAO,CAAC,MACP,OAAO,QAAQ,iKAAW,UAAA,gLAAQ,sBAAA,EAAoB,GAAG,CAAC,IAAI;IAC/D,QAAQ,CAAC,oLAAQ,sBAAA,wJAAoB,QAAA,EAAM,GAAG,CAAC;AAChD,CAAC;AAED,MAAM,iKAAe,MAAA,CAAI,MAAA,CAAO,wJAAA,CAAI,EAAA,CAAG,CAAC,EAAE,SAAA,CAAU;IACnD,MAAM;IACN,OAAO,CAAC,8JAAkB,UAAA,EAAQ,KAAK;IACvC,QAAQ,CAAC,6JAAU,SAAA,EAAM,IAAI,WAAW,KAAK,CAAC;AAC/C,CAAC;AAED,MAAM,iKAAe,MAAA,CAAI,MAAA,CAAO,gBAAgB;IAC/C,UAAU;IACV,0JAAS,OAAA,CAAI,GAAA,CAAI;IACjB,QAAQ;AACT,CAAC;AAED,MAAM,oKAAkB,MAAA,CAAI,MAAA,CAAO,mBAAmB;IACrD,UAAU;IACV,wKAAsB,MAAA,CAAI,GAAA,CAAI;IAC9B,2JAAS,MAAA,CAAI,IAAA,CAAK;AACnB,CAAC;AAED,MAAM,8JAAY,MAAA,CAAI,IAAA,CAAK,aAAa;IACvC,YAAY;IACZ,QAAQ;IACR,WAAW;AACZ,CAAC;AAED,MAAM,4JAAU,MAAA,CAAI,IAAA,CAAK,WAAW;IACnC,wJAAM,MAAA,CAAI,MAAA,mJAAO,MAAA,CAAI,EAAA,CAAG,CAAC;IACzB,QAAQ;IACR,0JAAQ,MAAA,CAAI,MAAA,CAAO,SAAS;AAC7B,CAAC;AAED,MAAM,2JAA4B,OAAA,CAAI,IAAA,CAAK,WAAW;IACrD,MAAM;IACN,IAAI;IACJ,KAAK;IACL,MAAM;IACN,SAAS;IACT,QAAQ;IACR,0JAAQ,MAAA,CAAI,IAAA,CAAK,IAAM,OAAO;IAC9B,0JAAQ,MAAA,CAAI,IAAA,CAAK,IAAM,SAAS;IAChC,KAAK;IACL,KAAK;IACL,MAAM;AACP,CAAC;AAED,MAAM,WAAW,SAChB,wJAAA,CAAI,IAAA,CAAK,YAAY;IACpB,SAAS;IACT,yJAAO,MAAA,CAAI,MAAA,CAAO,SAAS;QAAE,yJAAO,MAAA,CAAI,GAAA,CAAI;IAAE,CAAC;IAC/C,0JAAQ,MAAA,CAAI,MAAA,CAAO,UAAU;QAAE,yJAAO,MAAA,CAAI,GAAA,CAAI;IAAE,CAAC;IACjD,cAAc,wJAAA,CAAI,MAAA,CAAO,gBAAgB;QAAE,yJAAO,MAAA,CAAI,GAAA,CAAI;QAAG,8JAAa,OAAA,CAAI,GAAA,CAAI;IAAE,CAAC;AACtF,CAAC;AAIF,MAAM,yKAAuB,MAAA,CAC3B,MAAA,CAAO,wBAAwB;IAC/B,SAAS;IACT,0JAAQ,MAAA,CAAI,MAAA,CAAO;IACnB,4JAAU,MAAA,CAAI,MAAA,CAAO;IACrB,kKAAgB,MAAA,CAAI,MAAA,CAAO,OAAO;IAClC,6JAAW,MAAA,CAAI,MAAA,CAAO,QAAQ;AAC/B,CAAC,EACA,SAAA,CAAU;IACV,OAAO,CAAC,SAA8B;QACrC,MAAM,CAAC,KAAK,QAAQ,GAAG,CAAA,GAAI,KAAK,MAAA,CAAO,KAAA,CAAM,IAAI;QACjD,MAAM,iBAAiB,KAAK,aAAA,CAAc,GAAA,CAAI,CAAC,2LAC9C,oBAAA,CAAkB,YAAA,CAAa,KAAK,IAAI;QAGzC,OAAO;YACN,aAAS,gMAAA,EAAoB,GAAG;YAChC;YACA,UAAU;YACV;YACA,WAAW,KAAK,SAAA;QACjB;IACD;IACA,QAAQ,CAAC,SAAS;QACjB,OAAO;YACN,QAAQ;gBAAC,KAAK,OAAA;gBAAS,KAAK,MAAA;gBAAQ,KAAK,QAAQ;aAAA,CAAE,IAAA,CAClD;YAED,WAAW,KAAK,SAAA;YAChB,eAAe,KAAK,cAAA,CAAe,GAAA,qLAAI,qBAAA,CAAkB,WAAW;QACrE;IACD;AACD,CAAC;AAEF,MAAM,cAAc,2JACnB,MAAA,CAAI,IAAA,CAAK,eAAe;IAAA;;;;KAAA,GAMvB,UAAU;IAAA;;KAAA,GAIV,mKAAiB,MAAA,CAAI,MAAA,CAAO,mBAAmB;QAC9C,2JAAS,MAAA,CAAI,MAAA,CAAO,QAAQ;QAC5B,SAAS;IACV,CAAC;IAAA;;KAAA,GAID,8JAAY,MAAA,CAAI,MAAA,CAAO,cAAc;QAAE,MAAM;QAAU,SAAS,wJAAA,CAAI,MAAA,CAAO,QAAQ;IAAE,CAAC;IAAA;;KAAA,GAItF,8JAAY,MAAA,CAAI,MAAA,CAAO,cAAc;QAAE,aAAa;QAAU,SAAS,wJAAA,CAAI,MAAA,CAAO,QAAQ;IAAE,CAAC;IAAA;;KAAA,GAI7F,2JAAS,MAAA,CAAI,MAAA,CAAO,WAAW;QAC9B,2JAAS,MAAA,CAAI,MAAA,kJAAO,OAAA,CAAI,MAAA,mJAAO,MAAA,CAAI,EAAA,CAAG,CAAC,CAAC;QACxC,gKAAc,MAAA,CAAI,MAAA,CAAO,OAAO;IACjC,CAAC;IAAA;;;;KAAA,GAMD,+JAAa,MAAA,CAAI,MAAA,CAAO,eAAe;QACtC,MAAM,WAAW,OAAO;QACxB,0JAAS,OAAA,CAAI,MAAA,CAAO,QAAQ;IAC7B,CAAC;IAAA,KAAA,GAED,2JAAS,MAAA,CAAI,MAAA,CAAO,WAAW;QAC9B,2JAAS,MAAA,CAAI,MAAA,mJAAO,MAAA,CAAI,MAAA,mJAAO,MAAA,CAAI,EAAA,CAAG,CAAC,CAAC;QACxC,gKAAc,MAAA,CAAI,MAAA,CAAO,OAAO;QAChC,WAAW;QACX,QAAQ;IACT,CAAC;AACF,CAAC;AAGF,MAAM,4KAA0B,MAAA,CAAI,MAAA,CAAO,2BAA2B;IACrE,0JAAQ,MAAA,CAAI,MAAA,CAAO,OAAO;IAC1B,gKAAc,MAAA,CAAI,MAAA,CAAO,WAAW;AACrC,CAAC;AAED,MAAM,oKAAkB,MAAA,CAAI,IAAA,CAAK,mBAAmB;IACnD;IACA,aAAa;IACb,SAAS;IACT,yBAAyB;AAC1B,CAAC;AAED,MAAM,0KAAwB,MAAA,CAAI,IAAA,CAAK,yBAAyB;IAC/D,MAAM;IACN,OAAO,WAAW;AACnB,CAAC;AAED,MAAM,8JAAY,MAAA,CAAI,MAAA,CAAO,aAAa;IACzC,SAAS;IACT,0JAAQ,MAAA,CAAI,MAAA,CAAO;IACnB,MAAM,wJAAA,CAAI,MAAA,CAAO;IACjB,8JAAY,MAAA,CAAI,MAAA,CAAO,OAAO;AAC/B,CAAC;AAED,MAAM,4JAAU,MAAA,CAAI,MAAA,CAAO,WAAW;IACrC,SAAS,wJAAA,CAAI,MAAA,CAAO,YAAY;IAChC,OAAO;IACP,yJAAO,MAAA,CAAI,GAAA,CAAI;IACf,0JAAQ,MAAA,CAAI,GAAA,CAAI;AACjB,CAAC;AAED,MAAM,sKAAoB,MAAA,CAAI,MAAA,CAAO,qBAAqB;IACzD,MAAM;IACN,QAAQ;IACR,SAAS;IACT,YAAY;AACb,CAAC;AAED,MAAM,oKAAkB,MAAA,CAAI,IAAA,CAAK,mBAAmB;IACnD,IAAI;AACL,CAAC;AAGD,MAAM,qKAAmB,MAAA,CAAI,MAAA,CAAO,oBAAoB;IACvD,MAAM;IACN,gKAAc,MAAA,CAAI,MAAA,CAAO,wJAAA,CAAI,MAAA,mJAAO,MAAA,CAAI,EAAA,CAAG,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,sBAAsB,wJAAA,CAAI,IAAA,CAAK,uBAAuB;IAC3D,2JAAS,MAAA,CAAI,UAAA,CAAW,sJAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACpC,WAAW,wJAAA,CAAI,UAAA,CAAW,sJAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACtC,6JAAW,MAAA,CAAI,UAAA,CAAW,sJAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACtC,2JAAS,MAAA,CAAI,MAAA,mJAAO,MAAA,CAAI,EAAA,CAAG,CAAC;AAC7B,CAAC;AAED,MAAM,8JAAY,MAAA,CAAI,IAAA,CAAK,aAAa;IACvC,2JAAS,MAAA,CAAI,UAAA,CAAW,sJAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACpC,6JAAW,MAAA,CAAI,UAAA,CAAW,sJAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACtC,6JAAW,MAAA,CAAI,UAAA,CAAW,sJAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACtC,2JAAS,MAAA,CAAI,MAAA,CAAO,wJAAA,CAAI,EAAA,CAAG,CAAC;AAC7B,CAAC;AAED,MAAM,kKAAgB,MAAA,CAAI,MAAA,CAAO,iBAAiB;IACjD,QAAQ;IACR,QAAQ,wJAAA,CAAI,EAAA,CAAG;AAChB,CAAC;AAED,MAAM,sKAAoB,MAAA,CAAI,MAAA,CAAO,qBAAqB;IACzD,yJAAQ,OAAA,CAAI,MAAA,CAAO,aAAa;IAChC,6JAAW,MAAA,CAAI,GAAA,CAAI;AACpB,CAAC;AAED,MAAM,WAAW,wJAAA,CAAI,MAAA,CAAO,YAAY;IACvC,wJAAM,MAAA,CAAI,MAAA,CAAO,mBAAmB;IACpC,0JAAQ,MAAA,CAAI,GAAA,CAAI;IAChB,aAAa;AACd,CAAC;AAED,MAAM,SAAS;IACd,qJAAG,MAAA;IACH,sJAAI,MAAA,CAAI,EAAA,CAAG;IACX,uJAAK,MAAA,CAAI,GAAA,CAAI;IACb,KAAK,wJAAA,CAAI,GAAA,CAAI;IACb,uJAAK,MAAA,CAAI,GAAA,CAAI;IACb,wJAAM,MAAA,CAAI,IAAA,CAAK;IACf,wJAAM,MAAA,CAAI,IAAA,CAAK;IACf,2JAAS,MAAA,CAAI,OAAA,CAAQ;IACrB,uJAAM,OAAA,CAAI,IAAA,CAAK;IACf,0JAAQ,MAAA,CAAI,MAAA,CAAO;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,uDAAA;IAGA,KAAK,YAAY,GAAA,CAAI,IAAA,CAAK,WAAW;IACrC,IAAI,YAAY,EAAA,CAAG,IAAA,CAAK,WAAW;IACnC,kBAAkB,YAAY,gBAAA,CAAiB,IAAA,CAAK,WAAW;IAC/D,SAAS,YAAY,OAAA,CAAQ,IAAA,CAAK,WAAW;IAC7C,eAAe,YAAY,aAAA,CAAc,IAAA,CAAK,WAAW;IACzD,qBAAqB,YAAY,mBAAA,CAAoB,IAAA,CAAK,WAAW;IACrE,eAAe,YAAY,aAAA,CAAc,IAAA,CAAK,WAAW;IACzD,iBAAiB,YAAY,eAAA,CAAgB,IAAA,CAAK,WAAW;IAC7D,kBAAkB,YAAY,gBAAA,CAAiB,IAAA,CAAK,WAAW;IAC/D,oBAAoB,YAAY,kBAAA,CAAmB,IAAA,CAAK,WAAW;IACnE,cAAc,YAAY,YAAA,CAAa,IAAA,CAAK,WAAW;IACvD,OAAO,YAAY,KAAA;AACpB;AAEA,YAAY,eAAA,CAAgB,cAAc,sJAAM,MAAA,CAAI,MAAA,CAAO;QAAE,MAAM;IAAa,CAAC,CAAC;AAClF,YAAY,eAAA,CAAgB,cAAc,IAAM,WAAW,CAAC;AAC5D,YAAY,eAAA,CAAgB,YAAY,CAAC,IAAM,SAAS,CAAC,CAAC;AAE1D;IACC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD,CAAE,OAAA,CAAQ,CAAC,SAAS;IACnB,YAAY,eAAA,CAAgB,KAAK,IAAA,EAAM,IAAM,IAAI;AAClD,CAAC","debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/types/normalized.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tboolean,\n\tdefine,\n\tis,\n\tliteral,\n\tnumber,\n\tobject,\n\trecord,\n\tstring,\n\ttuple,\n\tunion,\n} from 'superstruct';\n\nexport type SuiMoveFunctionArgTypesResponse = Infer<typeof SuiMoveFunctionArgType>[];\n\nexport const SuiMoveFunctionArgType = union([string(), object({ Object: string() })]);\n\nexport const SuiMoveFunctionArgTypes = array(SuiMoveFunctionArgType);\nexport type SuiMoveFunctionArgTypes = Infer<typeof SuiMoveFunctionArgTypes>;\n\nexport const SuiMoveModuleId = object({\n\taddress: string(),\n\tname: string(),\n});\nexport type SuiMoveModuleId = Infer<typeof SuiMoveModuleId>;\n\nexport const SuiMoveVisibility = union([literal('Private'), literal('Public'), literal('Friend')]);\nexport type SuiMoveVisibility = Infer<typeof SuiMoveVisibility>;\n\nexport const SuiMoveAbilitySet = object({\n\tabilities: array(string()),\n});\nexport type SuiMoveAbilitySet = Infer<typeof SuiMoveAbilitySet>;\n\nexport const SuiMoveStructTypeParameter = object({\n\tconstraints: SuiMoveAbilitySet,\n\tisPhantom: boolean(),\n});\nexport type SuiMoveStructTypeParameter = Infer<typeof SuiMoveStructTypeParameter>;\n\nexport const SuiMoveNormalizedTypeParameterType = object({\n\tTypeParameter: number(),\n});\nexport type SuiMoveNormalizedTypeParameterType = Infer<typeof SuiMoveNormalizedTypeParameterType>;\n\nexport type SuiMoveNormalizedType =\n\t| string\n\t| SuiMoveNormalizedTypeParameterType\n\t| { Reference: SuiMoveNormalizedType }\n\t| { MutableReference: SuiMoveNormalizedType }\n\t| { Vector: SuiMoveNormalizedType }\n\t| SuiMoveNormalizedStructType;\n\nexport const MoveCallMetric = tuple([\n\tobject({\n\t\tmodule: string(),\n\t\tpackage: string(),\n\t\tfunction: string(),\n\t}),\n\tstring(),\n]);\n\nexport type MoveCallMetric = Infer<typeof MoveCallMetric>;\n\nexport const MoveCallMetrics = object({\n\trank3Days: array(MoveCallMetric),\n\trank7Days: array(MoveCallMetric),\n\trank30Days: array(MoveCallMetric),\n});\n\nexport type MoveCallMetrics = Infer<typeof MoveCallMetrics>;\n\nfunction isSuiMoveNormalizedType(value: unknown): value is SuiMoveNormalizedType {\n\tif (!value) return false;\n\tif (typeof value === 'string') return true;\n\tif (is(value, SuiMoveNormalizedTypeParameterType)) return true;\n\tif (isSuiMoveNormalizedStructType(value)) return true;\n\tif (typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (is(valueProperties.Reference, SuiMoveNormalizedType)) return true;\n\tif (is(valueProperties.MutableReference, SuiMoveNormalizedType)) return true;\n\tif (is(valueProperties.Vector, SuiMoveNormalizedType)) return true;\n\treturn false;\n}\n\nexport const SuiMoveNormalizedType = define<SuiMoveNormalizedType>(\n\t'SuiMoveNormalizedType',\n\tisSuiMoveNormalizedType,\n);\n\nexport type SuiMoveNormalizedStructType = {\n\tStruct: {\n\t\taddress: string;\n\t\tmodule: string;\n\t\tname: string;\n\t\ttypeArguments: SuiMoveNormalizedType[];\n\t};\n};\n\nfunction isSuiMoveNormalizedStructType(value: unknown): value is SuiMoveNormalizedStructType {\n\tif (!value || typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (!valueProperties.Struct || typeof valueProperties.Struct !== 'object') return false;\n\n\tconst structProperties = valueProperties.Struct as Record<string, unknown>;\n\tif (\n\t\ttypeof structProperties.address !== 'string' ||\n\t\ttypeof structProperties.module !== 'string' ||\n\t\ttypeof structProperties.name !== 'string' ||\n\t\t!Array.isArray(structProperties.typeArguments) ||\n\t\t!structProperties.typeArguments.every((value) => isSuiMoveNormalizedType(value))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// NOTE: This type is recursive, so we need to manually implement it:\nexport const SuiMoveNormalizedStructType = define<SuiMoveNormalizedStructType>(\n\t'SuiMoveNormalizedStructType',\n\tisSuiMoveNormalizedStructType,\n);\n\nexport const SuiMoveNormalizedFunction = object({\n\tvisibility: SuiMoveVisibility,\n\tisEntry: boolean(),\n\ttypeParameters: array(SuiMoveAbilitySet),\n\tparameters: array(SuiMoveNormalizedType),\n\treturn: array(SuiMoveNormalizedType),\n});\nexport type SuiMoveNormalizedFunction = Infer<typeof SuiMoveNormalizedFunction>;\n\nexport const SuiMoveNormalizedField = object({\n\tname: string(),\n\ttype: SuiMoveNormalizedType,\n});\nexport type SuiMoveNormalizedField = Infer<typeof SuiMoveNormalizedField>;\n\nexport const SuiMoveNormalizedStruct = object({\n\tabilities: SuiMoveAbilitySet,\n\ttypeParameters: array(SuiMoveStructTypeParameter),\n\tfields: array(SuiMoveNormalizedField),\n});\nexport type SuiMoveNormalizedStruct = Infer<typeof SuiMoveNormalizedStruct>;\n\nexport const SuiMoveNormalizedModule = object({\n\tfileFormatVersion: number(),\n\taddress: string(),\n\tname: string(),\n\tfriends: array(SuiMoveModuleId),\n\tstructs: record(string(), SuiMoveNormalizedStruct),\n\texposedFunctions: record(string(), SuiMoveNormalizedFunction),\n});\nexport type SuiMoveNormalizedModule = Infer<typeof SuiMoveNormalizedModule>;\n\nexport const SuiMoveNormalizedModules = record(string(), SuiMoveNormalizedModule);\nexport type SuiMoveNormalizedModules = Infer<typeof SuiMoveNormalizedModules>;\n\nexport function extractMutableReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'MutableReference' in normalizedType\n\t\t? normalizedType.MutableReference\n\t\t: undefined;\n}\n\nexport function extractReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'Reference' in normalizedType\n\t\t? normalizedType.Reference\n\t\t: undefined;\n}\n\nexport function extractStructTag(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedStructType | undefined {\n\tif (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n\t\treturn normalizedType;\n\t}\n\n\tconst ref = extractReference(normalizedType);\n\tconst mutRef = extractMutableReference(normalizedType);\n\n\tif (typeof ref === 'object' && 'Struct' in ref) {\n\t\treturn ref;\n\t}\n\n\tif (typeof mutRef === 'object' && 'Struct' in mutRef) {\n\t\treturn mutRef;\n\t}\n\treturn undefined;\n}\n"],"names":["value"],"mappings":"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","debugId":null}},
    {"offset": {"line": 672, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/types/common.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { boolean, define, literal, nullable, object, record, string, union } from 'superstruct';\n\nimport type { CallArg } from '../bcs/index.js';\n\nexport const ObjectOwner = union([\n\tobject({\n\t\tAddressOwner: string(),\n\t}),\n\tobject({\n\t\tObjectOwner: string(),\n\t}),\n\tobject({\n\t\tShared: object({\n\t\t\tinitial_shared_version: nullable(string()),\n\t\t}),\n\t}),\n\tliteral('Immutable'),\n]);\nexport type ObjectOwner = Infer<typeof ObjectOwner>;\n\nexport type SuiJsonValue = boolean | number | string | CallArg | Array<SuiJsonValue>;\nexport const SuiJsonValue = define<SuiJsonValue>('SuiJsonValue', () => true);\n\nconst ProtocolConfigValue = union([\n\tobject({ u32: string() }),\n\tobject({ u64: string() }),\n\tobject({ f64: string() }),\n]);\ntype ProtocolConfigValue = Infer<typeof ProtocolConfigValue>;\n\nexport const ProtocolConfig = object({\n\tattributes: record(string(), nullable(ProtocolConfigValue)),\n\tfeatureFlags: record(string(), boolean()),\n\tmaxSupportedProtocolVersion: string(),\n\tminSupportedProtocolVersion: string(),\n\tprotocolVersion: string(),\n});\nexport type ProtocolConfig = Infer<typeof ProtocolConfig>;\n"],"names":[],"mappings":";;;;;AAIA,SAAS,SAAS,QAAQ,SAAS,UAAU,QAAQ,QAAQ,QAAQ,aAAa;;AAI3E,MAAM,cAAc,sJAAA,EAAM;kJAChC,SAAA,EAAO;QACN,kBAAc,mJAAA,CAAO;IACtB,CAAC;kJACD,SAAA,EAAO;QACN,iBAAa,mJAAA,CAAO;IACrB,CAAC;kJACD,SAAA,EAAO;QACN,sJAAQ,SAAA,EAAO;YACd,sKAAwB,WAAA,GAAS,sJAAA,CAAO,CAAC;QAC1C,CAAC;IACF,CAAC;kJACD,UAAA,EAAQ,WAAW;CACnB;AAIM,MAAM,6JAAe,SAAA,EAAqB,gBAAgB,IAAM,IAAI;AAE3E,MAAM,oKAAsB,QAAA,EAAM;kJACjC,SAAA,EAAO;QAAE,mJAAK,SAAA,CAAO;IAAE,CAAC;kJACxB,SAAA,EAAO;QAAE,mJAAK,SAAA,CAAO;IAAE,CAAC;kJACxB,SAAA,EAAO;QAAE,mJAAK,SAAA,CAAO;IAAE,CAAC;CACxB;AAGM,MAAM,+JAAiB,SAAA,EAAO;IACpC,0JAAY,SAAA,gJAAO,SAAA,CAAO,KAAG,wJAAA,EAAS,mBAAmB,CAAC;IAC1D,4JAAc,SAAA,gJAAO,SAAA,CAAO,kJAAG,UAAA,CAAQ,CAAC;IACxC,2KAA6B,SAAA,CAAO;IACpC,2KAA6B,SAAA,CAAO;IACpC,+JAAiB,SAAA,CAAO;AACzB,CAAC","debugId":null}},
    {"offset": {"line": 718, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/types/objects.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tany,\n\tarray,\n\tassign,\n\tbigint,\n\tboolean,\n\tis,\n\tliteral,\n\tnullable,\n\tnumber,\n\tobject,\n\toptional,\n\trecord,\n\tstring,\n\ttuple,\n\tunion,\n\tunknown,\n} from 'superstruct';\n\nimport { ObjectOwner } from './common.js';\n\nexport const ObjectType = union([string(), literal('package')]);\nexport type ObjectType = Infer<typeof ObjectType>;\n\nexport const SuiObjectRef = object({\n\t/** Base64 string representing the object digest */\n\tdigest: string(),\n\t/** Hex code as string representing the object id */\n\tobjectId: string(),\n\t/** Object version */\n\tversion: union([number(), string(), bigint()]),\n});\nexport type SuiObjectRef = Infer<typeof SuiObjectRef>;\n\nexport const OwnedObjectRef = object({\n\towner: ObjectOwner,\n\treference: SuiObjectRef,\n});\nexport type OwnedObjectRef = Infer<typeof OwnedObjectRef>;\nexport const TransactionEffectsModifiedAtVersions = object({\n\tobjectId: string(),\n\tsequenceNumber: string(),\n});\n\nexport const SuiGasData = object({\n\tpayment: array(SuiObjectRef),\n\t/** Gas Object's owner */\n\towner: string(),\n\tprice: string(),\n\tbudget: string(),\n});\nexport type SuiGasData = Infer<typeof SuiGasData>;\n\nexport const SuiObjectInfo = assign(\n\tSuiObjectRef,\n\tobject({\n\t\ttype: string(),\n\t\towner: ObjectOwner,\n\t\tpreviousTransaction: string(),\n\t}),\n);\nexport type SuiObjectInfo = Infer<typeof SuiObjectInfo>;\n\nexport const ObjectContentFields = record(string(), any());\nexport type ObjectContentFields = Infer<typeof ObjectContentFields>;\n\nexport const MovePackageContent = record(string(), unknown());\nexport type MovePackageContent = Infer<typeof MovePackageContent>;\n\nexport const SuiMoveObject = object({\n\t/** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n\ttype: string(),\n\t/** Fields and values stored inside the Move object */\n\tfields: ObjectContentFields,\n\thasPublicTransfer: boolean(),\n});\nexport type SuiMoveObject = Infer<typeof SuiMoveObject>;\n\nexport const SuiMovePackage = object({\n\t/** A mapping from module name to disassembled Move bytecode */\n\tdisassembled: MovePackageContent,\n});\nexport type SuiMovePackage = Infer<typeof SuiMovePackage>;\n\nexport const SuiParsedData = union([\n\tassign(SuiMoveObject, object({ dataType: literal('moveObject') })),\n\tassign(SuiMovePackage, object({ dataType: literal('package') })),\n]);\nexport type SuiParsedData = Infer<typeof SuiParsedData>;\n\nexport const SuiRawMoveObject = object({\n\t/** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n\ttype: string(),\n\thasPublicTransfer: boolean(),\n\tversion: string(),\n\tbcsBytes: string(),\n});\nexport type SuiRawMoveObject = Infer<typeof SuiRawMoveObject>;\n\nexport const SuiRawMovePackage = object({\n\tid: string(),\n\t/** A mapping from module name to Move bytecode enocded in base64*/\n\tmoduleMap: record(string(), string()),\n});\nexport type SuiRawMovePackage = Infer<typeof SuiRawMovePackage>;\n\n// TODO(chris): consolidate SuiRawParsedData and SuiRawObject using generics\nexport const SuiRawData = union([\n\tassign(SuiRawMoveObject, object({ dataType: literal('moveObject') })),\n\tassign(SuiRawMovePackage, object({ dataType: literal('package') })),\n]);\nexport type SuiRawData = Infer<typeof SuiRawData>;\n\nexport const SUI_DECIMALS = 9;\n\nexport const MIST_PER_SUI = BigInt(1000000000);\n\nexport const SuiObjectResponseError = object({\n\tcode: string(),\n\terror: optional(string()),\n\tobject_id: optional(string()),\n\tparent_object_id: optional(string()),\n\tversion: optional(string()),\n\tdigest: optional(string()),\n});\nexport type SuiObjectResponseError = Infer<typeof SuiObjectResponseError>;\nexport const DisplayFieldsResponse = object({\n\tdata: nullable(optional(record(string(), string()))),\n\terror: nullable(optional(SuiObjectResponseError)),\n});\nexport type DisplayFieldsResponse = Infer<typeof DisplayFieldsResponse>;\n// TODO: remove after all envs support the new DisplayFieldsResponse;\nexport const DisplayFieldsBackwardCompatibleResponse = union([\n\tDisplayFieldsResponse,\n\toptional(record(string(), string())),\n]);\nexport type DisplayFieldsBackwardCompatibleResponse = Infer<\n\ttypeof DisplayFieldsBackwardCompatibleResponse\n>;\n\nexport const SuiObjectData = object({\n\tobjectId: string(),\n\tversion: string(),\n\tdigest: string(),\n\t/**\n\t * Type of the object, default to be undefined unless SuiObjectDataOptions.showType is set to true\n\t */\n\ttype: nullable(optional(string())),\n\t/**\n\t * Move object content or package content, default to be undefined unless SuiObjectDataOptions.showContent is set to true\n\t */\n\tcontent: nullable(optional(SuiParsedData)),\n\t/**\n\t * Move object content or package content in BCS bytes, default to be undefined unless SuiObjectDataOptions.showBcs is set to true\n\t */\n\tbcs: nullable(optional(SuiRawData)),\n\t/**\n\t * The owner of this object. Default to be undefined unless SuiObjectDataOptions.showOwner is set to true\n\t */\n\towner: nullable(optional(ObjectOwner)),\n\t/**\n\t * The digest of the transaction that created or last mutated this object.\n\t * Default to be undefined unless SuiObjectDataOptions.showPreviousTransaction is set to true\n\t */\n\tpreviousTransaction: nullable(optional(string())),\n\t/**\n\t * The amount of SUI we would rebate if this object gets deleted.\n\t * This number is re-calculated each time the object is mutated based on\n\t * the present storage gas price.\n\t * Default to be undefined unless SuiObjectDataOptions.showStorageRebate is set to true\n\t */\n\tstorageRebate: nullable(optional(string())),\n\t/**\n\t * Display metadata for this object, default to be undefined unless SuiObjectDataOptions.showDisplay is set to true\n\t * This can also be None if the struct type does not have Display defined\n\t * See more details in https://forums.sui.io/t/nft-object-display-proposal/4872\n\t */\n\tdisplay: nullable(optional(DisplayFieldsBackwardCompatibleResponse)),\n});\nexport type SuiObjectData = Infer<typeof SuiObjectData>;\n\n/**\n * Config for fetching object data\n */\nexport const SuiObjectDataOptions = object({\n\t/* Whether to fetch the object type, default to be true */\n\tshowType: nullable(optional(boolean())),\n\t/* Whether to fetch the object content, default to be false */\n\tshowContent: nullable(optional(boolean())),\n\t/* Whether to fetch the object content in BCS bytes, default to be false */\n\tshowBcs: nullable(optional(boolean())),\n\t/* Whether to fetch the object owner, default to be false */\n\tshowOwner: nullable(optional(boolean())),\n\t/* Whether to fetch the previous transaction digest, default to be false */\n\tshowPreviousTransaction: nullable(optional(boolean())),\n\t/* Whether to fetch the storage rebate, default to be false */\n\tshowStorageRebate: nullable(optional(boolean())),\n\t/* Whether to fetch the display metadata, default to be false */\n\tshowDisplay: nullable(optional(boolean())),\n});\nexport type SuiObjectDataOptions = Infer<typeof SuiObjectDataOptions>;\n\nexport const ObjectStatus = union([literal('Exists'), literal('notExists'), literal('Deleted')]);\nexport type ObjectStatus = Infer<typeof ObjectStatus>;\n\nexport const GetOwnedObjectsResponse = array(SuiObjectInfo);\nexport type GetOwnedObjectsResponse = Infer<typeof GetOwnedObjectsResponse>;\n\nexport const SuiObjectResponse = object({\n\tdata: nullable(optional(SuiObjectData)),\n\terror: nullable(optional(SuiObjectResponseError)),\n});\nexport type SuiObjectResponse = Infer<typeof SuiObjectResponse>;\n\nexport type Order = 'ascending' | 'descending';\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------- SuiObjectResponse ------------------------- */\n\nexport function getSuiObjectData(resp: SuiObjectResponse): SuiObjectData | null | undefined {\n\treturn resp.data;\n}\n\nexport function getObjectDeletedResponse(resp: SuiObjectResponse): SuiObjectRef | undefined {\n\tif (\n\t\tresp.error &&\n\t\t'object_id' in resp.error &&\n\t\t'version' in resp.error &&\n\t\t'digest' in resp.error\n\t) {\n\t\tconst error = resp.error as SuiObjectResponseError;\n\t\treturn {\n\t\t\tobjectId: error.object_id,\n\t\t\tversion: error.version,\n\t\t\tdigest: error.digest,\n\t\t} as SuiObjectRef;\n\t}\n\n\treturn undefined;\n}\n\nexport function getObjectNotExistsResponse(resp: SuiObjectResponse): string | undefined {\n\tif (\n\t\tresp.error &&\n\t\t'object_id' in resp.error &&\n\t\t!('version' in resp.error) &&\n\t\t!('digest' in resp.error)\n\t) {\n\t\treturn (resp.error as SuiObjectResponseError).object_id as string;\n\t}\n\n\treturn undefined;\n}\n\nexport function getObjectReference(\n\tresp: SuiObjectResponse | OwnedObjectRef,\n): SuiObjectRef | undefined {\n\tif ('reference' in resp) {\n\t\treturn resp.reference;\n\t}\n\tconst exists = getSuiObjectData(resp);\n\tif (exists) {\n\t\treturn {\n\t\t\tobjectId: exists.objectId,\n\t\t\tversion: exists.version,\n\t\t\tdigest: exists.digest,\n\t\t};\n\t}\n\treturn getObjectDeletedResponse(resp);\n}\n\n/* ------------------------------ SuiObjectRef ------------------------------ */\n\nexport function getObjectId(data: SuiObjectResponse | SuiObjectRef | OwnedObjectRef): string {\n\tif ('objectId' in data) {\n\t\treturn data.objectId;\n\t}\n\treturn (\n\t\tgetObjectReference(data)?.objectId ?? getObjectNotExistsResponse(data as SuiObjectResponse)!\n\t);\n}\n\nexport function getObjectVersion(\n\tdata: SuiObjectResponse | SuiObjectRef | SuiObjectData,\n): string | number | bigint | undefined {\n\tif ('version' in data) {\n\t\treturn data.version;\n\t}\n\treturn getObjectReference(data)?.version;\n}\n\n/* -------------------------------- SuiObject ------------------------------- */\n\nexport function isSuiObjectResponse(\n\tresp: SuiObjectResponse | SuiObjectData,\n): resp is SuiObjectResponse {\n\treturn (resp as SuiObjectResponse).data !== undefined;\n}\n\n/**\n * Deriving the object type from the object response\n * @returns 'package' if the object is a package, move object type(e.g., 0x2::coin::Coin<0x2::sui::SUI>)\n * if the object is a move object\n */\nexport function getObjectType(\n\tresp: SuiObjectResponse | SuiObjectData,\n): ObjectType | null | undefined {\n\tconst data = isSuiObjectResponse(resp) ? resp.data : resp;\n\n\tif (!data?.type && 'data' in resp) {\n\t\tif (data?.content?.dataType === 'package') {\n\t\t\treturn 'package';\n\t\t}\n\t\treturn getMoveObjectType(resp);\n\t}\n\treturn data?.type;\n}\n\nexport function getObjectPreviousTransactionDigest(\n\tresp: SuiObjectResponse,\n): string | null | undefined {\n\treturn getSuiObjectData(resp)?.previousTransaction;\n}\n\nexport function getObjectOwner(\n\tresp: SuiObjectResponse | ObjectOwner,\n): ObjectOwner | null | undefined {\n\tif (is(resp, ObjectOwner)) {\n\t\treturn resp;\n\t}\n\treturn getSuiObjectData(resp)?.owner;\n}\n\nexport function getObjectDisplay(resp: SuiObjectResponse): DisplayFieldsResponse {\n\tconst display = getSuiObjectData(resp)?.display;\n\tif (!display) {\n\t\treturn { data: null, error: null };\n\t}\n\tif (is(display, DisplayFieldsResponse)) {\n\t\treturn display;\n\t}\n\treturn {\n\t\tdata: display,\n\t\terror: null,\n\t};\n}\n\nexport function getSharedObjectInitialVersion(\n\tresp: SuiObjectResponse | ObjectOwner,\n): string | null | undefined {\n\tconst owner = getObjectOwner(resp);\n\tif (owner && typeof owner === 'object' && 'Shared' in owner) {\n\t\treturn owner.Shared.initial_shared_version;\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\nexport function isSharedObject(resp: SuiObjectResponse | ObjectOwner): boolean {\n\tconst owner = getObjectOwner(resp);\n\treturn !!owner && typeof owner === 'object' && 'Shared' in owner;\n}\n\nexport function isImmutableObject(resp: SuiObjectResponse | ObjectOwner): boolean {\n\tconst owner = getObjectOwner(resp);\n\treturn owner === 'Immutable';\n}\n\nexport function getMoveObjectType(resp: SuiObjectResponse): string | undefined {\n\treturn getMoveObject(resp)?.type;\n}\n\nexport function getObjectFields(\n\tresp: SuiObjectResponse | SuiMoveObject | SuiObjectData,\n): ObjectContentFields | undefined {\n\tif ('fields' in resp) {\n\t\treturn resp.fields;\n\t}\n\treturn getMoveObject(resp)?.fields;\n}\n\nexport interface SuiObjectDataWithContent extends SuiObjectData {\n\tcontent: SuiParsedData;\n}\n\nfunction isSuiObjectDataWithContent(data: SuiObjectData): data is SuiObjectDataWithContent {\n\treturn data.content !== undefined;\n}\n\nexport function getMoveObject(data: SuiObjectResponse | SuiObjectData): SuiMoveObject | undefined {\n\tconst suiObject = 'data' in data ? getSuiObjectData(data) : (data as SuiObjectData);\n\n\tif (\n\t\t!suiObject ||\n\t\t!isSuiObjectDataWithContent(suiObject) ||\n\t\tsuiObject.content.dataType !== 'moveObject'\n\t) {\n\t\treturn undefined;\n\t}\n\n\treturn suiObject.content as SuiMoveObject;\n}\n\nexport function hasPublicTransfer(data: SuiObjectResponse | SuiObjectData): boolean {\n\treturn getMoveObject(data)?.hasPublicTransfer ?? false;\n}\n\nexport function getMovePackageContent(\n\tdata: SuiObjectResponse | SuiMovePackage,\n): MovePackageContent | undefined {\n\tif ('disassembled' in data) {\n\t\treturn data.disassembled;\n\t}\n\tconst suiObject = getSuiObjectData(data);\n\tif (suiObject?.content?.dataType !== 'package') {\n\t\treturn undefined;\n\t}\n\treturn (suiObject.content as SuiMovePackage).disassembled;\n}\n\nexport const CheckpointedObjectId = object({\n\tobjectId: string(),\n\tatCheckpoint: optional(number()),\n});\nexport type CheckpointedObjectId = Infer<typeof CheckpointedObjectId>;\n\nexport const PaginatedObjectsResponse = object({\n\tdata: array(SuiObjectResponse),\n\tnextCursor: optional(nullable(string())),\n\thasNextPage: boolean(),\n});\nexport type PaginatedObjectsResponse = Infer<typeof PaginatedObjectsResponse>;\n\n// mirrors sui_json_rpc_types:: SuiObjectDataFilter\nexport type SuiObjectDataFilter =\n\t| { MatchAll: SuiObjectDataFilter[] }\n\t| { MatchAny: SuiObjectDataFilter[] }\n\t| { MatchNone: SuiObjectDataFilter[] }\n\t| { Package: string }\n\t| { MoveModule: { package: string; module: string } }\n\t| { StructType: string }\n\t| { AddressOwner: string }\n\t| { ObjectOwner: string }\n\t| { ObjectId: string }\n\t| { ObjectIds: string[] }\n\t| { Version: string };\n\nexport type SuiObjectResponseQuery = {\n\tfilter?: SuiObjectDataFilter;\n\toptions?: SuiObjectDataOptions;\n};\n\nexport const ObjectRead = union([\n\tobject({\n\t\tdetails: SuiObjectData,\n\t\tstatus: literal('VersionFound'),\n\t}),\n\tobject({\n\t\tdetails: string(),\n\t\tstatus: literal('ObjectNotExists'),\n\t}),\n\tobject({\n\t\tdetails: SuiObjectRef,\n\t\tstatus: literal('ObjectDeleted'),\n\t}),\n\tobject({\n\t\tdetails: tuple([string(), number()]),\n\t\tstatus: literal('VersionNotFound'),\n\t}),\n\tobject({\n\t\tdetails: object({\n\t\t\tasked_version: number(),\n\t\t\tlatest_version: number(),\n\t\t\tobject_id: string(),\n\t\t}),\n\t\tstatus: literal('VersionTooHigh'),\n\t}),\n]);\nexport type ObjectRead = Infer<typeof ObjectRead>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1095, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/utils/index.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { formatAddress, formatDigest } from './format.js';\nimport {\n\tisValidSuiAddress,\n\tisValidSuiObjectId,\n\tisValidTransactionDigest,\n\tnormalizeStructTag,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n\tparseStructTag,\n\tSUI_ADDRESS_LENGTH,\n} from './sui-types.js';\n\nexport { fromB64, toB64, fromHEX, toHEX } from '@mysten/bcs';\nexport { is, assert } from 'superstruct';\n\nexport {\n\tformatAddress,\n\tformatDigest,\n\tisValidSuiAddress,\n\tisValidSuiObjectId,\n\tisValidTransactionDigest,\n\tnormalizeStructTag,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n\tparseStructTag,\n\tSUI_ADDRESS_LENGTH,\n};\n\nexport const SUI_DECIMALS = 9;\nexport const MIST_PER_SUI = BigInt(1000000000);\n\nexport const MOVE_STDLIB_ADDRESS = '0x1';\nexport const SUI_FRAMEWORK_ADDRESS = '0x2';\nexport const SUI_SYSTEM_ADDRESS = '0x3';\nexport const SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId('0x6');\nexport const SUI_SYSTEM_MODULE_NAME = 'sui_system';\nexport const SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nexport const SUI_SYSTEM_STATE_OBJECT_ID: string = normalizeSuiObjectId('0x5');\n"],"names":[],"mappings":";;;;;;;;;;;AAIA;;;;;AA2BO,MAAM,eAAe;AACrB,MAAM,eAAe,OAAO,GAAU;AAEtC,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,qBAAqB;AAC3B,MAAM,oMAAsB,uBAAA,EAAqB,KAAK;AACtD,MAAM,yBAAyB;AAC/B,MAAM,eAAe,GAAG,OAAA,uBAAA;AACxB,MAAM,2MAAqC,uBAAA,EAAqB,KAAK","debugId":null}},
    {"offset": {"line": 1126, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/builder/Inputs.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SerializedBcs } from '@mysten/bcs';\nimport { isSerializedBcs } from '@mysten/bcs';\nimport type { Infer } from 'superstruct';\nimport { array, boolean, integer, object, string, union } from 'superstruct';\n\nimport { bcs } from '../bcs/index.js';\nimport type { SharedObjectRef } from '../bcs/index.js';\nimport { SuiObjectRef } from '../types/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\n\nconst ObjectArg = union([\n\tobject({ ImmOrOwned: SuiObjectRef }),\n\tobject({\n\t\tShared: object({\n\t\t\tobjectId: string(),\n\t\t\tinitialSharedVersion: union([integer(), string()]),\n\t\t\tmutable: boolean(),\n\t\t}),\n\t}),\n\tobject({ Receiving: SuiObjectRef }),\n]);\n\nexport const PureCallArg = object({ Pure: array(integer()) });\nexport const ObjectCallArg = object({ Object: ObjectArg });\nexport type PureCallArg = Infer<typeof PureCallArg>;\nexport type ObjectCallArg = Infer<typeof ObjectCallArg>;\n\nexport const BuilderCallArg = union([PureCallArg, ObjectCallArg]);\nexport type BuilderCallArg = Infer<typeof BuilderCallArg>;\n\nfunction Pure(data: Uint8Array | SerializedBcs<any>, type?: string): PureCallArg;\n/** @deprecated pass SerializedBcs values instead */\nfunction Pure(data: unknown, type?: string): PureCallArg;\nfunction Pure(data: unknown, type?: string): PureCallArg {\n\treturn {\n\t\tPure: Array.from(\n\t\t\tdata instanceof Uint8Array\n\t\t\t\t? data\n\t\t\t\t: isSerializedBcs(data)\n\t\t\t\t? data.toBytes()\n\t\t\t\t: // NOTE: We explicitly set this to be growable to infinity, because we have maxSize validation at the builder-level:\n\t\t\t\t  bcs.ser(type!, data, { maxSize: Infinity }).toBytes(),\n\t\t),\n\t};\n}\n\nexport const Inputs = {\n\tPure,\n\tObjectRef({ objectId, digest, version }: SuiObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tImmOrOwned: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tSharedObjectRef({ objectId, mutable, initialSharedVersion }: SharedObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tShared: {\n\t\t\t\t\tmutable,\n\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tReceivingRef({ objectId, digest, version }: SuiObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tReceiving: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n};\n\nexport function getIdFromCallArg(arg: string | ObjectCallArg) {\n\tif (typeof arg === 'string') {\n\t\treturn normalizeSuiAddress(arg);\n\t}\n\tif ('ImmOrOwned' in arg.Object) {\n\t\treturn normalizeSuiAddress(arg.Object.ImmOrOwned.objectId);\n\t}\n\n\tif ('Receiving' in arg.Object) {\n\t\treturn normalizeSuiAddress(arg.Object.Receiving.objectId);\n\t}\n\n\treturn normalizeSuiAddress(arg.Object.Shared.objectId);\n}\n\nexport function getSharedObjectInput(arg: BuilderCallArg): SharedObjectRef | undefined {\n\treturn typeof arg === 'object' && 'Object' in arg && 'Shared' in arg.Object\n\t\t? arg.Object.Shared\n\t\t: undefined;\n}\n\nexport function isSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn !!getSharedObjectInput(arg);\n}\n\nexport function isMutableSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn getSharedObjectInput(arg)?.mutable ?? false;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAIA,SAAS,uBAAuB;AAEhC,SAAS,OAAO,SAAS,SAAS,QAAQ,QAAQ,aAAa;AAE/D,SAAS,WAAW;AAEpB,SAAS,oBAAoB;AAC7B,SAAS,2BAA2B;;;;;;AAEpC,MAAM,0JAAY,QAAA,EAAM;kJACvB,SAAA,EAAO;QAAE,gLAAY,gBAAA;IAAa,CAAC;kJACnC,SAAA,EAAO;QACN,qJAAQ,UAAA,EAAO;YACd,wJAAU,SAAA,CAAO;YACjB,oKAAsB,QAAA,EAAM;8JAAC,UAAA,CAAQ;oBAAG,mJAAA,CAAO,CAAC;aAAC;YACjD,uJAAS,UAAA,CAAQ;QAClB,CAAC;IACF,CAAC;kJACD,SAAA,EAAO;QAAE,gLAAW,eAAA;IAAa,CAAC;CAClC;AAEM,MAAM,4JAAc,SAAA,EAAO;IAAE,oJAAM,QAAA,gJAAM,UAAA,CAAQ,CAAC;AAAE,CAAC;AACrD,MAAM,iBAAgB,sJAAA,EAAO;IAAE,QAAQ;AAAU,CAAC;AAIlD,MAAM,+JAAiB,QAAA,EAAM;IAAC;IAAa,aAAa;CAAC;AAMhE,SAAS,KAAK,IAAA,EAAe,IAAA,EAA4B;IACxD,OAAO;QACN,MAAM,MAAM,IAAA,CACX,gBAAgB,aACb,qKACA,kBAAA,EAAgB,IAAI,IACpB,KAAK,OAAA,CAAQ,IAAA,oHAAA;yLAEb,MAAA,CAAI,GAAA,CAAI,MAAO,MAAM;YAAE,SAAS;QAAS,CAAC,EAAE,OAAA,CAAQ;IAEzD;AACD;AAEO,MAAM,SAAS;IACrB;IACA,gBAAsC;cAA1B,QAAA,EAAU,MAAA,EAAQ,OAAA,CAAQ,CAAA,EAAgC,CAA5D;QACT,OAAO;YACN,QAAQ;gBACP,YAAY;oBACX;oBACA;oBACA,wLAAU,sBAAA,EAAoB,QAAQ;gBACvC;YACD;QACD;IACD;IACA,sBAA0D,EAAmC;cAA3E,QAAA,EAAU,OAAA,EAAS,oBAAA,CAAqB,CAAA,GAA1C;QACf,OAAO;YACN,QAAQ;gBACP,QAAQ;oBACP;oBACA;oBACA,UAAU,oMAAA,EAAoB,QAAQ;gBACvC;YACD;QACD;IACD;IACA,mBAAyC;cAA1B,QAAA,EAAU,MAAA,EAAQ,OAAA,CAAQ,CAAA,EAAgC,CAA5D;QACZ,OAAO;YACN,QAAQ;gBACP,WAAW;oBACV;oBACA;oBACA,wLAAU,sBAAA,EAAoB,QAAQ;gBACvC;YACD;QACD;IACD;AACD;AAEO,SAAS,iBAAiB,GAAA,EAA6B;IAC7D,IAAI,OAAO,QAAQ,UAAU;QAC5B,qLAAO,sBAAA,EAAoB,GAAG;IAC/B;IACA,IAAI,gBAAgB,IAAI,MAAA,EAAQ;QAC/B,qLAAO,sBAAA,EAAoB,IAAI,MAAA,CAAO,UAAA,CAAW,QAAQ;IAC1D;IAEA,IAAI,eAAe,IAAI,MAAA,EAAQ;QAC9B,OAAO,oMAAA,EAAoB,IAAI,MAAA,CAAO,SAAA,CAAU,QAAQ;IACzD;IAEA,QAAO,mMAAA,EAAoB,IAAI,MAAA,CAAO,MAAA,CAAO,QAAQ;AACtD;AAEO,SAAS,qBAAqB,GAAA,EAAkD;IACtF,OAAO,OAAO,QAAQ,YAAY,YAAY,OAAO,YAAY,IAAI,MAAA,GAClE,IAAI,MAAA,CAAO,MAAA,GACX,KAAA;AACJ;AAEO,SAAS,oBAAoB,GAAA,EAA8B;IACjE,OAAO,CAAC,CAAC,qBAAqB,GAAG;AAClC;AAEO,SAAS,2BAA2B,GAAA,EAA8B;;;IACxE,sFAA4B,GAAG,iFAAG,OAAA,yDAA3B,gCAAsC;AAC9C","debugId":null}},
    {"offset": {"line": 1250, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/builder/pure.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SerializedBcs } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport type { TransactionBlockInput } from './Transactions.js';\n\nexport function createPure(\n\tmakePure: (value: unknown, type?: string | undefined) => TransactionBlockInput,\n) {\n\t/**\n\t * Add a new non-object input to the transaction.\n\t */\n\tfunction pure(\n\t\t/**\n\t\t * The pure value, serialized to BCS. If this is a Uint8Array, then the value\n\t\t * is assumed to be raw bytes, and will be used directly.\n\t\t */\n\t\tvalue: SerializedBcs<any, any> | Uint8Array,\n\t): TransactionBlockInput;\n\t/**\n\t * @deprecated Pass the pure value as SerializedBcs instead.\n\t */\n\tfunction pure(\n\t\t/**\n\t\t * The pure value that will be used as the input value. If this is a Uint8Array, then the value\n\t\t * is assumed to be raw bytes, and will be used directly.\n\t\t */\n\t\tvalue: unknown,\n\t\t/**\n\t\t * The BCS type to serialize the value into. If not provided, the type will automatically be determined\n\t\t * based on how the input is used.\n\t\t */\n\t\ttype?: string,\n\t): TransactionBlockInput;\n\n\tfunction pure(value: unknown, type?: string): TransactionBlockInput {\n\t\treturn makePure(value, type);\n\t}\n\n\tpure.u8 = (value: number) => makePure(bcs.U8.serialize(value));\n\tpure.u16 = (value: number) => makePure(bcs.U16.serialize(value));\n\tpure.u32 = (value: number) => makePure(bcs.U32.serialize(value));\n\tpure.u64 = (value: bigint | number | string) => makePure(bcs.U64.serialize(value));\n\tpure.u128 = (value: bigint | number | string) => makePure(bcs.U128.serialize(value));\n\tpure.u256 = (value: bigint | number | string) => makePure(bcs.U256.serialize(value));\n\tpure.bool = (value: boolean) => makePure(bcs.Bool.serialize(value));\n\tpure.string = (value: string) => makePure(bcs.String.serialize(value));\n\tpure.address = (value: string) => makePure(bcs.Address.serialize(value));\n\tpure.id = pure.address;\n\n\treturn pure;\n}\n"],"names":[],"mappings":";;;AAKA,SAAS,WAAW;;AAGb,SAAS,WACf,QAAA,EACC;IA2BD,SAAS,KAAK,KAAA,EAAgB,IAAA,EAAsC;QACnE,OAAO,SAAS,OAAO,IAAI;IAC5B;IAEA,KAAK,EAAA,GAAK,CAAC,QAAkB,0LAAS,MAAA,CAAI,EAAA,CAAG,SAAA,CAAU,KAAK,CAAC;IAC7D,KAAK,GAAA,GAAM,CAAC,QAAkB,0LAAS,MAAA,CAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAC;IAC/D,KAAK,GAAA,GAAM,CAAC,QAAkB,0LAAS,MAAA,CAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAC;IAC/D,KAAK,GAAA,GAAM,CAAC,QAAoC,0LAAS,MAAA,CAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAC;IACjF,KAAK,IAAA,GAAO,CAAC,QAAoC,0LAAS,MAAA,CAAI,IAAA,CAAK,SAAA,CAAU,KAAK,CAAC;IACnF,KAAK,IAAA,GAAO,CAAC,QAAoC,0LAAS,MAAA,CAAI,IAAA,CAAK,SAAA,CAAU,KAAK,CAAC;IACnF,KAAK,IAAA,GAAO,CAAC,QAAmB,0LAAS,MAAA,CAAI,IAAA,CAAK,SAAA,CAAU,KAAK,CAAC;IAClE,KAAK,MAAA,GAAS,CAAC,QAAkB,0LAAS,MAAA,CAAI,MAAA,CAAO,SAAA,CAAU,KAAK,CAAC;IACrE,KAAK,OAAA,GAAU,CAAC,QAAkB,0LAAS,MAAA,CAAI,OAAA,CAAQ,SAAA,CAAU,KAAK,CAAC;IACvE,KAAK,EAAA,GAAK,KAAK,OAAA;IAEf,OAAO;AACR","debugId":null}},
    {"offset": {"line": 1277, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/builder/serializer.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SuiJsonValue, SuiMoveNormalizedType } from '../client/index.js';\nimport { extractStructTag } from '../types/index.js';\nimport { MOVE_STDLIB_ADDRESS, SUI_FRAMEWORK_ADDRESS } from '../utils/index.js';\nimport { isValidSuiAddress } from '../utils/sui-types.js';\n\nconst OBJECT_MODULE_NAME = 'object';\nconst ID_STRUCT_NAME = 'ID';\n\nconst STD_ASCII_MODULE_NAME = 'ascii';\nconst STD_ASCII_STRUCT_NAME = 'String';\n\nconst STD_UTF8_MODULE_NAME = 'string';\nconst STD_UTF8_STRUCT_NAME = 'String';\n\nconst STD_OPTION_MODULE_NAME = 'option';\nconst STD_OPTION_STRUCT_NAME = 'Option';\n\nconst RESOLVED_SUI_ID = {\n\taddress: SUI_FRAMEWORK_ADDRESS,\n\tmodule: OBJECT_MODULE_NAME,\n\tname: ID_STRUCT_NAME,\n};\nconst RESOLVED_ASCII_STR = {\n\taddress: MOVE_STDLIB_ADDRESS,\n\tmodule: STD_ASCII_MODULE_NAME,\n\tname: STD_ASCII_STRUCT_NAME,\n};\nconst RESOLVED_UTF8_STR = {\n\taddress: MOVE_STDLIB_ADDRESS,\n\tmodule: STD_UTF8_MODULE_NAME,\n\tname: STD_UTF8_STRUCT_NAME,\n};\n\nconst RESOLVED_STD_OPTION = {\n\taddress: MOVE_STDLIB_ADDRESS,\n\tmodule: STD_OPTION_MODULE_NAME,\n\tname: STD_OPTION_STRUCT_NAME,\n};\n\nconst isSameStruct = (a: any, b: any) =>\n\ta.address === b.address && a.module === b.module && a.name === b.name;\n\nexport function isTxContext(param: SuiMoveNormalizedType): boolean {\n\tconst struct = extractStructTag(param)?.Struct;\n\treturn (\n\t\tstruct?.address === '0x2' && struct?.module === 'tx_context' && struct?.name === 'TxContext'\n\t);\n}\n\nfunction expectType(typeName: string, argVal?: SuiJsonValue) {\n\tif (typeof argVal === 'undefined') {\n\t\treturn;\n\t}\n\tif (typeof argVal !== typeName) {\n\t\tthrow new Error(`Expect ${argVal} to be ${typeName}, received ${typeof argVal}`);\n\t}\n}\n\nconst allowedTypes = ['Address', 'Bool', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256'];\n\nexport function getPureSerializationType(\n\tnormalizedType: SuiMoveNormalizedType,\n\targVal: SuiJsonValue | undefined,\n): string | undefined {\n\tif (typeof normalizedType === 'string' && allowedTypes.includes(normalizedType)) {\n\t\tif (normalizedType in ['U8', 'U16', 'U32', 'U64', 'U128', 'U256']) {\n\t\t\texpectType('number', argVal);\n\t\t} else if (normalizedType === 'Bool') {\n\t\t\texpectType('boolean', argVal);\n\t\t} else if (normalizedType === 'Address') {\n\t\t\texpectType('string', argVal);\n\t\t\tif (argVal && !isValidSuiAddress(argVal as string)) {\n\t\t\t\tthrow new Error('Invalid Sui Address');\n\t\t\t}\n\t\t}\n\t\treturn normalizedType.toLowerCase();\n\t} else if (typeof normalizedType === 'string') {\n\t\tthrow new Error(`Unknown pure normalized type ${JSON.stringify(normalizedType, null, 2)}`);\n\t}\n\n\tif ('Vector' in normalizedType) {\n\t\tif ((argVal === undefined || typeof argVal === 'string') && normalizedType.Vector === 'U8') {\n\t\t\treturn 'string';\n\t\t}\n\n\t\tif (argVal !== undefined && !Array.isArray(argVal)) {\n\t\t\tthrow new Error(`Expect ${argVal} to be a array, received ${typeof argVal}`);\n\t\t}\n\n\t\tconst innerType = getPureSerializationType(\n\t\t\tnormalizedType.Vector,\n\t\t\t// undefined when argVal is empty\n\t\t\targVal ? argVal[0] : undefined,\n\t\t);\n\n\t\tif (innerType === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn `vector<${innerType}>`;\n\t}\n\n\tif ('Struct' in normalizedType) {\n\t\tif (isSameStruct(normalizedType.Struct, RESOLVED_ASCII_STR)) {\n\t\t\treturn 'string';\n\t\t} else if (isSameStruct(normalizedType.Struct, RESOLVED_UTF8_STR)) {\n\t\t\treturn 'utf8string';\n\t\t} else if (isSameStruct(normalizedType.Struct, RESOLVED_SUI_ID)) {\n\t\t\treturn 'address';\n\t\t} else if (isSameStruct(normalizedType.Struct, RESOLVED_STD_OPTION)) {\n\t\t\tconst optionToVec: SuiMoveNormalizedType = {\n\t\t\t\tVector: normalizedType.Struct.typeArguments[0],\n\t\t\t};\n\t\t\treturn getPureSerializationType(optionToVec, argVal);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1398, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/builder/hash.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\n\n/**\n * Generates a Blake2b hash of typed data as a base64 string.\n *\n * @param typeTag type tag (e.g. TransactionData, SenderSignedData)\n * @param data data to hash\n */\nexport function hashTypedData(typeTag: string, data: Uint8Array): Uint8Array {\n\tconst typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n\n\tconst dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n\tdataWithTag.set(typeTagBytes);\n\tdataWithTag.set(data, typeTagBytes.length);\n\n\treturn blake2b(dataWithTag, { dkLen: 32 });\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,eAAe;;AAQjB,SAAS,cAAc,OAAA,EAAiB,IAAA,EAA8B;IAC5E,MAAM,eAAe,MAAM,IAAA,CAAK,GAAG,OAAA,SAAA,GAAW,IAAE,GAAA,CAAI,CAAC,IAAM,EAAE,UAAA,CAAW,CAAC,CAAC;IAE1E,MAAM,cAAc,IAAI,WAAW,aAAa,MAAA,GAAS,KAAK,MAAM;IACpE,YAAY,GAAA,CAAI,YAAY;IAC5B,YAAY,GAAA,CAAI,MAAM,aAAa,MAAM;IAEzC,2JAAO,UAAA,EAAQ,aAAa;QAAE,OAAO;IAAG,CAAC;AAC1C","debugId":null}},
    {"offset": {"line": 1418, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/builder/utils.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Struct } from 'superstruct';\nimport { create as superstructCreate } from 'superstruct';\n\nexport function create<T, S>(value: T, struct: Struct<T, S>): T {\n\treturn superstructCreate(value, struct);\n}\n"],"names":[],"mappings":";;;AAIA,SAAS,UAAU,yBAAyB;;AAErC,SAAS,OAAa,KAAA,EAAU,MAAA,EAAyB;IAC/D,qJAAO,SAAA,EAAkB,OAAO,MAAM;AACvC","debugId":null}},
    {"offset": {"line": 1432, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/builder/Transactions.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport type { Infer, Struct } from 'superstruct';\nimport {\n\tany,\n\tarray,\n\tassert,\n\tdefine,\n\tinteger,\n\tis,\n\tliteral,\n\tobject,\n\toptional,\n\trecord,\n\tstring,\n\tunion,\n\tunknown,\n} from 'superstruct';\n\nimport type { TypeTag } from '../bcs/index.js';\nimport { bcs } from '../bcs/index.js';\nimport { TypeTagSerializer } from '../bcs/type-tag-serializer.js';\nimport { normalizeSuiObjectId } from '../utils/sui-types.js';\nimport { Inputs } from './Inputs.js';\nimport { create } from './utils.js';\n\nconst option = <T extends Struct<any, any>>(some: T) =>\n\tunion([object({ None: union([literal(true), literal(null)]) }), object({ Some: some })]);\n\nexport const TransactionBlockInput = union([\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: integer(),\n\t\tvalue: optional(any()),\n\t\ttype: optional(literal('object')),\n\t}),\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: integer(),\n\t\tvalue: optional(any()),\n\t\ttype: literal('pure'),\n\t}),\n]);\nexport type TransactionBlockInput = Infer<typeof TransactionBlockInput>;\n\nconst TransactionArgumentTypes = [\n\tTransactionBlockInput,\n\tobject({ kind: literal('GasCoin') }),\n\tobject({ kind: literal('Result'), index: integer() }),\n\tobject({\n\t\tkind: literal('NestedResult'),\n\t\tindex: integer(),\n\t\tresultIndex: integer(),\n\t}),\n] as const;\n\n// Generic transaction argument\nexport const TransactionArgument = union([...TransactionArgumentTypes]);\nexport type TransactionArgument = Infer<typeof TransactionArgument>;\n\nexport const MoveCallTransaction = object({\n\tkind: literal('MoveCall'),\n\ttarget: define<`${string}::${string}::${string}`>('target', string().validator),\n\ttypeArguments: array(string()),\n\targuments: array(TransactionArgument),\n});\nexport type MoveCallTransaction = Infer<typeof MoveCallTransaction>;\n\nexport const TransferObjectsTransaction = object({\n\tkind: literal('TransferObjects'),\n\tobjects: array(TransactionArgument),\n\taddress: TransactionArgument,\n});\nexport type TransferObjectsTransaction = Infer<typeof TransferObjectsTransaction>;\n\nexport const SplitCoinsTransaction = object({\n\tkind: literal('SplitCoins'),\n\tcoin: TransactionArgument,\n\tamounts: array(TransactionArgument),\n});\nexport type SplitCoinsTransaction = Infer<typeof SplitCoinsTransaction>;\n\nexport const MergeCoinsTransaction = object({\n\tkind: literal('MergeCoins'),\n\tdestination: TransactionArgument,\n\tsources: array(TransactionArgument),\n});\nexport type MergeCoinsTransaction = Infer<typeof MergeCoinsTransaction>;\n\nexport const MakeMoveVecTransaction = object({\n\tkind: literal('MakeMoveVec'),\n\t// TODO: ideally we should use `TypeTag` instead of `record()` here,\n\t// but TypeTag is recursively defined and it's tricky to define a\n\t// recursive struct in superstruct\n\ttype: optional(option(record(string(), unknown()))) as never as Struct<\n\t\t{ Some: TypeTag } | { None: true | null }\n\t>,\n\tobjects: array(TransactionArgument),\n});\nexport type MakeMoveVecTransaction = Infer<typeof MakeMoveVecTransaction>;\n\nexport const PublishTransaction = object({\n\tkind: literal('Publish'),\n\tmodules: array(array(integer())),\n\tdependencies: array(string()),\n});\nexport type PublishTransaction = Infer<typeof PublishTransaction>;\n\n// Keep in sync with constants in\n// crates/sui-framework/packages/sui-framework/sources/package.move\nexport enum UpgradePolicy {\n\tCOMPATIBLE = 0,\n\tADDITIVE = 128,\n\tDEP_ONLY = 192,\n}\n\nexport const UpgradeTransaction = object({\n\tkind: literal('Upgrade'),\n\tmodules: array(array(integer())),\n\tdependencies: array(string()),\n\tpackageId: string(),\n\tticket: TransactionArgument,\n});\nexport type UpgradeTransaction = Infer<typeof UpgradeTransaction>;\n\nconst TransactionTypes = [\n\tMoveCallTransaction,\n\tTransferObjectsTransaction,\n\tSplitCoinsTransaction,\n\tMergeCoinsTransaction,\n\tPublishTransaction,\n\tUpgradeTransaction,\n\tMakeMoveVecTransaction,\n] as const;\n\nexport const TransactionType = union([...TransactionTypes]);\nexport type TransactionType = Infer<typeof TransactionType>;\n\nexport function getTransactionType(data: unknown) {\n\tassert(data, TransactionType);\n\treturn TransactionTypes.find((schema) => is(data, schema as Struct))!;\n}\n\n/**\n * Simple helpers used to construct transactions:\n */\nexport const Transactions = {\n\tMoveCall(\n\t\tinput: Omit<MoveCallTransaction, 'kind' | 'arguments' | 'typeArguments'> & {\n\t\t\targuments?: TransactionArgument[];\n\t\t\ttypeArguments?: string[];\n\t\t},\n\t): MoveCallTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'MoveCall',\n\t\t\t\ttarget: input.target,\n\t\t\t\targuments: input.arguments ?? [],\n\t\t\t\ttypeArguments: input.typeArguments ?? [],\n\t\t\t},\n\t\t\tMoveCallTransaction,\n\t\t);\n\t},\n\tTransferObjects(\n\t\tobjects: TransactionArgument[],\n\t\taddress: TransactionArgument,\n\t): TransferObjectsTransaction {\n\t\tif (address.kind === 'Input' && address.type === 'pure' && typeof address.value !== 'object') {\n\t\t\taddress.value = Inputs.Pure(bcs.Address.serialize(address.value));\n\t\t}\n\n\t\treturn create({ kind: 'TransferObjects', objects, address }, TransferObjectsTransaction);\n\t},\n\tSplitCoins(coin: TransactionArgument, amounts: TransactionArgument[]): SplitCoinsTransaction {\n\t\t// Handle deprecated usage of `Input.Pure(100)`\n\t\tamounts.forEach((input) => {\n\t\t\tif (input.kind === 'Input' && input.type === 'pure' && typeof input.value !== 'object') {\n\t\t\t\tinput.value = Inputs.Pure(bcs.U64.serialize(input.value));\n\t\t\t}\n\t\t});\n\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'SplitCoins',\n\t\t\t\tcoin,\n\t\t\t\tamounts,\n\t\t\t},\n\t\t\tSplitCoinsTransaction,\n\t\t);\n\t},\n\tMergeCoins(\n\t\tdestination: TransactionArgument,\n\t\tsources: TransactionArgument[],\n\t): MergeCoinsTransaction {\n\t\treturn create({ kind: 'MergeCoins', destination, sources }, MergeCoinsTransaction);\n\t},\n\tPublish({\n\t\tmodules,\n\t\tdependencies,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t}): PublishTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'Publish',\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? Array.from(fromB64(module)) : module,\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t},\n\t\t\tPublishTransaction,\n\t\t);\n\t},\n\tUpgrade({\n\t\tmodules,\n\t\tdependencies,\n\t\tpackageId,\n\t\tticket,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t\tpackageId: string;\n\t\tticket: TransactionArgument;\n\t}): UpgradeTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'Upgrade',\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? Array.from(fromB64(module)) : module,\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t\tpackageId,\n\t\t\t\tticket,\n\t\t\t},\n\t\t\tUpgradeTransaction,\n\t\t);\n\t},\n\tMakeMoveVec({\n\t\ttype,\n\t\tobjects,\n\t}: Omit<MakeMoveVecTransaction, 'kind' | 'type'> & {\n\t\ttype?: string;\n\t}): MakeMoveVecTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'MakeMoveVec',\n\t\t\t\ttype: type ? { Some: TypeTagSerializer.parseFromStr(type) } : { None: null },\n\t\t\t\tobjects,\n\t\t\t},\n\t\t\tMakeMoveVecTransaction,\n\t\t);\n\t},\n};\n"],"names":["UpgradePolicy"],"mappings":"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","debugId":null}},
    {"offset": {"line": 1643, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/builder/TransactionBlockData.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toB58 } from '@mysten/bcs';\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tassert,\n\tdefine,\n\tinteger,\n\tis,\n\tliteral,\n\tnullable,\n\tobject,\n\toptional,\n\tstring,\n\tunion,\n} from 'superstruct';\n\nimport { bcs } from '../bcs/index.js';\nimport { SuiObjectRef } from '../types/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport { hashTypedData } from './hash.js';\nimport { BuilderCallArg, PureCallArg } from './Inputs.js';\nimport { TransactionBlockInput, TransactionType } from './Transactions.js';\nimport { create } from './utils.js';\n\nexport const TransactionExpiration = optional(\n\tnullable(\n\t\tunion([object({ Epoch: integer() }), object({ None: union([literal(true), literal(null)]) })]),\n\t),\n);\nexport type TransactionExpiration = Infer<typeof TransactionExpiration>;\n\nconst StringEncodedBigint = define<string | number | bigint>('StringEncodedBigint', (val) => {\n\tif (!['string', 'number', 'bigint'].includes(typeof val)) return false;\n\n\ttry {\n\t\tBigInt(val as string);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n});\n\nconst GasConfig = object({\n\tbudget: optional(StringEncodedBigint),\n\tprice: optional(StringEncodedBigint),\n\tpayment: optional(array(SuiObjectRef)),\n\towner: optional(string()),\n});\ntype GasConfig = Infer<typeof GasConfig>;\n\nexport const SerializedTransactionDataBuilder = object({\n\tversion: literal(1),\n\tsender: optional(string()),\n\texpiration: TransactionExpiration,\n\tgasConfig: GasConfig,\n\tinputs: array(TransactionBlockInput),\n\ttransactions: array(TransactionType),\n});\nexport type SerializedTransactionDataBuilder = Infer<typeof SerializedTransactionDataBuilder>;\n\nfunction prepareSuiAddress(address: string) {\n\treturn normalizeSuiAddress(address).replace('0x', '');\n}\n\nexport class TransactionBlockDataBuilder {\n\tstatic fromKindBytes(bytes: Uint8Array) {\n\t\tconst kind = bcs.TransactionKind.parse(bytes);\n\t\tconst programmableTx = 'ProgrammableTransaction' in kind ? kind.ProgrammableTransaction : null;\n\t\tif (!programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\tconst serialized = create(\n\t\t\t{\n\t\t\t\tversion: 1,\n\t\t\t\tgasConfig: {},\n\t\t\t\tinputs: programmableTx.inputs.map((value: unknown, index: number) =>\n\t\t\t\t\tcreate(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: 'Input',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\ttype: is(value, PureCallArg) ? 'pure' : 'object',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTransactionBlockInput,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\ttransactions: programmableTx.transactions,\n\t\t\t},\n\t\t\tSerializedTransactionDataBuilder,\n\t\t);\n\n\t\treturn TransactionBlockDataBuilder.restore(serialized);\n\t}\n\n\tstatic fromBytes(bytes: Uint8Array) {\n\t\tconst rawData = bcs.TransactionData.parse(bytes);\n\t\tconst data = rawData?.V1;\n\t\tconst programmableTx =\n\t\t\t'ProgrammableTransaction' in data.kind ? data?.kind?.ProgrammableTransaction : null;\n\t\tif (!data || !programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\tconst serialized = create(\n\t\t\t{\n\t\t\t\tversion: 1,\n\t\t\t\tsender: data.sender,\n\t\t\t\texpiration: data.expiration,\n\t\t\t\tgasConfig: data.gasData,\n\t\t\t\tinputs: programmableTx.inputs.map((value: unknown, index: number) =>\n\t\t\t\t\tcreate(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: 'Input',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\ttype: is(value, PureCallArg) ? 'pure' : 'object',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTransactionBlockInput,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\ttransactions: programmableTx.transactions,\n\t\t\t},\n\t\t\tSerializedTransactionDataBuilder,\n\t\t);\n\n\t\treturn TransactionBlockDataBuilder.restore(serialized);\n\t}\n\n\tstatic restore(data: SerializedTransactionDataBuilder) {\n\t\tassert(data, SerializedTransactionDataBuilder);\n\t\tconst transactionData = new TransactionBlockDataBuilder();\n\t\tObject.assign(transactionData, data);\n\t\treturn transactionData;\n\t}\n\n\t/**\n\t * Generate transaction digest.\n\t *\n\t * @param bytes BCS serialized transaction data\n\t * @returns transaction digest.\n\t */\n\tstatic getDigestFromBytes(bytes: Uint8Array) {\n\t\tconst hash = hashTypedData('TransactionData', bytes);\n\t\treturn toB58(hash);\n\t}\n\n\tversion = 1 as const;\n\tsender?: string;\n\texpiration?: TransactionExpiration;\n\tgasConfig: GasConfig;\n\tinputs: TransactionBlockInput[];\n\ttransactions: TransactionType[];\n\n\tconstructor(clone?: SerializedTransactionDataBuilder) {\n\t\tthis.sender = clone?.sender;\n\t\tthis.expiration = clone?.expiration;\n\t\tthis.gasConfig = clone?.gasConfig ?? {};\n\t\tthis.inputs = clone?.inputs ?? [];\n\t\tthis.transactions = clone?.transactions ?? [];\n\t}\n\n\tbuild({\n\t\tmaxSizeBytes = Infinity,\n\t\toverrides,\n\t\tonlyTransactionKind,\n\t}: {\n\t\tmaxSizeBytes?: number;\n\t\toverrides?: Pick<Partial<TransactionBlockDataBuilder>, 'sender' | 'gasConfig' | 'expiration'>;\n\t\tonlyTransactionKind?: boolean;\n\t} = {}) {\n\t\t// Resolve inputs down to values:\n\t\tconst inputs = this.inputs.map((input) => {\n\t\t\tassert(input.value, BuilderCallArg);\n\t\t\treturn input.value;\n\t\t});\n\n\t\tconst kind = {\n\t\t\tProgrammableTransaction: {\n\t\t\t\tinputs,\n\t\t\t\ttransactions: this.transactions,\n\t\t\t},\n\t\t};\n\n\t\tif (onlyTransactionKind) {\n\t\t\treturn bcs.TransactionKind.serialize(kind, { maxSize: maxSizeBytes }).toBytes();\n\t\t}\n\n\t\tconst expiration = overrides?.expiration ?? this.expiration;\n\t\tconst sender = overrides?.sender ?? this.sender;\n\t\tconst gasConfig = { ...this.gasConfig, ...overrides?.gasConfig };\n\n\t\tif (!sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tif (!gasConfig.budget) {\n\t\t\tthrow new Error('Missing gas budget');\n\t\t}\n\n\t\tif (!gasConfig.payment) {\n\t\t\tthrow new Error('Missing gas payment');\n\t\t}\n\n\t\tif (!gasConfig.price) {\n\t\t\tthrow new Error('Missing gas price');\n\t\t}\n\n\t\tconst transactionData = {\n\t\t\tsender: prepareSuiAddress(sender),\n\t\t\texpiration: expiration ? expiration : { None: true },\n\t\t\tgasData: {\n\t\t\t\tpayment: gasConfig.payment,\n\t\t\t\towner: prepareSuiAddress(this.gasConfig.owner ?? sender),\n\t\t\t\tprice: BigInt(gasConfig.price),\n\t\t\t\tbudget: BigInt(gasConfig.budget),\n\t\t\t},\n\t\t\tkind: {\n\t\t\t\tProgrammableTransaction: {\n\t\t\t\t\tinputs,\n\t\t\t\t\ttransactions: this.transactions,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn bcs.TransactionData.serialize(\n\t\t\t{ V1: transactionData },\n\t\t\t{ maxSize: maxSizeBytes },\n\t\t).toBytes();\n\t}\n\n\tgetDigest() {\n\t\tconst bytes = this.build({ onlyTransactionKind: false });\n\t\treturn TransactionBlockDataBuilder.getDigestFromBytes(bytes);\n\t}\n\n\tsnapshot(): SerializedTransactionDataBuilder {\n\t\treturn create(this, SerializedTransactionDataBuilder);\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1854, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/builder/TransactionBlock.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SerializedBcs } from '@mysten/bcs';\nimport { fromB64, isSerializedBcs } from '@mysten/bcs';\nimport { is, mask } from 'superstruct';\n\nimport { bcs } from '../bcs/index.js';\nimport type { ProtocolConfig, SuiClient, SuiMoveNormalizedType } from '../client/index.js';\nimport type { Keypair, SignatureWithBytes } from '../cryptography/index.js';\nimport type { SuiObjectResponse } from '../types/index.js';\nimport {\n\textractMutableReference,\n\textractReference,\n\textractStructTag,\n\tgetObjectReference,\n\tSuiObjectRef,\n} from '../types/index.js';\nimport { SUI_TYPE_ARG } from '../utils/index.js';\nimport { normalizeSuiAddress, normalizeSuiObjectId } from '../utils/sui-types.js';\nimport type { ObjectCallArg } from './Inputs.js';\nimport {\n\tBuilderCallArg,\n\tgetIdFromCallArg,\n\tInputs,\n\tisMutableSharedObjectInput,\n\tPureCallArg,\n} from './Inputs.js';\nimport { createPure } from './pure.js';\nimport { getPureSerializationType, isTxContext } from './serializer.js';\nimport type { TransactionExpiration } from './TransactionBlockData.js';\nimport { TransactionBlockDataBuilder } from './TransactionBlockData.js';\nimport type { MoveCallTransaction, TransactionArgument, TransactionType } from './Transactions.js';\nimport { TransactionBlockInput, Transactions } from './Transactions.js';\nimport { create } from './utils.js';\n\nexport type TransactionObjectArgument = Exclude<\n\tTransactionArgument,\n\t{ kind: 'Input'; type: 'pure' }\n>;\n\nexport type TransactionResult = Extract<TransactionArgument, { kind: 'Result' }> &\n\tExtract<TransactionArgument, { kind: 'NestedResult' }>[];\n\nconst DefaultOfflineLimits = {\n\tmaxPureArgumentSize: 16 * 1024,\n\tmaxTxGas: 50_000_000_000,\n\tmaxGasObjects: 256,\n\tmaxTxSizeBytes: 128 * 1024,\n} satisfies Limits;\n\nfunction createTransactionResult(index: number): TransactionResult {\n\tconst baseResult: TransactionArgument = { kind: 'Result', index };\n\n\tconst nestedResults: TransactionArgument[] = [];\n\tconst nestedResultFor = (resultIndex: number): TransactionArgument =>\n\t\t(nestedResults[resultIndex] ??= {\n\t\t\tkind: 'NestedResult',\n\t\t\tindex,\n\t\t\tresultIndex,\n\t\t});\n\n\treturn new Proxy(baseResult, {\n\t\tset() {\n\t\t\tthrow new Error(\n\t\t\t\t'The transaction result is a proxy, and does not support setting properties directly',\n\t\t\t);\n\t\t},\n\t\t// TODO: Instead of making this return a concrete argument, we should ideally\n\t\t// make it reference-based (so that this gets resolved at build-time), which\n\t\t// allows re-ordering transactions.\n\t\tget(target, property) {\n\t\t\t// This allows this transaction argument to be used in the singular form:\n\t\t\tif (property in target) {\n\t\t\t\treturn Reflect.get(target, property);\n\t\t\t}\n\n\t\t\t// Support destructuring:\n\t\t\tif (property === Symbol.iterator) {\n\t\t\t\treturn function* () {\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tyield nestedResultFor(i);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (typeof property === 'symbol') return;\n\n\t\t\tconst resultIndex = parseInt(property, 10);\n\t\t\tif (Number.isNaN(resultIndex) || resultIndex < 0) return;\n\t\t\treturn nestedResultFor(resultIndex);\n\t\t},\n\t}) as TransactionResult;\n}\n\nfunction isReceivingType(normalizedType: SuiMoveNormalizedType): boolean {\n\tconst tag = extractStructTag(normalizedType);\n\tif (tag) {\n\t\treturn (\n\t\t\ttag.Struct.address === '0x2' &&\n\t\t\ttag.Struct.module === 'transfer' &&\n\t\t\ttag.Struct.name === 'Receiving'\n\t\t);\n\t}\n\treturn false;\n}\n\nfunction expectClient(options: BuildOptions): SuiClient {\n\tif (!options.client) {\n\t\tthrow new Error(\n\t\t\t`No provider passed to Transaction#build, but transaction data was not sufficient to build offline.`,\n\t\t);\n\t}\n\n\treturn options.client;\n}\n\nconst TRANSACTION_BRAND = Symbol.for('@mysten/transaction');\n\nconst LIMITS = {\n\t// The maximum gas that is allowed.\n\tmaxTxGas: 'max_tx_gas',\n\t// The maximum number of gas objects that can be selected for one transaction.\n\tmaxGasObjects: 'max_gas_payment_objects',\n\t// The maximum size (in bytes) that the transaction can be:\n\tmaxTxSizeBytes: 'max_tx_size_bytes',\n\t// The maximum size (in bytes) that pure arguments can be:\n\tmaxPureArgumentSize: 'max_pure_argument_size',\n} as const;\n\ntype Limits = Partial<Record<keyof typeof LIMITS, number>>;\n\n// An amount of gas (in gas units) that is added to transactions as an overhead to ensure transactions do not fail.\nconst GAS_SAFE_OVERHEAD = 1000n;\n\n// The maximum objects that can be fetched at once using multiGetObjects.\nconst MAX_OBJECTS_PER_FETCH = 50;\n\nconst chunk = <T>(arr: T[], size: number): T[][] =>\n\tArray.from({ length: Math.ceil(arr.length / size) }, (_, i) =>\n\t\tarr.slice(i * size, i * size + size),\n\t);\n\ninterface BuildOptions {\n\tclient?: SuiClient;\n\tonlyTransactionKind?: boolean;\n\t/** Define a protocol config to build against, instead of having it fetched from the provider at build time. */\n\tprotocolConfig?: ProtocolConfig;\n\t/** Define limits that are used when building the transaction. In general, we recommend using the protocol configuration instead of defining limits. */\n\tlimits?: Limits;\n}\n\ninterface SignOptions extends BuildOptions {\n\tsigner: Keypair;\n}\n\nexport function isTransactionBlock(obj: unknown): obj is TransactionBlock {\n\treturn !!obj && typeof obj === 'object' && (obj as any)[TRANSACTION_BRAND] === true;\n}\n\nexport type TransactionObjectInput = string | ObjectCallArg | TransactionObjectArgument;\n\n/**\n * Transaction Builder\n */\nexport class TransactionBlock {\n\t/**\n\t * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.\n\t * Supports either a byte array, or base64-encoded bytes.\n\t */\n\tstatic fromKind(serialized: string | Uint8Array) {\n\t\tconst tx = new TransactionBlock();\n\n\t\ttx.#blockData = TransactionBlockDataBuilder.fromKindBytes(\n\t\t\ttypeof serialized === 'string' ? fromB64(serialized) : serialized,\n\t\t);\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Converts from a serialized transaction format to a `Transaction` class.\n\t * There are two supported serialized formats:\n\t * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.\n\t * - A byte array (or base64-encoded bytes) containing BCS transaction data.\n\t */\n\tstatic from(serialized: string | Uint8Array) {\n\t\tconst tx = new TransactionBlock();\n\n\t\t// Check for bytes:\n\t\tif (typeof serialized !== 'string' || !serialized.startsWith('{')) {\n\t\t\ttx.#blockData = TransactionBlockDataBuilder.fromBytes(\n\t\t\t\ttypeof serialized === 'string' ? fromB64(serialized) : serialized,\n\t\t\t);\n\t\t} else {\n\t\t\ttx.#blockData = TransactionBlockDataBuilder.restore(JSON.parse(serialized));\n\t\t}\n\n\t\treturn tx;\n\t}\n\n\tsetSender(sender: string) {\n\t\tthis.#blockData.sender = sender;\n\t}\n\t/**\n\t * Sets the sender only if it has not already been set.\n\t * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.\n\t */\n\tsetSenderIfNotSet(sender: string) {\n\t\tif (!this.#blockData.sender) {\n\t\t\tthis.#blockData.sender = sender;\n\t\t}\n\t}\n\tsetExpiration(expiration?: TransactionExpiration) {\n\t\tthis.#blockData.expiration = expiration;\n\t}\n\tsetGasPrice(price: number | bigint) {\n\t\tthis.#blockData.gasConfig.price = String(price);\n\t}\n\tsetGasBudget(budget: number | bigint) {\n\t\tthis.#blockData.gasConfig.budget = String(budget);\n\t}\n\tsetGasOwner(owner: string) {\n\t\tthis.#blockData.gasConfig.owner = owner;\n\t}\n\tsetGasPayment(payments: SuiObjectRef[]) {\n\t\tthis.#blockData.gasConfig.payment = payments.map((payment) => mask(payment, SuiObjectRef));\n\t}\n\n\t#blockData: TransactionBlockDataBuilder;\n\t/** Get a snapshot of the transaction data, in JSON form: */\n\tget blockData() {\n\t\treturn this.#blockData.snapshot();\n\t}\n\n\t// Used to brand transaction classes so that they can be identified, even between multiple copies\n\t// of the builder.\n\tget [TRANSACTION_BRAND]() {\n\t\treturn true;\n\t}\n\n\t// Temporary workaround for the wallet interface accidentally serializing transaction blocks via postMessage\n\tget pure(): ReturnType<typeof createPure> {\n\t\tObject.defineProperty(this, 'pure', {\n\t\t\tenumerable: false,\n\t\t\tvalue: createPure((value, type) => {\n\t\t\t\tif (isSerializedBcs(value)) {\n\t\t\t\t\treturn this.#input('pure', {\n\t\t\t\t\t\tPure: Array.from(value.toBytes()),\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// TODO: we can also do some deduplication here\n\t\t\t\treturn this.#input(\n\t\t\t\t\t'pure',\n\t\t\t\t\tvalue instanceof Uint8Array\n\t\t\t\t\t\t? Inputs.Pure(value)\n\t\t\t\t\t\t: type\n\t\t\t\t\t\t? Inputs.Pure(value, type)\n\t\t\t\t\t\t: value,\n\t\t\t\t);\n\t\t\t}),\n\t\t});\n\n\t\treturn this.pure;\n\t}\n\n\tconstructor(transaction?: TransactionBlock) {\n\t\tthis.#blockData = new TransactionBlockDataBuilder(\n\t\t\ttransaction ? transaction.blockData : undefined,\n\t\t);\n\t}\n\n\t/** Returns an argument for the gas coin, to be used in a transaction. */\n\tget gas(): TransactionObjectArgument {\n\t\treturn { kind: 'GasCoin' };\n\t}\n\n\t/**\n\t * Dynamically create a new input, which is separate from the `input`. This is important\n\t * for generated clients to be able to define unique inputs that are non-overlapping with the\n\t * defined inputs.\n\t *\n\t * For `Uint8Array` type automatically convert the input into a `Pure` CallArg, since this\n\t * is the format required for custom serialization.\n\t *\n\t */\n\t#input<T extends 'object' | 'pure'>(type: T, value?: unknown) {\n\t\tconst index = this.#blockData.inputs.length;\n\t\tconst input = create(\n\t\t\t{\n\t\t\t\tkind: 'Input',\n\t\t\t\t// bigints can't be serialized to JSON, so just string-convert them here:\n\t\t\t\tvalue: typeof value === 'bigint' ? String(value) : value,\n\t\t\t\tindex,\n\t\t\t\ttype,\n\t\t\t},\n\t\t\tTransactionBlockInput,\n\t\t);\n\t\tthis.#blockData.inputs.push(input);\n\t\treturn input as Extract<typeof input, { type: T }>;\n\t}\n\n\t/**\n\t * Add a new object input to the transaction.\n\t */\n\tobject(value: TransactionObjectInput) {\n\t\tif (typeof value === 'object' && 'kind' in value) {\n\t\t\treturn value;\n\t\t}\n\n\t\tconst id = getIdFromCallArg(value);\n\t\t// deduplicate\n\t\tconst inserted = this.#blockData.inputs.find(\n\t\t\t(i) => i.type === 'object' && id === getIdFromCallArg(i.value),\n\t\t) as Extract<TransactionArgument, { type?: 'object' }> | undefined;\n\t\treturn (\n\t\t\tinserted ??\n\t\t\tthis.#input('object', typeof value === 'string' ? normalizeSuiAddress(value) : value)\n\t\t);\n\t}\n\n\t/**\n\t * Add a new object input to the transaction using the fully-resolved object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tobjectRef(...args: Parameters<(typeof Inputs)['ObjectRef']>) {\n\t\treturn this.object(Inputs.ObjectRef(...args));\n\t}\n\n\t/**\n\t * Add a new receiving input to the transaction using the fully-resolved object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\treceivingRef(...args: Parameters<(typeof Inputs)['ReceivingRef']>) {\n\t\treturn this.object(Inputs.ReceivingRef(...args));\n\t}\n\n\t/**\n\t * Add a new shared object input to the transaction using the fully-resolved shared object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tsharedObjectRef(...args: Parameters<(typeof Inputs)['SharedObjectRef']>) {\n\t\treturn this.object(Inputs.SharedObjectRef(...args));\n\t}\n\n\t/** Add a transaction to the transaction block. */\n\tadd(transaction: TransactionType) {\n\t\tconst index = this.#blockData.transactions.push(transaction);\n\t\treturn createTransactionResult(index - 1);\n\t}\n\n\t#normalizeTransactionArgument(\n\t\targ: TransactionArgument | SerializedBcs<any>,\n\t): TransactionArgument {\n\t\tif (isSerializedBcs(arg)) {\n\t\t\treturn this.pure(arg);\n\t\t}\n\n\t\treturn arg as TransactionArgument;\n\t}\n\n\t// Method shorthands:\n\n\tsplitCoins(\n\t\tcoin: TransactionObjectArgument | string,\n\t\tamounts: (TransactionArgument | SerializedBcs<any> | number | string | bigint)[],\n\t) {\n\t\treturn this.add(\n\t\t\tTransactions.SplitCoins(\n\t\t\t\ttypeof coin === 'string' ? this.object(coin) : coin,\n\t\t\t\tamounts.map((amount) =>\n\t\t\t\t\ttypeof amount === 'number' || typeof amount === 'bigint' || typeof amount === 'string'\n\t\t\t\t\t\t? this.pure.u64(amount)\n\t\t\t\t\t\t: this.#normalizeTransactionArgument(amount),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n\tmergeCoins(\n\t\tdestination: TransactionObjectArgument | string,\n\t\tsources: (TransactionObjectArgument | string)[],\n\t) {\n\t\treturn this.add(\n\t\t\tTransactions.MergeCoins(\n\t\t\t\ttypeof destination === 'string' ? this.object(destination) : destination,\n\t\t\t\tsources.map((src) => (typeof src === 'string' ? this.object(src) : src)),\n\t\t\t),\n\t\t);\n\t}\n\tpublish({ modules, dependencies }: { modules: number[][] | string[]; dependencies: string[] }) {\n\t\treturn this.add(\n\t\t\tTransactions.Publish({\n\t\t\t\tmodules,\n\t\t\t\tdependencies,\n\t\t\t}),\n\t\t);\n\t}\n\tupgrade({\n\t\tmodules,\n\t\tdependencies,\n\t\tpackageId,\n\t\tticket,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t\tpackageId: string;\n\t\tticket: TransactionObjectArgument | string;\n\t}) {\n\t\treturn this.add(\n\t\t\tTransactions.Upgrade({\n\t\t\t\tmodules,\n\t\t\t\tdependencies,\n\t\t\t\tpackageId,\n\t\t\t\tticket: typeof ticket === 'string' ? this.object(ticket) : ticket,\n\t\t\t}),\n\t\t);\n\t}\n\tmoveCall({\n\t\targuments: args,\n\t\ttypeArguments,\n\t\ttarget,\n\t}: {\n\t\targuments?: (TransactionArgument | SerializedBcs<any>)[];\n\t\ttypeArguments?: string[];\n\t\ttarget: `${string}::${string}::${string}`;\n\t}) {\n\t\treturn this.add(\n\t\t\tTransactions.MoveCall({\n\t\t\t\targuments: args?.map((arg) => this.#normalizeTransactionArgument(arg)),\n\t\t\t\ttypeArguments,\n\t\t\t\ttarget,\n\t\t\t}),\n\t\t);\n\t}\n\ttransferObjects(\n\t\tobjects: (TransactionObjectArgument | string)[],\n\t\taddress: TransactionArgument | SerializedBcs<any> | string,\n\t) {\n\t\treturn this.add(\n\t\t\tTransactions.TransferObjects(\n\t\t\t\tobjects.map((obj) => (typeof obj === 'string' ? this.object(obj) : obj)),\n\t\t\t\ttypeof address === 'string'\n\t\t\t\t\t? this.pure.address(address)\n\t\t\t\t\t: this.#normalizeTransactionArgument(address),\n\t\t\t),\n\t\t);\n\t}\n\tmakeMoveVec({\n\t\ttype,\n\t\tobjects,\n\t}: {\n\t\tobjects: (TransactionObjectArgument | string)[];\n\t\ttype?: string;\n\t}) {\n\t\treturn this.add(\n\t\t\tTransactions.MakeMoveVec({\n\t\t\t\ttype,\n\t\t\t\tobjects: objects.map((obj) => (typeof obj === 'string' ? this.object(obj) : obj)),\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * Serialize the transaction to a string so that it can be sent to a separate context.\n\t * This is different from `build` in that it does not serialize to BCS bytes, and instead\n\t * uses a separate format that is unique to the transaction builder. This allows\n\t * us to serialize partially-complete transactions, that can then be completed and\n\t * built in a separate context.\n\t *\n\t * For example, a dapp can construct a transaction, but not provide gas objects\n\t * or a gas budget. The transaction then can be sent to the wallet, where this\n\t * information is automatically filled in (e.g. by querying for coin objects\n\t * and performing a dry run).\n\t */\n\tserialize() {\n\t\treturn JSON.stringify(this.#blockData.snapshot());\n\t}\n\n\t#getConfig(key: keyof typeof LIMITS, { protocolConfig, limits }: BuildOptions) {\n\t\t// Use the limits definition if that exists:\n\t\tif (limits && typeof limits[key] === 'number') {\n\t\t\treturn limits[key]!;\n\t\t}\n\n\t\tif (!protocolConfig) {\n\t\t\treturn DefaultOfflineLimits[key];\n\t\t}\n\n\t\t// Fallback to protocol config:\n\t\tconst attribute = protocolConfig?.attributes[LIMITS[key]];\n\t\tif (!attribute) {\n\t\t\tthrow new Error(`Missing expected protocol config: \"${LIMITS[key]}\"`);\n\t\t}\n\n\t\tconst value =\n\t\t\t'u64' in attribute ? attribute.u64 : 'u32' in attribute ? attribute.u32 : attribute.f64;\n\n\t\tif (!value) {\n\t\t\tthrow new Error(`Unexpected protocol config value found for: \"${LIMITS[key]}\"`);\n\t\t}\n\n\t\t// NOTE: Technically this is not a safe conversion, but we know all of the values in protocol config are safe\n\t\treturn Number(value);\n\t}\n\n\t/** Build the transaction to BCS bytes, and sign it with the provided keypair. */\n\tasync sign(options: SignOptions): Promise<SignatureWithBytes> {\n\t\tconst { signer, ...buildOptions } = options;\n\t\tconst bytes = await this.build(buildOptions);\n\t\treturn signer.signTransactionBlock(bytes);\n\t}\n\n\t/** Build the transaction to BCS bytes. */\n\tasync build(options: BuildOptions = {}): Promise<Uint8Array> {\n\t\tawait this.#prepare(options);\n\t\treturn this.#blockData.build({\n\t\t\tmaxSizeBytes: this.#getConfig('maxTxSizeBytes', options),\n\t\t\tonlyTransactionKind: options.onlyTransactionKind,\n\t\t});\n\t}\n\n\t/** Derive transaction digest */\n\tasync getDigest(\n\t\toptions: {\n\t\t\tclient?: SuiClient;\n\t\t} = {},\n\t): Promise<string> {\n\t\tawait this.#prepare(options);\n\t\treturn this.#blockData.getDigest();\n\t}\n\n\t#validate(options: BuildOptions) {\n\t\tconst maxPureArgumentSize = this.#getConfig('maxPureArgumentSize', options);\n\t\t// Validate all inputs are the correct size:\n\t\tthis.#blockData.inputs.forEach((input, index) => {\n\t\t\tif (is(input.value, PureCallArg)) {\n\t\t\t\tif (input.value.Pure.length > maxPureArgumentSize) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Input at index ${index} is too large, max pure input size is ${maxPureArgumentSize} bytes, got ${input.value.Pure.length} bytes`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// The current default is just picking _all_ coins we can which may not be ideal.\n\tasync #prepareGasPayment(options: BuildOptions) {\n\t\tif (this.#blockData.gasConfig.payment) {\n\t\t\tconst maxGasObjects = this.#getConfig('maxGasObjects', options);\n\t\t\tif (this.#blockData.gasConfig.payment.length > maxGasObjects) {\n\t\t\t\tthrow new Error(`Payment objects exceed maximum amount: ${maxGasObjects}`);\n\t\t\t}\n\t\t}\n\n\t\t// Early return if the payment is already set:\n\t\tif (options.onlyTransactionKind || this.#blockData.gasConfig.payment) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst gasOwner = this.#blockData.gasConfig.owner ?? this.#blockData.sender;\n\n\t\tconst coins = await expectClient(options).getCoins({\n\t\t\towner: gasOwner!,\n\t\t\tcoinType: SUI_TYPE_ARG,\n\t\t});\n\n\t\tconst paymentCoins = coins.data\n\t\t\t// Filter out coins that are also used as input:\n\t\t\t.filter((coin) => {\n\t\t\t\tconst matchingInput = this.#blockData.inputs.find((input) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tis(input.value, BuilderCallArg) &&\n\t\t\t\t\t\t'Object' in input.value &&\n\t\t\t\t\t\t'ImmOrOwned' in input.value.Object\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn coin.coinObjectId === input.value.Object.ImmOrOwned.objectId;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\treturn !matchingInput;\n\t\t\t})\n\t\t\t.slice(0, this.#getConfig('maxGasObjects', options) - 1)\n\t\t\t.map((coin) => ({\n\t\t\t\tobjectId: coin.coinObjectId,\n\t\t\t\tdigest: coin.digest,\n\t\t\t\tversion: coin.version,\n\t\t\t}));\n\n\t\tif (!paymentCoins.length) {\n\t\t\tthrow new Error('No valid gas coins found for the transaction.');\n\t\t}\n\n\t\tthis.setGasPayment(paymentCoins);\n\t}\n\n\tasync #prepareGasPrice(options: BuildOptions) {\n\t\tif (options.onlyTransactionKind || this.#blockData.gasConfig.price) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setGasPrice(await expectClient(options).getReferenceGasPrice());\n\t}\n\n\tasync #prepareTransactions(options: BuildOptions) {\n\t\tconst { inputs, transactions } = this.#blockData;\n\n\t\tconst moveModulesToResolve: MoveCallTransaction[] = [];\n\n\t\t// Keep track of the object references that will need to be resolved at the end of the transaction.\n\t\t// We keep the input by-reference to avoid needing to re-resolve it:\n\t\tconst objectsToResolve: {\n\t\t\tid: string;\n\t\t\tinput: TransactionBlockInput;\n\t\t\tnormalizedType?: SuiMoveNormalizedType;\n\t\t}[] = [];\n\n\t\tinputs.forEach((input) => {\n\t\t\tif (input.type === 'object' && typeof input.value === 'string') {\n\t\t\t\t// The input is a string that we need to resolve to an object reference:\n\t\t\t\tobjectsToResolve.push({ id: normalizeSuiAddress(input.value), input });\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\n\t\ttransactions.forEach((transaction) => {\n\t\t\t// Special case move call:\n\t\t\tif (transaction.kind === 'MoveCall') {\n\t\t\t\t// Determine if any of the arguments require encoding.\n\t\t\t\t// - If they don't, then this is good to go.\n\t\t\t\t// - If they do, then we need to fetch the normalized move module.\n\t\t\t\tconst needsResolution = transaction.arguments.some(\n\t\t\t\t\t(arg) => arg.kind === 'Input' && !is(inputs[arg.index].value, BuilderCallArg),\n\t\t\t\t);\n\n\t\t\t\tif (needsResolution) {\n\t\t\t\t\tmoveModulesToResolve.push(transaction);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Special handling for values that where previously encoded using the wellKnownEncoding pattern.\n\t\t\t// This should only happen when transaction block data was hydrated from an old version of the SDK\n\t\t\tif (transaction.kind === 'SplitCoins') {\n\t\t\t\ttransaction.amounts.forEach((amount) => {\n\t\t\t\t\tif (amount.kind === 'Input') {\n\t\t\t\t\t\tconst input = inputs[amount.index];\n\t\t\t\t\t\tif (typeof input.value !== 'object') {\n\t\t\t\t\t\t\tinput.value = Inputs.Pure(bcs.U64.serialize(input.value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (transaction.kind === 'TransferObjects') {\n\t\t\t\tif (transaction.address.kind === 'Input') {\n\t\t\t\t\tconst input = inputs[transaction.address.index];\n\t\t\t\t\tif (typeof input.value !== 'object') {\n\t\t\t\t\t\tinput.value = Inputs.Pure(bcs.Address.serialize(input.value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (moveModulesToResolve.length) {\n\t\t\tawait Promise.all(\n\t\t\t\tmoveModulesToResolve.map(async (moveCall) => {\n\t\t\t\t\tconst [packageId, moduleName, functionName] = moveCall.target.split('::');\n\n\t\t\t\t\tconst normalized = await expectClient(options).getNormalizedMoveFunction({\n\t\t\t\t\t\tpackage: normalizeSuiObjectId(packageId),\n\t\t\t\t\t\tmodule: moduleName,\n\t\t\t\t\t\tfunction: functionName,\n\t\t\t\t\t});\n\n\t\t\t\t\t// Entry functions can have a mutable reference to an instance of the TxContext\n\t\t\t\t\t// struct defined in the TxContext module as the last parameter. The caller of\n\t\t\t\t\t// the function does not need to pass it in as an argument.\n\t\t\t\t\tconst hasTxContext =\n\t\t\t\t\t\tnormalized.parameters.length > 0 && isTxContext(normalized.parameters.at(-1)!);\n\n\t\t\t\t\tconst params = hasTxContext\n\t\t\t\t\t\t? normalized.parameters.slice(0, normalized.parameters.length - 1)\n\t\t\t\t\t\t: normalized.parameters;\n\n\t\t\t\t\tif (params.length !== moveCall.arguments.length) {\n\t\t\t\t\t\tthrow new Error('Incorrect number of arguments.');\n\t\t\t\t\t}\n\n\t\t\t\t\tparams.forEach((param, i) => {\n\t\t\t\t\t\tconst arg = moveCall.arguments[i];\n\t\t\t\t\t\tif (arg.kind !== 'Input') return;\n\t\t\t\t\t\tconst input = inputs[arg.index];\n\t\t\t\t\t\t// Skip if the input is already resolved\n\t\t\t\t\t\tif (is(input.value, BuilderCallArg)) return;\n\n\t\t\t\t\t\tconst inputValue = input.value;\n\n\t\t\t\t\t\tconst serType = getPureSerializationType(param, inputValue);\n\n\t\t\t\t\t\tif (serType) {\n\t\t\t\t\t\t\tinput.value = Inputs.Pure(inputValue, serType);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst structVal = extractStructTag(param);\n\t\t\t\t\t\tif (structVal != null || (typeof param === 'object' && 'TypeParameter' in param)) {\n\t\t\t\t\t\t\tif (typeof inputValue !== 'string') {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`Expect the argument to be an object id string, got ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\tinputValue,\n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tobjectsToResolve.push({\n\t\t\t\t\t\t\t\tid: inputValue,\n\t\t\t\t\t\t\t\tinput,\n\t\t\t\t\t\t\t\tnormalizedType: param,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Unknown call arg type ${JSON.stringify(param, null, 2)} for value ${JSON.stringify(\n\t\t\t\t\t\t\t\tinputValue,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tif (objectsToResolve.length) {\n\t\t\tconst dedupedIds = [...new Set(objectsToResolve.map(({ id }) => id))];\n\t\t\tconst objectChunks = chunk(dedupedIds, MAX_OBJECTS_PER_FETCH);\n\t\t\tconst objects = (\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tobjectChunks.map((chunk) =>\n\t\t\t\t\t\texpectClient(options).multiGetObjects({\n\t\t\t\t\t\t\tids: chunk,\n\t\t\t\t\t\t\toptions: { showOwner: true },\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t).flat();\n\n\t\t\tlet objectsById = new Map(\n\t\t\t\tdedupedIds.map((id, index) => {\n\t\t\t\t\treturn [id, objects[index]];\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst invalidObjects = Array.from(objectsById)\n\t\t\t\t.filter(([_, obj]) => obj.error)\n\t\t\t\t.map(([id, _]) => id);\n\t\t\tif (invalidObjects.length) {\n\t\t\t\tthrow new Error(`The following input objects are invalid: ${invalidObjects.join(', ')}`);\n\t\t\t}\n\n\t\t\tobjectsToResolve.forEach(({ id, input, normalizedType }) => {\n\t\t\t\tconst object = objectsById.get(id)!;\n\t\t\t\tconst owner = object.data?.owner;\n\t\t\t\tconst initialSharedVersion =\n\t\t\t\t\towner && typeof owner === 'object' && 'Shared' in owner\n\t\t\t\t\t\t? owner.Shared.initial_shared_version\n\t\t\t\t\t\t: undefined;\n\n\t\t\t\tif (initialSharedVersion) {\n\t\t\t\t\t// There could be multiple transactions that reference the same shared object.\n\t\t\t\t\t// If one of them is a mutable reference or taken by value, then we should mark the input\n\t\t\t\t\t// as mutable.\n\t\t\t\t\tconst isByValue =\n\t\t\t\t\t\tnormalizedType != null &&\n\t\t\t\t\t\textractMutableReference(normalizedType) == null &&\n\t\t\t\t\t\textractReference(normalizedType) == null;\n\t\t\t\t\tconst mutable =\n\t\t\t\t\t\tisMutableSharedObjectInput(input.value) ||\n\t\t\t\t\t\tisByValue ||\n\t\t\t\t\t\t(normalizedType != null && extractMutableReference(normalizedType) != null);\n\n\t\t\t\t\tinput.value = Inputs.SharedObjectRef({\n\t\t\t\t\t\tobjectId: id,\n\t\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\t\tmutable,\n\t\t\t\t\t});\n\t\t\t\t} else if (normalizedType && isReceivingType(normalizedType)) {\n\t\t\t\t\tinput.value = Inputs.ReceivingRef(getObjectReference(object)!);\n\t\t\t\t} else {\n\t\t\t\t\tinput.value = Inputs.ObjectRef(getObjectReference(object as SuiObjectResponse)!);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Prepare the transaction by valdiating the transaction data and resolving all inputs\n\t * so that it can be built into bytes.\n\t */\n\tasync #prepare(options: BuildOptions) {\n\t\tif (!options.onlyTransactionKind && !this.#blockData.sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tif (!options.protocolConfig && !options.limits && options.client) {\n\t\t\toptions.protocolConfig = await options.client.getProtocolConfig();\n\t\t}\n\n\t\tawait Promise.all([this.#prepareGasPrice(options), this.#prepareTransactions(options)]);\n\n\t\tif (!options.onlyTransactionKind) {\n\t\t\tawait this.#prepareGasPayment(options);\n\n\t\t\tif (!this.#blockData.gasConfig.budget) {\n\t\t\t\tconst dryRunResult = await expectClient(options).dryRunTransactionBlock({\n\t\t\t\t\ttransactionBlock: this.#blockData.build({\n\t\t\t\t\t\tmaxSizeBytes: this.#getConfig('maxTxSizeBytes', options),\n\t\t\t\t\t\toverrides: {\n\t\t\t\t\t\t\tgasConfig: {\n\t\t\t\t\t\t\t\tbudget: String(this.#getConfig('maxTxGas', options)),\n\t\t\t\t\t\t\t\tpayment: [],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t});\n\t\t\t\tif (dryRunResult.effects.status.status !== 'success') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,\n\t\t\t\t\t\t{ cause: dryRunResult },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst safeOverhead = GAS_SAFE_OVERHEAD * BigInt(this.blockData.gasConfig.price || 1n);\n\n\t\t\t\tconst baseComputationCostWithOverhead =\n\t\t\t\t\tBigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;\n\n\t\t\t\tconst gasBudget =\n\t\t\t\t\tbaseComputationCostWithOverhead +\n\t\t\t\t\tBigInt(dryRunResult.effects.gasUsed.storageCost) -\n\t\t\t\t\tBigInt(dryRunResult.effects.gasUsed.storageRebate);\n\n\t\t\t\t// Set the budget to max(computation, computation + storage - rebate)\n\t\t\t\tthis.setGasBudget(\n\t\t\t\t\tgasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Perform final validation on the transaction:\n\t\tthis.#validate(options);\n\t}\n}\n"],"names":["chunk"],"mappings":";;;;;AAIA,SAAS,SAAS,uBAAuB;AACzC,SAAS,IAAI,YAAY;AAEzB,SAAS,WAAW;AAIpB;;AAOA,SAAS,oBAAoB;AAC7B,SAAS,qBAAqB,4BAA4B;AAE1D;AAOA,SAAS,kBAAkB;AAC3B,SAAS,0BAA0B,mBAAmB;AAEtD,SAAS,mCAAmC;AAE5C,SAAS,uBAAuB,oBAAoB;AACpD,SAAS,cAAc;;;;;;;;;;;;;;;;;;;;;AAlCvB,IAAA,YAAA,QAAA,UAAA,+BAAA,iCAAA,YAAA,cAAA,WAAA,aAAA,oBAAA,sBAAA,kBAAA,oBAAA,sBAAA,wBAAA,UAAA;;;;;;;;;;;;;AA4CA,MAAM,uBAAuB;IAC5B,qBAAqB,KAAK;IAC1B,UAAU;IACV,eAAe;IACf,gBAAgB,MAAM;AACvB;AAEA,SAAS,wBAAwB,KAAA,EAAkC;IAClE,MAAM,aAAkC;QAAE,MAAM;QAAU;IAAM;IAEhE,MAAM,gBAAuC,CAAC,CAAA;IAC9C,MAAM,kBAAkB,CAAC;;0DACvB,CAAA,YAAA,sDAAA,6BAAA,aAAA,CAAA,YAAA,GAA+B;YAC/B,MAAM;YACN;YACA;QACD;;IAED,OAAO,IAAI,MAAM,YAAY;QAC5B,MAAM;YACL,MAAM,IAAI,MACT;QAEF;QAAA,6EAAA;QAAA,4EAAA;QAAA,mCAAA;QAIA,KAAI,MAAA,EAAQ,QAAA,EAAU;YAErB,IAAI,YAAY,QAAQ;gBACvB,OAAO,QAAQ,GAAA,CAAI,QAAQ,QAAQ;YACpC;YAGA,IAAI,aAAa,OAAO,QAAA,EAAU;gBACjC,OAAO,aAAa;oBACnB,IAAI,IAAI;oBACR,MAAO,KAAM;wBACZ,MAAM,gBAAgB,CAAC;wBACvB;oBACD;gBACD;YACD;YAEA,IAAI,OAAO,aAAa,UAAU;YAElC,MAAM,cAAc,SAAS,UAAU,EAAE;YACzC,IAAI,OAAO,KAAA,CAAM,WAAW,KAAK,cAAc,GAAG;YAClD,OAAO,gBAAgB,WAAW;QACnC;IACD,CAAC;AACF;AAEA,SAAS,gBAAgB,cAAA,EAAgD;IACxE,MAAM,kLAAM,mBAAA,EAAiB,cAAc;IAC3C,IAAI,KAAK;QACR,OACC,IAAI,MAAA,CAAO,OAAA,KAAY,SACvB,IAAI,MAAA,CAAO,MAAA,KAAW,cACtB,IAAI,MAAA,CAAO,IAAA,KAAS;IAEtB;IACA,OAAO;AACR;AAEA,SAAS,aAAa,OAAA,EAAkC;IACvD,IAAI,CAAC,QAAQ,MAAA,EAAQ;QACpB,MAAM,IAAI,MACT;IAEF;IAEA,OAAO,QAAQ,MAAA;AAChB;AAEA,MAAM,oBAAoB,OAAO,GAAA,CAAI,qBAAqB;AAE1D,MAAM,SAAS;IAAA,mCAAA;IAEd,UAAU;IAAA,8EAAA;IAEV,eAAe;IAAA,2DAAA;IAEf,gBAAgB;IAAA,0DAAA;IAEhB,qBAAqB;AACtB;AAKA,MAAM,oBAAoB,KAAA;AAG1B,MAAM,wBAAwB;AAE9B,MAAM,QAAQ,CAAI,KAAU,OAC3B,MAAM,IAAA,CAAK;QAAE,QAAQ,KAAK,IAAA,CAAK,IAAI,MAAA,GAAS,IAAI;IAAE,GAAG,CAAC,GAAG,IACxD,IAAI,KAAA,CAAM,IAAI,MAAM,IAAI,OAAO,IAAI;AAgB9B,SAAS,mBAAmB,GAAA,EAAuC;IACzE,OAAO,CAAC,CAAC,OAAO,OAAO,QAAQ,YAAa,GAAA,CAAY,iBAAiB,CAAA,KAAM;AAChF;AAOO,MAAM,oBAAN,MAAuB;IA0G7B;;;GAAA,GArGA,OAAO,SAAS,UAAA,EAAiC;QAChD,MAAM,KAAK,IAAI,kBAAiB;QAEhC,aAAA,IAAG,gMAAa,8BAAA,CAA4B,aAAA,CAC3C,OAAO,eAAe,WAAW,gKAAA,EAAQ,UAAU,IAAI;QAGxD,OAAO;IACR;IAAA;;;;;GAAA,GAQA,OAAO,KAAK,UAAA,EAAiC;QAC5C,MAAM,KAAK,IAAI,kBAAiB;QAGhC,IAAI,OAAO,eAAe,YAAY,CAAC,WAAW,UAAA,CAAW,GAAG,GAAG;YAClE,aAAA,IAAG,+LAAa,+BAAA,CAA4B,SAAA,CAC3C,OAAO,eAAe,WAAW,gKAAA,EAAQ,UAAU,IAAI;QAEzD,OAAO;YACN,aAAA,IAAG,gMAAa,8BAAA,CAA4B,OAAA,CAAQ,KAAK,KAAA,CAAM,UAAU,CAAC;QAC3E;QAEA,OAAO;IACR;IAEA,UAAU,MAAA,EAAgB;QACzB,aAAA,IAAA,EAAK,YAAW,MAAA,GAAS;IAC1B;IAAA;;;GAAA,GAKA,kBAAkB,MAAA,EAAgB;QACjC,IAAI,CAAC,aAAA,IAAA,EAAK,YAAW,MAAA,EAAQ;YAC5B,aAAA,IAAA,EAAK,YAAW,MAAA,GAAS;QAC1B;IACD;IACA,cAAc,UAAA,EAAoC;QACjD,aAAA,IAAA,EAAK,YAAW,UAAA,GAAa;IAC9B;IACA,YAAY,KAAA,EAAwB;QACnC,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU,KAAA,GAAQ,OAAO,KAAK;IAC/C;IACA,aAAa,MAAA,EAAyB;QACrC,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU,MAAA,GAAS,OAAO,MAAM;IACjD;IACA,YAAY,KAAA,EAAe;QAC1B,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU,KAAA,GAAQ;IACnC;IACA,cAAc,QAAA,EAA0B;QACvC,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU,OAAA,GAAU,SAAS,GAAA,CAAI,CAAC,wJAAY,OAAA,EAAK,8KAAS,eAAY,CAAC;IAC1F;IAAA,0DAAA,GAIA,IAAI,YAAY;QACf,OAAO,aAAA,IAAA,EAAK,YAAW,QAAA,CAAS;IACjC;IAAA,iGAAA;IAAA,kBAAA;IAIA,IAAA,CAAK,iBAAiB,CAAA,GAAI;QACzB,OAAO;IACR;IAAA,4GAAA;IAGA,IAAI,OAAsC;QACzC,OAAO,cAAA,CAAe,IAAA,EAAM,QAAQ;YACnC,YAAY;YACZ,OAAO,qLAAA,EAAW,CAAC,OAAO,SAAS;gBAClC,kKAAI,kBAAA,EAAgB,KAAK,GAAG;oBAC3B,OAAO,gBAAA,IAAA,EAAK,QAAA,UAAL,IAAA,CAAA,IAAA,EAAY,QAAQ;wBAC1B,MAAM,MAAM,IAAA,CAAK,MAAM,OAAA,CAAQ,CAAC;oBACjC;gBACD;gBAGA,OAAO,gBAAA,IAAA,EAAK,QAAA,UAAL,IAAA,CAAA,IAAA,EACN,QACA,iBAAiB,mLACd,SAAA,CAAO,IAAA,CAAK,KAAK,IACjB,6KACA,SAAA,CAAO,IAAA,CAAK,OAAO,IAAI,IACvB;YAEL,CAAC;QACF,CAAC;QAED,OAAO,IAAA,CAAK,IAAA;IACb;IAAA,uEAAA,GASA,IAAI,MAAiC;QACpC,OAAO;YAAE,MAAM;QAAU;IAC1B;IAAA;;GAAA,GA8BA,OAAO,KAAA,EAA+B;QACrC,IAAI,OAAO,UAAU,YAAY,UAAU,OAAO;YACjD,OAAO;QACR;QAEA,MAAM,+KAAK,mBAAA,EAAiB,KAAK;QAEjC,MAAM,WAAW,aAAA,IAAA,EAAK,YAAW,MAAA,CAAO,IAAA,CACvC,CAAC,IAAM,EAAE,IAAA,KAAS,YAAY,iLAAO,mBAAA,EAAiB,EAAE,KAAK;QAE9D,kDACC,WACA,gBAAA,IAAA,EAAK,QAAA,UAAL,IAAA,CAAA,IAAA,EAAY,UAAU,OAAO,UAAU,yLAAW,sBAAA,EAAoB,KAAK,IAAI;IAEjF;IAAA;;;GAAA,GAMA,YAA6D;QAA7D,IAAA,IAAA,OAAA,UAAA,QAAA,OAAA,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;YAAa,KAAb,QAAA,SAAA,CAAA,KAAa;;QACZ,OAAO,IAAA,CAAK,MAAA,sKAAO,UAAA,CAAO,SAAA,CAAU,GAAG,IAAI,CAAC;IAC7C;IAAA;;;GAAA,GAMA,eAAmE;QAAnE,IAAA,IAAA,OAAA,UAAA,QAAA,OAAA,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;YAAgB,KAAhB,QAAA,SAAA,CAAA,KAAgB;;QACf,OAAO,IAAA,CAAK,MAAA,sKAAO,UAAA,CAAO,YAAA,CAAa,GAAG,IAAI,CAAC;IAChD;IAAA;;;GAAA,GAMA,kBAAyE;QAAzE,IAAA,IAAA,OAAA,UAAA,QAAA,AAAmB,OAAnB,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;iBAAA,QAAA,SAAA,CAAA,KAAmB;;QAClB,OAAO,IAAA,CAAK,MAAA,uKAAO,SAAA,CAAO,eAAA,CAAgB,GAAG,IAAI,CAAC;IACnD;IAAA,gDAAA,GAGA,IAAI,WAAA,EAA8B;QACjC,MAAM,QAAQ,aAAA,IAAA,EAAK,YAAW,YAAA,CAAa,IAAA,CAAK,WAAW;QAC3D,OAAO,wBAAwB,QAAQ,CAAC;IACzC;IAAA,qBAAA;IAcA,WACC,IAAA,EACA,OAAA,EACC;QACD,OAAO,IAAA,CAAK,GAAA,CACX,2LAAA,CAAa,UAAA,CACZ,OAAO,SAAS,WAAW,IAAA,CAAK,MAAA,CAAO,IAAI,IAAI,MAC/C,QAAQ,GAAA,CAAI,CAAC,SACZ,OAAO,WAAW,YAAY,OAAO,WAAW,YAAY,OAAO,WAAW,WAC3E,IAAA,CAAK,IAAA,CAAK,GAAA,CAAI,MAAM,IACpB,gBAAA,IAAA,EAAK,+BAAA,iCAAL,IAAA,CAAA,IAAA,EAAmC;IAI1C;IACA,WACC,WAAA,EACA,OAAA,EACC;QACD,OAAO,IAAA,CAAK,GAAA,6KACX,eAAA,CAAa,UAAA,CACZ,OAAO,gBAAgB,WAAW,IAAA,CAAK,MAAA,CAAO,WAAW,IAAI,aAC7D,QAAQ,GAAA,CAAI,CAAC,MAAS,OAAO,QAAQ,WAAW,IAAA,CAAK,MAAA,CAAO,GAAG,IAAI,GAAI;IAG1E;IACA,aAAgC,EAA+D;cAArF,OAAA,EAAS,YAAA,CAAa,CAAA,GAAxB;QACP,OAAO,IAAA,CAAK,GAAA,6KACX,eAAA,CAAa,OAAA,CAAQ;YACpB;YACA;QACD,CAAC;IAEH;IACA,aAKA,EAKG;cATF,OAAA,EACA,YAAA,EACA,SAAA,EACA,MAAA,EACD,GALQ;QAWP,OAAO,IAAA,CAAK,GAAA,6KACX,eAAA,CAAa,OAAA,CAAQ;YACpB;YACA;YACA;YACA,QAAQ,OAAO,WAAW,WAAW,IAAA,CAAK,MAAA,CAAO,MAAM,IAAI;QAC5D,CAAC;IAEH;IACA,cAIA,EAIG;cAPF,WAAW,IAAA,EACX,aAAA,EACA,MAAA,EACD,GAJS;QASR,OAAO,IAAA,CAAK,GAAA,6KACX,eAAA,CAAa,QAAA,CAAS;YACrB,SAAA,8CAAW,KAAM,GAAA,CAAI,CAAC,MAAQ,gBAAA,IAAA,EAAK,+BAAA,iCAAL,IAAA,CAAA,IAAA,EAAmC,IAAI;YACrE;YACA;QACD,CAAC;IAEH;IACA,gBACC,OAAA,EACA,OAAA,EACC;QACD,OAAO,IAAA,CAAK,GAAA,6KACX,eAAA,CAAa,eAAA,CACZ,QAAQ,GAAA,CAAI,CAAC,MAAS,OAAO,QAAQ,WAAW,IAAA,CAAK,MAAA,CAAO,GAAG,IAAI,GAAI,GACvE,OAAO,YAAY,WAChB,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,OAAO,IACzB,gBAAA,IAAA,EAAK,+BAAA,iCAAL,IAAA,CAAA,IAAA,EAAmC;IAGzC;IACA,YAAY,KAGZ,EAGG;cALF,IAAA,EACA,OAAA,EACD;QAIC,OAAO,IAAA,CAAK,GAAA,CACX,2LAAA,CAAa,WAAA,CAAY;YACxB;YACA,SAAS,QAAQ,GAAA,CAAI,CAAC,MAAS,OAAO,QAAQ,WAAW,IAAA,CAAK,MAAA,CAAO,GAAG,IAAI,GAAI;QACjF,CAAC;IAEH;IAAA;;;;;;;;;;;GAAA,GAcA,YAAY;QACX,OAAO,KAAK,SAAA,CAAU,aAAA,IAAA,EAAK,YAAW,QAAA,CAAS,CAAC;IACjD;IAAA,+EAAA,GA8BA,MAAM,KAAK,OAAA,EAAmD;QAC7D,MAAM,EAAE,MAAA,EAAQ,GAAG,aAAa,CAAA,GAAI;QACpC,MAAM,QAAQ,MAAM,IAAA,CAAK,KAAA,CAAM,YAAY;QAC3C,OAAO,OAAO,oBAAA,CAAqB,KAAK;IACzC;IAAA,wCAAA,GAGA,MAAM,QAAuD;sBAAjD,iEAAwB,CAAC;QACpC,MAAM,gBAAA,IAAA,EAAK,UAAA,YAAL,IAAA,CAAA,IAAA,EAAc;QACpB,OAAO,aAAA,IAAA,EAAK,YAAW,KAAA,CAAM;YAC5B,cAAc,gBAAA,IAAA,EAAK,YAAA,cAAL,IAAA,CAAA,IAAA,EAAgB,kBAAkB;YAChD,qBAAqB,QAAQ,mBAAA;QAC9B,CAAC;IACF;IAAA,8BAAA,GAGA,MAAM,YAIa;sBAHlB,iEAEI,CAAC;QAEL,MAAM,gBAAA,IAAA,EAAK,UAAA,YAAL,IAAA,CAAA,IAAA,EAAc;QACpB,OAAO,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU;IAClC;IAvQA,YAAY,WAAA,CAAgC;QAoB5C;;;;;;;;KAAA,GAAA,aAAA,IAAA,EAAA;QAiEA,aAAA,IAAA,EAAA;QA+HA,aAAA,IAAA,EAAA;QAqDA,aAAA,IAAA,EAAA;QAeA,iFAAA;QAAA,aAAA,IAAA,EAAM;QAmDN,aAAA,IAAA,EAAM;QAQN,aAAA,IAAA,EAAM;QAqMN;;;KAAA,GAAA,aAAA,IAAA,EAAM;QA9jBN,aAAA,IAAA,EAAA,YAAA,KAAA;QAuCC,aAAA,IAAA,EAAK,YAAa,wLAAI,8BAAA,CACrB,cAAc,YAAY,SAAA,GAAY,KAAA;IAExC;AAykBD;AAnrBO,IAAM,mBAAN;AAgEN,aAAA,IAAA;AA0DA,SAAA,IAAA;AAAA,WAAmC,SAAC,IAAA,EAAS,KAAA,EAAiB;IAC7D,MAAM,QAAQ,aAAA,IAAA,EAAK,YAAW,MAAA,CAAO,MAAA;IACrC,MAAM,SAAQ,iLAAA,EACb;QACC,MAAM;QAAA,yEAAA;QAEN,OAAO,OAAO,UAAU,WAAW,OAAO,KAAK,IAAI;QACnD;QACA;IACD,+KACA,wBAAA;IAED,aAAA,IAAA,EAAK,YAAW,MAAA,CAAO,IAAA,CAAK,KAAK;IACjC,OAAO;AACR;AAmDA,gCAAA,IAAA;AAAA,kCAA6B,SAC5B,GAAA,EACsB;IACtB,kKAAI,kBAAA,EAAgB,GAAG,GAAG;QACzB,OAAO,IAAA,CAAK,IAAA,CAAK,GAAG;IACrB;IAEA,OAAO;AACR;AAuHA,aAAA,IAAA;AAAA,eAAU,SAAC,GAAA,OAAmD;UAAvB,cAAA,EAAgB,MAAA,CAAO,CAAA,EAAiB,CAA1C;IAEpC,IAAI,UAAU,OAAO,MAAA,CAAO,GAAG,CAAA,KAAM,UAAU;QAC9C,OAAO,MAAA,CAAO,GAAG,CAAA;IAClB;IAEA,IAAI,CAAC,gBAAgB;QACpB,OAAO,oBAAA,CAAqB,GAAG,CAAA;IAChC;IAGA,MAAM,4EAAY,eAAgB,UAAA,CAAW,MAAA,CAAO,GAAG,CAAC,CAAA;IACxD,IAAI,CAAC,WAAW;QACf,MAAM,IAAI,MAAM,sCAAgD,OAAV,MAAA,CAAO,GAAG,CAAA,EAAA,EAAI;IACrE;IAEA,MAAM,QACL,SAAS,YAAY,UAAU,GAAA,GAAM,SAAS,YAAY,UAAU,GAAA,GAAM,UAAU,GAAA;IAErF,IAAI,CAAC,OAAO;QACX,MAAM,IAAI,MAAM,gDAA0D,OAAV,MAAA,CAAO,GAAG,CAAA,EAAA,EAAI;IAC/E;IAGA,OAAO,OAAO,KAAK;AACpB;AA4BA,YAAA,IAAA;AAAA,cAAS,SAAC,OAAA,EAAuB;IAChC,MAAM,sBAAsB,gBAAA,IAAA,EAAK,YAAA,cAAL,IAAA,CAAA,IAAA,EAAgB,uBAAuB;IAEnE,aAAA,IAAA,EAAK,YAAW,MAAA,CAAO,OAAA,CAAQ,CAAC,OAAO,UAAU;QAChD,kJAAI,KAAA,EAAG,MAAM,KAAA,EAAO,oLAAW,GAAG;YACjC,IAAI,MAAM,KAAA,CAAM,IAAA,CAAK,MAAA,GAAS,qBAAqB;gBAClD,MAAM,IAAI,MACT,yBAAkB,OAAA,iDAA8C,qBAAA,gBAAmD,OAAjB,MAAM,KAAA,CAAM,IAAA,CAAK,MAAA,EAAA;YAErH;QACD;IACD,CAAC;AACF;AAGM,qBAAA,IAAA;AAAA,uBAAkB,eAAC,OAAA,EAAuB;IAC/C,IAAI,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU,OAAA,EAAS;QACtC,MAAM,gBAAgB,gBAAA,IAAA,EAAK,YAAA,cAAL,IAAA,CAAA,IAAA,EAAgB,iBAAiB;QACvD,IAAI,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU,OAAA,CAAQ,MAAA,GAAS,eAAe;YAC7D,MAAM,IAAI,MAAM,0CAA0C,CAAe,MAAf;QAC3D;IACD;IAGA,IAAI,QAAQ,mBAAA,IAAuB,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU,OAAA,EAAS;QACrE;IACD;;IAEA,MAAM,wDAAW,IAAA,EAAK,YAAW,SAAA,CAAU,KAAA,wDAA1B,+BAAmC,aAAA,IAAA,EAAK,YAAW,MAAA;IAEpE,MAAM,QAAQ,MAAM,aAAa,OAAO,EAAE,QAAA,CAAS;QAClD,OAAO;QACP,6LAAU,eAAA;IACX,CAAC;IAED,MAAM,eAAe,MAAM,IAAA,CAEzB,MAAA,CAAO,CAAC,SAAS;QACjB,MAAM,gBAAgB,aAAA,IAAA,EAAK,YAAW,MAAA,CAAO,IAAA,CAAK,CAAC,UAAU;YAC5D,kJACC,KAAA,EAAG,MAAM,KAAA,wKAAO,iBAAc,KAC9B,YAAY,MAAM,KAAA,IAClB,gBAAgB,MAAM,KAAA,CAAM,MAAA,EAC3B;gBACD,OAAO,KAAK,YAAA,KAAiB,MAAM,KAAA,CAAM,MAAA,CAAO,UAAA,CAAW,QAAA;YAC5D;YAEA,OAAO;QACR,CAAC;QAED,OAAO,CAAC;IACT,CAAC,EACA,KAAA,CAAM,GAAG,gBAAA,IAAA,EAAK,YAAA,cAAL,IAAA,CAAA,IAAA,EAAgB,iBAAiB,WAAW,CAAC,EACtD,GAAA,CAAI,CAAC,OAAA,CAAU;YACf,UAAU,KAAK,YAAA;YACf,QAAQ,KAAK,MAAA;YACb,SAAS,KAAK,OAAA;QACf,CAAA,CAAE;IAEH,IAAI,CAAC,aAAa,MAAA,EAAQ;QACzB,MAAM,IAAI,MAAM,+CAA+C;IAChE;IAEA,IAAA,CAAK,aAAA,CAAc,YAAY;AAChC;AAEM,mBAAA,IAAA;AAAA,qBAAgB,eAAC,OAAA,EAAuB;IAC7C,IAAI,QAAQ,mBAAA,IAAuB,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU,KAAA,EAAO;QACnE;IACD;IAEA,IAAA,CAAK,WAAA,CAAY,MAAM,aAAa,OAAO,EAAE,oBAAA,CAAqB,CAAC;AACpE;AAEM,uBAAA,IAAA;AAAA,yBAAoB,eAAC,OAAA,EAAuB;IACjD,MAAM,EAAE,MAAA,EAAQ,YAAA,CAAa,CAAA,GAAI,aAAA,IAAA,EAAK;IAEtC,MAAM,uBAA8C,CAAC,CAAA;IAIrD,MAAM,mBAIA,CAAC,CAAA;IAEP,OAAO,OAAA,CAAQ,CAAC,UAAU;QACzB,IAAI,MAAM,IAAA,KAAS,YAAY,OAAO,MAAM,KAAA,KAAU,UAAU;YAE/D,iBAAiB,IAAA,CAAK;gBAAE,kLAAI,sBAAA,EAAoB,MAAM,KAAK;gBAAG;YAAM,CAAC;YACrE;QACD;IACD,CAAC;IAED,aAAa,OAAA,CAAQ,CAAC,gBAAgB;QAErC,IAAI,YAAY,IAAA,KAAS,YAAY;YAIpC,MAAM,kBAAkB,YAAY,SAAA,CAAU,IAAA,CAC7C,CAAC,MAAQ,IAAI,IAAA,KAAS,WAAW,+IAAC,KAAA,EAAG,MAAA,CAAO,IAAI,KAAK,CAAA,CAAE,KAAA,wKAAO,iBAAc;YAG7E,IAAI,iBAAiB;gBACpB,qBAAqB,IAAA,CAAK,WAAW;YACtC;QACD;QAIA,IAAI,YAAY,IAAA,KAAS,cAAc;YACtC,YAAY,OAAA,CAAQ,OAAA,CAAQ,CAAC,WAAW;gBACvC,IAAI,OAAO,IAAA,KAAS,SAAS;oBAC5B,MAAM,QAAQ,MAAA,CAAO,OAAO,KAAK,CAAA;oBACjC,IAAI,OAAO,MAAM,KAAA,KAAU,UAAU;wBACpC,MAAM,KAAA,yKAAQ,SAAA,CAAO,IAAA,kLAAK,MAAA,CAAI,GAAA,CAAI,SAAA,CAAU,MAAM,KAAK,CAAC;oBACzD;gBACD;YACD,CAAC;QACF;QAEA,IAAI,YAAY,IAAA,KAAS,mBAAmB;YAC3C,IAAI,YAAY,OAAA,CAAQ,IAAA,KAAS,SAAS;gBACzC,MAAM,QAAQ,MAAA,CAAO,YAAY,OAAA,CAAQ,KAAK,CAAA;gBAC9C,IAAI,OAAO,MAAM,KAAA,KAAU,UAAU;oBACpC,MAAM,KAAA,GAAQ,+KAAA,CAAO,IAAA,kLAAK,MAAA,CAAI,OAAA,CAAQ,SAAA,CAAU,MAAM,KAAK,CAAC;gBAC7D;YACD;QACD;IACD,CAAC;IAED,IAAI,qBAAqB,MAAA,EAAQ;QAChC,MAAM,QAAQ,GAAA,CACb,qBAAqB,GAAA,CAAI,OAAO,aAAa;YAC5C,MAAM,CAAC,WAAW,YAAY,YAAY,CAAA,GAAI,SAAS,MAAA,CAAO,KAAA,CAAM,IAAI;YAExE,MAAM,aAAa,MAAM,aAAa,OAAO,EAAE,yBAAA,CAA0B;gBACxE,uLAAS,uBAAA,EAAqB,SAAS;gBACvC,QAAQ;gBACR,UAAU;YACX,CAAC;YAKD,MAAM,eACL,WAAW,UAAA,CAAW,MAAA,GAAS,MAAK,2LAAA,EAAY,WAAW,UAAA,CAAW,EAAA,CAAG,CAAA,CAAE,CAAE;YAE9E,MAAM,SAAS,eACZ,WAAW,UAAA,CAAW,KAAA,CAAM,GAAG,WAAW,UAAA,CAAW,MAAA,GAAS,CAAC,IAC/D,WAAW,UAAA;YAEd,IAAI,OAAO,MAAA,KAAW,SAAS,SAAA,CAAU,MAAA,EAAQ;gBAChD,MAAM,IAAI,MAAM,gCAAgC;YACjD;YAEA,OAAO,OAAA,CAAQ,CAAC,OAAO,MAAM;gBAC5B,MAAM,MAAM,SAAS,SAAA,CAAU,CAAC,CAAA;gBAChC,IAAI,IAAI,IAAA,KAAS,SAAS;gBAC1B,MAAM,QAAQ,MAAA,CAAO,IAAI,KAAK,CAAA;gBAE9B,kJAAI,KAAA,EAAG,MAAM,KAAA,EAAO,uLAAc,GAAG;gBAErC,MAAM,aAAa,MAAM,KAAA;gBAEzB,MAAM,cAAU,qMAAA,EAAyB,OAAO,UAAU;gBAE1D,IAAI,SAAS;oBACZ,MAAM,KAAA,yKAAQ,SAAA,CAAO,IAAA,CAAK,YAAY,OAAO;oBAC7C;gBACD;gBAEA,MAAM,wLAAY,mBAAA,EAAiB,KAAK;gBACxC,IAAI,aAAa,QAAS,OAAO,UAAU,YAAY,mBAAmB,OAAQ;oBACjF,IAAI,OAAO,eAAe,UAAU;wBACnC,MAAM,IAAI,MACT,sDAIA,OAJsD,KAAK,SAAA,CAC1D,YACA,MACA;oBAGH;oBACA,iBAAiB,IAAA,CAAK;wBACrB,IAAI;wBACJ;wBACA,gBAAgB;oBACjB,CAAC;oBACD;gBACD;gBAEA,MAAM,IAAI,MACT,yBAAqE,OAA5C,KAAK,SAAA,CAAU,OAAO,MAAM,CAAC,GAAA,eAItD,YAJ0E,SAAA,CACzE,YACA,MACA;YAGH,CAAC;QACF,CAAC;IAEH;IAEA,IAAI,iBAAiB,MAAA,EAAQ;QAC5B,MAAM,aAAa,CAAC;eAAG,IAAI,IAAI,iBAAiB,GAAA,CAAI;oBAAC,EAAE,EAAA,CAAG,CAAA;uBAAM,EAAE,CAAC,CAAC;;SAAA;QACpE,MAAM,eAAe,MAAM,YAAY,qBAAqB;QAC5D,MAAM,UAAA,CACL,MAAM,QAAQ,GAAA,CACb,aAAa,GAAA,CAAI,CAACA,SACjB,aAAa,OAAO,EAAE,eAAA,CAAgB;gBACrC,KAAKA;gBACL,SAAS;oBAAE,WAAW;gBAAK;YAC5B,CAAC,GAEH,EACC,IAAA,CAAK;QAEP,IAAI,cAAc,IAAI,IACrB,WAAW,GAAA,CAAI,CAAC,IAAI,UAAU;YAC7B,OAAO;gBAAC;gBAAI,OAAA,CAAQ,KAAK,CAAC;aAAA;QAC3B,CAAC;QAGF,MAAM,iBAAiB,MAAM,IAAA,CAAK,WAAW,EAC3C,MAAA,CAAO;gBAAC,CAAC,GAAG,GAAG,CAAA;mBAAM,IAAI,KAAK;WAC9B,GAAA,CAAI;gBAAC,CAAC,IAAI,CAAC,CAAA;mBAAM,EAAE;;QACrB,IAAI,eAAe,MAAA,EAAQ;YAC1B,MAAM,IAAI,MAAM,4CAAoE,CAAG,MAA3B,eAAe,IAAA,CAAK,IAAI;QACrF;QAEA,iBAAiB,OAAA,CAAQ;gBAAC,EAAE,EAAA,EAAI,KAAA,EAAO,cAAA,CAAe,CAAA,KAAM;gBAE7C;YADd,MAAM,SAAS,YAAY,GAAA,CAAI,EAAE;YACjC,MAAM,+BAAe,IAAA,8DAAM,KAAA;YAC3B,MAAM,uBACL,SAAS,OAAO,UAAU,YAAY,YAAY,QAC/C,MAAM,MAAA,CAAO,sBAAA,GACb,KAAA;YAEJ,IAAI,sBAAsB;gBAIzB,MAAM,YACL,kBAAkB,oLAClB,0BAAA,EAAwB,cAAc,KAAK,SAC3C,8LAAA,EAAiB,cAAc,KAAK;gBACrC,MAAM,oLACL,6BAAA,EAA2B,MAAM,KAAK,KACtC,aACC,kBAAkB,oLAAQ,0BAAA,EAAwB,cAAc,KAAK;gBAEvE,MAAM,KAAA,GAAQ,+KAAA,CAAO,eAAA,CAAgB;oBACpC,UAAU;oBACV;oBACA;gBACD,CAAC;YACF,OAAA,IAAW,kBAAkB,gBAAgB,cAAc,GAAG;gBAC7D,MAAM,KAAA,yKAAQ,SAAA,CAAO,YAAA,CAAa,8LAAA,EAAmB,MAAM,CAAE;YAC9D,OAAO;gBACN,MAAM,KAAA,yKAAQ,SAAA,CAAO,SAAA,0KAAU,qBAAA,EAAmB,MAA2B,CAAE;YAChF;QACD,CAAC;IACF;AACD;AAMM,WAAA,IAAA;AAAA,aAAQ,eAAC,OAAA,EAAuB;IACrC,IAAI,CAAC,QAAQ,mBAAA,IAAuB,CAAC,aAAA,IAAA,EAAK,YAAW,MAAA,EAAQ;QAC5D,MAAM,IAAI,MAAM,4BAA4B;IAC7C;IAEA,IAAI,CAAC,QAAQ,cAAA,IAAkB,CAAC,QAAQ,MAAA,IAAU,QAAQ,MAAA,EAAQ;QACjE,QAAQ,cAAA,GAAiB,MAAM,QAAQ,MAAA,CAAO,iBAAA,CAAkB;IACjE;IAEA,MAAM,QAAQ,GAAA,CAAI;QAAC,gBAAA,IAAA,EAAK,kBAAA,oBAAL,IAAA,CAAA,IAAA,EAAsB;QAAU,gBAAA,IAAA,EAAK,sBAAA,wBAAL,IAAA,CAAA,IAAA,EAA0B,QAAQ;KAAC;IAEtF,IAAI,CAAC,QAAQ,mBAAA,EAAqB;QACjC,MAAM,gBAAA,IAAA,EAAK,oBAAA,sBAAL,IAAA,CAAA,IAAA,EAAwB;QAE9B,IAAI,CAAC,aAAA,IAAA,EAAK,YAAW,SAAA,CAAU,MAAA,EAAQ;YACtC,MAAM,eAAe,MAAM,aAAa,OAAO,EAAE,sBAAA,CAAuB;gBACvE,kBAAkB,aAAA,IAAA,EAAK,YAAW,KAAA,CAAM;oBACvC,cAAc,gBAAA,IAAA,EAAK,YAAA,cAAL,IAAA,CAAA,IAAA,EAAgB,kBAAkB;oBAChD,WAAW;wBACV,WAAW;4BACV,QAAQ,OAAO,gBAAA,IAAA,EAAK,YAAA,cAAL,IAAA,CAAA,IAAA,EAAgB,YAAY,QAAQ;4BACnD,SAAS,CAAC,CAAA;wBACX;oBACD;gBACD,CAAC;YACF,CAAC;YACD,IAAI,aAAa,OAAA,CAAQ,MAAA,CAAO,MAAA,KAAW,WAAW;gBACrD,MAAM,IAAI,MACT,+DAA2F,OAA5B,aAAa,OAAA,CAAQ,MAAA,CAAO,KAAA,GAC3F;oBAAE,OAAO;gBAAa;YAExB;YAEA,MAAM,eAAe,oBAAoB,OAAO,IAAA,CAAK,SAAA,CAAU,SAAA,CAAU,KAAA,IAAS,EAAE;YAEpF,MAAM,kCACL,OAAO,aAAa,OAAA,CAAQ,OAAA,CAAQ,eAAe,IAAI;YAExD,MAAM,YACL,kCACA,OAAO,aAAa,OAAA,CAAQ,OAAA,CAAQ,WAAW,IAC/C,OAAO,aAAa,OAAA,CAAQ,OAAA,CAAQ,aAAa;YAGlD,IAAA,CAAK,YAAA,CACJ,YAAY,kCAAkC,YAAY;QAE5D;IACD;IAGA,gBAAA,IAAA,EAAK,WAAA,aAAL,IAAA,CAAA,IAAA,EAAe;AAChB","debugId":null}},
    {"offset": {"line": 2471, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/version.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// This file is generated by genversion.mjs. Do not edit it directly.\n\nexport const PACKAGE_VERSION = '0.49.1';\nexport const TARGETED_RPC_VERSION = '1.17.0';\n"],"names":[],"mappings":";;;;AAKO,MAAM,kBAAkB;AACxB,MAAM,uBAAuB","debugId":null}},
    {"offset": {"line": 2483, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/client/errors.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nconst CODE_TO_ERROR_TYPE: Record<number, string> = {\n\t'-32700': 'ParseError',\n\t'-32600': 'InvalidRequest',\n\t'-32601': 'MethodNotFound',\n\t'-32602': 'InvalidParams',\n\t'-32603': 'InternalError',\n};\n\nexport class SuiHTTPTransportError extends Error {}\n\nexport class JsonRpcError extends SuiHTTPTransportError {\n\tcode: number;\n\ttype: string;\n\n\tconstructor(message: string, code: number) {\n\t\tsuper(message);\n\t\tthis.code = code;\n\t\tthis.type = CODE_TO_ERROR_TYPE[code] ?? 'ServerError';\n\t}\n}\n\nexport class SuiHTTPStatusError extends SuiHTTPTransportError {\n\tstatus: number;\n\tstatusText: string;\n\n\tconstructor(message: string, status: number, statusText: string) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.statusText = statusText;\n\t}\n}\n"],"names":[],"mappings":";;;;;AAGA,MAAM,qBAA6C;IAClD,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;AACX;AAEO,MAAM,8BAA8B,MAAM;AAAC;AAE3C,MAAM,qBAAqB,sBAAsB;IAIvD,YAAY,OAAA,EAAiB,IAAA,CAAc;QAC1C,KAAA,CAAM,OAAO;QACb,IAAA,CAAK,IAAA,GAAO;YACA;QAAZ,IAAA,CAAK,IAAA,iDAAO,CAAmB,IAAI,CAAA,+EAAK;IACzC;AACD;AAEO,MAAM,2BAA2B,sBAAsB;IAI7D,YAAY,OAAA,EAAiB,MAAA,EAAgB,UAAA,CAAoB;QAChE,KAAA,CAAM,OAAO;QACb,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,UAAA,GAAa;IACnB;AACD","debugId":null}},
    {"offset": {"line": 2518, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/client/rpc-websocket-client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { JsonRpcError } from './errors.js';\n\nfunction getWebsocketUrl(httpUrl: string): string {\n\tconst url = new URL(httpUrl);\n\turl.protocol = url.protocol.replace('http', 'ws');\n\treturn url.toString();\n}\n\ntype JsonRpcMessage =\n\t| {\n\t\t\tid: number;\n\t\t\tresult: never;\n\t\t\terror: {\n\t\t\t\tcode: number;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t  }\n\t| {\n\t\t\tid: number;\n\t\t\tresult: unknown;\n\t\t\terror: never;\n\t  }\n\t| {\n\t\t\tmethod: string;\n\t\t\tparams: NotificationMessageParams;\n\t  };\n\ntype NotificationMessageParams = {\n\tsubscription?: number;\n\tresult: object;\n};\n\ntype SubscriptionRequest<T = any> = {\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: any[];\n\tonMessage: (event: T) => void;\n};\n\n/**\n * Configuration options for the websocket connection\n */\nexport type WebsocketClientOptions = {\n\t/**\n\t * Custom WebSocket class to use. Defaults to the global WebSocket class, if available.\n\t */\n\tWebSocketConstructor?: typeof WebSocket;\n\t/**\n\t * Milliseconds before timing out while calling an RPC method\n\t */\n\tcallTimeout?: number;\n\t/**\n\t * Milliseconds between attempts to connect\n\t */\n\treconnectTimeout?: number;\n\t/**\n\t * Maximum number of times to try connecting before giving up\n\t */\n\tmaxReconnects?: number;\n};\n\nexport const DEFAULT_CLIENT_OPTIONS = {\n\t// We fudge the typing because we also check for undefined in the constructor:\n\tWebSocketConstructor: (typeof WebSocket !== 'undefined'\n\t\t? WebSocket\n\t\t: undefined) as typeof WebSocket,\n\tcallTimeout: 30000,\n\treconnectTimeout: 3000,\n\tmaxReconnects: 5,\n} satisfies WebsocketClientOptions;\n\nexport class WebsocketClient {\n\tendpoint: string;\n\toptions: Required<WebsocketClientOptions>;\n\t#requestId = 0;\n\t#disconnects = 0;\n\t#webSocket: WebSocket | null = null;\n\t#connectionPromise: Promise<WebSocket> | null = null;\n\t#subscriptions = new Set<RpcSubscription>();\n\t#pendingRequests = new Map<\n\t\tnumber,\n\t\t{\n\t\t\tresolve: (result: Extract<JsonRpcMessage, { id: number }>) => void;\n\t\t\treject: (reason: unknown) => void;\n\t\t\ttimeout: ReturnType<typeof setTimeout>;\n\t\t}\n\t>();\n\n\tconstructor(endpoint: string, options: WebsocketClientOptions = {}) {\n\t\tthis.endpoint = endpoint;\n\t\tthis.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n\n\t\tif (!this.options.WebSocketConstructor) {\n\t\t\tthrow new Error('Missing WebSocket constructor');\n\t\t}\n\n\t\tif (this.endpoint.startsWith('http')) {\n\t\t\tthis.endpoint = getWebsocketUrl(this.endpoint);\n\t\t}\n\t}\n\n\tasync makeRequest<T>(method: string, params: any[]): Promise<T> {\n\t\tconst webSocket = await this.#setupWebSocket();\n\n\t\treturn new Promise<Extract<JsonRpcMessage, { id: number }>>((resolve, reject) => {\n\t\t\tthis.#requestId += 1;\n\t\t\tthis.#pendingRequests.set(this.#requestId, {\n\t\t\t\tresolve: resolve,\n\t\t\t\treject,\n\t\t\t\ttimeout: setTimeout(() => {\n\t\t\t\t\tthis.#pendingRequests.delete(this.#requestId);\n\t\t\t\t\treject(new Error(`Request timeout: ${method}`));\n\t\t\t\t}, this.options.callTimeout),\n\t\t\t});\n\n\t\t\twebSocket.send(JSON.stringify({ jsonrpc: '2.0', id: this.#requestId, method, params }));\n\t\t}).then(({ error, result }) => {\n\t\t\tif (error) {\n\t\t\t\tthrow new JsonRpcError(error.message, error.code);\n\t\t\t}\n\n\t\t\treturn result as T;\n\t\t});\n\t}\n\n\t#setupWebSocket() {\n\t\tif (this.#connectionPromise) {\n\t\t\treturn this.#connectionPromise;\n\t\t}\n\n\t\tthis.#connectionPromise = new Promise<WebSocket>((resolve) => {\n\t\t\tthis.#webSocket?.close();\n\t\t\tthis.#webSocket = new this.options.WebSocketConstructor(this.endpoint);\n\n\t\t\tthis.#webSocket.addEventListener('open', () => {\n\t\t\t\tthis.#disconnects = 0;\n\t\t\t\tresolve(this.#webSocket!);\n\t\t\t});\n\n\t\t\tthis.#webSocket.addEventListener('close', () => {\n\t\t\t\tthis.#disconnects++;\n\t\t\t\tif (this.#disconnects <= this.options.maxReconnects) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.#reconnect();\n\t\t\t\t\t}, this.options.reconnectTimeout);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.#webSocket.addEventListener('message', ({ data }: { data: string }) => {\n\t\t\t\tlet json: JsonRpcMessage;\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(data) as JsonRpcMessage;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ('id' in json && json.id != null && this.#pendingRequests.has(json.id)) {\n\t\t\t\t\tconst { resolve, timeout } = this.#pendingRequests.get(json.id)!;\n\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tresolve(json);\n\t\t\t\t} else if ('params' in json) {\n\t\t\t\t\tconst { params } = json;\n\t\t\t\t\tthis.#subscriptions.forEach((subscription) => {\n\t\t\t\t\t\tif (subscription.subscriptionId === params.subscription)\n\t\t\t\t\t\t\tif (params.subscription === subscription.subscriptionId) {\n\t\t\t\t\t\t\t\tsubscription.onMessage(params.result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this.#connectionPromise;\n\t}\n\n\tasync #reconnect() {\n\t\tthis.#webSocket?.close();\n\t\tthis.#connectionPromise = null;\n\n\t\treturn Promise.allSettled(\n\t\t\t[...this.#subscriptions].map((subscription) => subscription.subscribe(this)),\n\t\t);\n\t}\n\n\tasync subscribe<T>(input: SubscriptionRequest<T>) {\n\t\tconst subscription = new RpcSubscription(input);\n\t\tthis.#subscriptions.add(subscription);\n\t\tawait subscription.subscribe(this);\n\t\treturn () => subscription.unsubscribe(this);\n\t}\n}\n\nclass RpcSubscription {\n\tsubscriptionId: number | null = null;\n\tinput: SubscriptionRequest<any>;\n\tsubscribed = false;\n\n\tconstructor(input: SubscriptionRequest) {\n\t\tthis.input = input;\n\t}\n\n\tonMessage(message: unknown) {\n\t\tif (this.subscribed) {\n\t\t\tthis.input.onMessage(message);\n\t\t}\n\t}\n\n\tasync unsubscribe(client: WebsocketClient) {\n\t\tconst { subscriptionId } = this;\n\t\tthis.subscribed = false;\n\t\tif (subscriptionId == null) return false;\n\t\tthis.subscriptionId = null;\n\n\t\treturn client.makeRequest(this.input.unsubscribe, [subscriptionId]);\n\t}\n\n\tasync subscribe(client: WebsocketClient) {\n\t\tthis.subscriptionId = null;\n\t\tthis.subscribed = true;\n\t\tconst newSubscriptionId = await client.makeRequest<number>(\n\t\t\tthis.input.method,\n\t\t\tthis.input.params,\n\t\t);\n\n\t\tif (this.subscribed) {\n\t\t\tthis.subscriptionId = newSubscriptionId;\n\t\t}\n\t}\n}\n"],"names":["resolve"],"mappings":"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","debugId":null}},
    {"offset": {"line": 2720, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/client/http-transport.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from '../version.js';\nimport { JsonRpcError, SuiHTTPStatusError } from './errors.js';\nimport type { WebsocketClientOptions } from './rpc-websocket-client.js';\nimport { WebsocketClient } from './rpc-websocket-client.js';\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = { [header: string]: string };\n\ninterface SuiHTTPTransportOptions {\n\tfetch?: typeof fetch;\n\tWebSocketConstructor?: typeof WebSocket;\n\turl: string;\n\trpc?: {\n\t\theaders?: HttpHeaders;\n\t\turl?: string;\n\t};\n\twebsocket?: WebsocketClientOptions & {\n\t\turl?: string;\n\t};\n}\n\nexport interface SuiTransportRequestOptions {\n\tmethod: string;\n\tparams: unknown[];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport interface SuiTransportSubscribeOptions<T> {\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: unknown[];\n\tonMessage: (event: T) => void;\n}\n\nexport interface SuiTransport {\n\trequest<T = unknown>(input: SuiTransportRequestOptions): Promise<T>;\n\tsubscribe<T = unknown>(input: SuiTransportSubscribeOptions<T>): Promise<() => Promise<boolean>>;\n}\n\nexport class SuiHTTPTransport implements SuiTransport {\n\t#requestId = 0;\n\t#options: SuiHTTPTransportOptions;\n\t#websocketClient?: WebsocketClient;\n\n\tconstructor(options: SuiHTTPTransportOptions) {\n\t\tthis.#options = options;\n\t}\n\n\tfetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\n\t\tconst fetch = this.#options.fetch ?? globalThis.fetch;\n\n\t\tif (!this.fetch) {\n\t\t\tthrow new Error(\n\t\t\t\t'The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport.',\n\t\t\t);\n\t\t}\n\n\t\treturn fetch(input, init);\n\t}\n\n\t#getWebsocketClient(): WebsocketClient {\n\t\tif (!this.#websocketClient) {\n\t\t\tconst WebSocketConstructor = this.#options.WebSocketConstructor ?? globalThis.WebSocket;\n\t\t\tif (!WebSocketConstructor) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport.',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.#websocketClient = new WebsocketClient(\n\t\t\t\tthis.#options.websocket?.url ?? this.#options.url,\n\t\t\t\t{\n\t\t\t\t\tWebSocketConstructor: this.#options.WebSocketConstructor,\n\t\t\t\t\t...this.#options.websocket,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn this.#websocketClient;\n\t}\n\n\tasync request<T>(input: SuiTransportRequestOptions): Promise<T> {\n\t\tthis.#requestId += 1;\n\n\t\tconst res = await this.fetch(this.#options.rpc?.url ?? this.#options.url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Client-Sdk-Type': 'typescript',\n\t\t\t\t'Client-Sdk-Version': PACKAGE_VERSION,\n\t\t\t\t'Client-Target-Api-Version': TARGETED_RPC_VERSION,\n\t\t\t\t...this.#options.rpc?.headers,\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tid: this.#requestId,\n\t\t\t\tmethod: input.method,\n\t\t\t\tparams: input.params,\n\t\t\t}),\n\t\t});\n\n\t\tif (!res.ok) {\n\t\t\tthrow new SuiHTTPStatusError(\n\t\t\t\t`Unexpected status code: ${res.status}`,\n\t\t\t\tres.status,\n\t\t\t\tres.statusText,\n\t\t\t);\n\t\t}\n\n\t\tconst data = await res.json();\n\n\t\tif ('error' in data && data.error != null) {\n\t\t\tthrow new JsonRpcError(data.error.message, data.error.code);\n\t\t}\n\n\t\treturn data.result;\n\t}\n\n\tasync subscribe<T>(input: SuiTransportSubscribeOptions<T>): Promise<() => Promise<boolean>> {\n\t\tconst unsubscribe = await this.#getWebsocketClient().subscribe(input);\n\n\t\treturn async () => !!(await unsubscribe());\n\t}\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,iBAAiB,4BAA4B;AACtD,SAAS,cAAc,0BAA0B;AAEjD,SAAS,uBAAuB;;;;;;;;;;;;;;;;;;;;;AANhC,IAAA,YAAA,UAAA,kBAAA,qBAAA;;;;AA6CO,MAAM,iBAAyC;IASrD,MAAM,KAAA,EAAoB,IAAA,EAAuC;;QAChE,MAAM,2CAAQ,IAAA,EAAK,UAAS,KAAA,cAAd,qDAAuB,WAAW,KAAA;QAEhD,IAAI,CAAC,IAAA,CAAK,KAAA,EAAO;YAChB,MAAM,IAAI,MACT;QAEF;QAEA,OAAO,MAAM,OAAO,IAAI;IACzB;IAuBA,MAAM,QAAW,KAAA,EAA+C;YAGlC,kBAOxB;QATL,aAAA,IAAA,EAAK,YAAL,aAAA,IAAA,EAAK,cAAc;;QAEnB,MAAM,MAAM,MAAM,IAAA,CAAK,KAAA,0DAAM,IAAA,EAAK,UAAS,GAAA,sEAAK,GAAA,uEAAO,aAAA,IAAA,EAAK,UAAS,GAAA,EAAK;YACzE,QAAQ;YACR,SAAS;gBACR,gBAAgB;gBAChB,mBAAmB;gBACnB,kLAAsB,kBAAA;gBACtB,yLAA6B,uBAAA;qDAC1B,IAAA,EAAK,UAAS,GAAA,wEAAK,OAAtB,AAAsB;YACvB;YACA,MAAM,KAAK,SAAA,CAAU;gBACpB,SAAS;gBACT,IAAI,aAAA,IAAA,EAAK;gBACT,QAAQ,MAAM,MAAA;gBACd,QAAQ,MAAM,MAAA;YACf,CAAC;QACF,CAAC;QAED,IAAI,CAAC,IAAI,EAAA,EAAI;YACZ,MAAM,yKAAI,qBAAA,CACT,2BAA+B,OAAJ,IAAI,MAAA,GAC/B,IAAI,MAAA,EACJ,IAAI,UAAA;QAEN;QAEA,MAAM,OAAO,MAAM,IAAI,IAAA,CAAK;QAE5B,IAAI,WAAW,QAAQ,KAAK,KAAA,IAAS,MAAM;YAC1C,MAAM,yKAAI,eAAA,CAAa,KAAK,KAAA,CAAM,OAAA,EAAS,KAAK,KAAA,CAAM,IAAI;QAC3D;QAEA,OAAO,KAAK,MAAA;IACb;IAEA,MAAM,UAAa,KAAA,EAAyE;QAC3F,MAAM,cAAc,MAAM,gBAAA,IAAA,EAAK,qBAAA,uBAAL,IAAA,CAAA,IAAA,EAA2B,SAAA,CAAU,KAAK;QAEpE,OAAO,UAAY,CAAC,CAAE,MAAM,YAAY;IACzC;IA9EA,YAAY,OAAA,CAAkC;QAgB9C,aAAA,IAAA,EAAA;QApBA,aAAA,IAAA,EAAA,YAAa;QACb,aAAA,IAAA,EAAA,UAAA,KAAA;QACA,aAAA,IAAA,EAAA,kBAAA,KAAA;QAGC,aAAA,IAAA,EAAK,UAAW;IACjB;AA6ED;AAnFC,aAAA,IAAA;AACA,WAAA,IAAA;AACA,mBAAA,IAAA;AAkBA,sBAAA,IAAA;AAAA,wBAAmB,WAAoB;IACtC,IAAI,CAAC,aAAA,IAAA,EAAK,mBAAkB;YAS1B;YAR4B;QAA7B,MAAM,yEAAuB,IAAA,EAAK,UAAS,oBAAA,iGAAwB,WAAW,SAAA;QAC9E,IAAI,CAAC,sBAAsB;YAC1B,MAAM,IAAI,MACT;QAEF;;QAEA,aAAA,IAAA,EAAK,kBAAmB,6LAAI,kBAAA,sEAC3B,IAAA,EAAK,UAAS,SAAA,kFAAW,GAAA,mFAAO,aAAA,IAAA,EAAK,UAAS,GAAA,EAC9C;YACC,sBAAsB,aAAA,IAAA,EAAK,UAAS,oBAAA;YACpC,GAAG,aAAA,IAAA,EAAK,UAAS,SAAA;QAClB;IAEF;IAEA,OAAO,aAAA,IAAA,EAAK;AACb","debugId":null}},
    {"offset": {"line": 2826, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40mysten/sui.js/src/client/client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { fromB58, toB64, toHEX } from '@mysten/bcs';\n\nimport type { TransactionBlock } from '../builder/index.js';\nimport { isTransactionBlock } from '../builder/index.js';\nimport type { Keypair } from '../cryptography/index.js';\nimport {\n\tisValidSuiAddress,\n\tisValidSuiObjectId,\n\tisValidTransactionDigest,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n} from '../utils/sui-types.js';\nimport { SuiHTTPTransport } from './http-transport.js';\nimport type { SuiTransport } from './http-transport.js';\nimport type {\n\tAddressMetrics,\n\tAllEpochsAddressMetrics,\n\tCheckpoint,\n\tCheckpointPage,\n\tCoinBalance,\n\tCoinMetadata,\n\tCoinSupply,\n\tCommitteeInfo,\n\tDelegatedStake,\n\tDevInspectResults,\n\tDevInspectTransactionBlockParams,\n\tDryRunTransactionBlockParams,\n\tDryRunTransactionBlockResponse,\n\tDynamicFieldPage,\n\tEpochInfo,\n\tEpochMetricsPage,\n\tEpochPage,\n\tExecuteTransactionBlockParams,\n\tGetAllBalancesParams,\n\tGetAllCoinsParams,\n\tGetBalanceParams,\n\tGetCheckpointParams,\n\tGetCheckpointsParams,\n\tGetCoinMetadataParams,\n\tGetCoinsParams,\n\tGetCommitteeInfoParams,\n\tGetDynamicFieldObjectParams,\n\tGetDynamicFieldsParams,\n\tGetMoveFunctionArgTypesParams,\n\tGetNormalizedMoveFunctionParams,\n\tGetNormalizedMoveModuleParams,\n\tGetNormalizedMoveModulesByPackageParams,\n\tGetNormalizedMoveStructParams,\n\tGetObjectParams,\n\tGetOwnedObjectsParams,\n\tGetProtocolConfigParams,\n\tGetStakesByIdsParams,\n\tGetStakesParams,\n\tGetTotalSupplyParams,\n\tGetTransactionBlockParams,\n\tMoveCallMetrics,\n\tMultiGetObjectsParams,\n\tMultiGetTransactionBlocksParams,\n\tNetworkMetrics,\n\tObjectRead,\n\tOrder,\n\tPaginatedCoins,\n\tPaginatedEvents,\n\tPaginatedObjectsResponse,\n\tPaginatedTransactionResponse,\n\tProtocolConfig,\n\tQueryEventsParams,\n\tQueryTransactionBlocksParams,\n\tResolvedNameServiceNames,\n\tResolveNameServiceAddressParams,\n\tResolveNameServiceNamesParams,\n\tSubscribeEventParams,\n\tSubscribeTransactionParams,\n\tSuiEvent,\n\tSuiMoveFunctionArgType,\n\tSuiMoveNormalizedFunction,\n\tSuiMoveNormalizedModule,\n\tSuiMoveNormalizedModules,\n\tSuiMoveNormalizedStruct,\n\tSuiObjectResponse,\n\tSuiObjectResponseQuery,\n\tSuiSystemStateSummary,\n\tSuiTransactionBlockResponse,\n\tSuiTransactionBlockResponseQuery,\n\tTransactionEffects,\n\tTryGetPastObjectParams,\n\tUnsubscribe,\n\tValidatorsApy,\n} from './types/index.js';\n\nexport interface PaginationArguments<Cursor> {\n\t/** Optional paging cursor */\n\tcursor?: Cursor;\n\t/** Maximum item returned per page */\n\tlimit?: number | null;\n}\n\nexport interface OrderArguments {\n\torder?: Order | null;\n}\n\n/**\n * Configuration options for the SuiClient\n * You must provide either a `url` or a `transport`\n */\nexport type SuiClientOptions = NetworkOrTransport;\n\nexport type NetworkOrTransport =\n\t| {\n\t\t\turl: string;\n\t\t\ttransport?: never;\n\t  }\n\t| {\n\t\t\ttransport: SuiTransport;\n\t\t\turl?: never;\n\t  };\n\nexport const SUI_CLIENT_BRAND = Symbol.for('@mysten/SuiClient');\n\nexport function isSuiClient(client: unknown): client is SuiClient {\n\treturn (\n\t\ttypeof client === 'object' &&\n\t\tclient !== null &&\n\t\t(client as { [SUI_CLIENT_BRAND]: unknown })[SUI_CLIENT_BRAND] === true\n\t);\n}\n\nexport class SuiClient {\n\tprotected transport: SuiTransport;\n\n\tget [SUI_CLIENT_BRAND]() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Establish a connection to a Sui RPC endpoint\n\t *\n\t * @param options configuration options for the API Client\n\t */\n\tconstructor(options: SuiClientOptions) {\n\t\tthis.transport = options.transport ?? new SuiHTTPTransport({ url: options.url });\n\t}\n\n\tasync getRpcApiVersion(): Promise<string | undefined> {\n\t\tconst resp = await this.transport.request<{ info: { version: string } }>({\n\t\t\tmethod: 'rpc.discover',\n\t\t\tparams: [],\n\t\t});\n\n\t\treturn resp.info.version;\n\t}\n\n\t/**\n\t * Get all Coin<`coin_type`> objects owned by an address.\n\t */\n\tasync getCoins(input: GetCoinsParams): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCoins',\n\t\t\tparams: [input.owner, input.coinType, input.cursor, input.limit],\n\t\t});\n\t}\n\n\t/**\n\t * Get all Coin objects owned by an address.\n\t */\n\tasync getAllCoins(input: GetAllCoinsParams): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getAllCoins',\n\t\t\tparams: [input.owner, input.cursor, input.limit],\n\t\t});\n\t}\n\n\t/**\n\t * Get the total coin balance for one coin type, owned by the address owner.\n\t */\n\tasync getBalance(input: GetBalanceParams): Promise<CoinBalance> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getBalance',\n\t\t\tparams: [input.owner, input.coinType],\n\t\t});\n\t}\n\n\t/**\n\t * Get the total coin balance for all coin types, owned by the address owner.\n\t */\n\tasync getAllBalances(input: GetAllBalancesParams): Promise<CoinBalance[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({ method: 'suix_getAllBalances', params: [input.owner] });\n\t}\n\n\t/**\n\t * Fetch CoinMetadata for a given coin type\n\t */\n\tasync getCoinMetadata(input: GetCoinMetadataParams): Promise<CoinMetadata | null> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCoinMetadata',\n\t\t\tparams: [input.coinType],\n\t\t});\n\t}\n\n\t/**\n\t *  Fetch total supply for a coin\n\t */\n\tasync getTotalSupply(input: GetTotalSupplyParams): Promise<CoinSupply> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getTotalSupply',\n\t\t\tparams: [input.coinType],\n\t\t});\n\t}\n\n\t/**\n\t * Invoke any RPC method\n\t * @param method the method to be invoked\n\t * @param args the arguments to be passed to the RPC request\n\t */\n\tasync call<T = unknown>(method: string, params: unknown[]): Promise<T> {\n\t\treturn await this.transport.request({ method, params });\n\t}\n\n\t/**\n\t * Get Move function argument types like read, write and full access\n\t */\n\tasync getMoveFunctionArgTypes(\n\t\tinput: GetMoveFunctionArgTypesParams,\n\t): Promise<SuiMoveFunctionArgType[]> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getMoveFunctionArgTypes',\n\t\t\tparams: [input.package, input.module, input.function],\n\t\t});\n\t}\n\n\t/**\n\t * Get a map from module name to\n\t * structured representations of Move modules\n\t */\n\tasync getNormalizedMoveModulesByPackage(\n\t\tinput: GetNormalizedMoveModulesByPackageParams,\n\t): Promise<SuiMoveNormalizedModules> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveModulesByPackage',\n\t\t\tparams: [input.package],\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move module\n\t */\n\tasync getNormalizedMoveModule(\n\t\tinput: GetNormalizedMoveModuleParams,\n\t): Promise<SuiMoveNormalizedModule> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveModule',\n\t\t\tparams: [input.package, input.module],\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move function\n\t */\n\tasync getNormalizedMoveFunction(\n\t\tinput: GetNormalizedMoveFunctionParams,\n\t): Promise<SuiMoveNormalizedFunction> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveFunction',\n\t\t\tparams: [input.package, input.module, input.function],\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move struct\n\t */\n\tasync getNormalizedMoveStruct(\n\t\tinput: GetNormalizedMoveStructParams,\n\t): Promise<SuiMoveNormalizedStruct> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveStruct',\n\t\t\tparams: [input.package, input.module, input.struct],\n\t\t});\n\t}\n\n\t/**\n\t * Get all objects owned by an address\n\t */\n\tasync getOwnedObjects(input: GetOwnedObjectsParams): Promise<PaginatedObjectsResponse> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getOwnedObjects',\n\t\t\tparams: [\n\t\t\t\tinput.owner,\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiObjectResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Get details about an object\n\t */\n\tasync getObject(input: GetObjectParams): Promise<SuiObjectResponse> {\n\t\tif (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getObject',\n\t\t\tparams: [input.id, input.options],\n\t\t});\n\t}\n\n\tasync tryGetPastObject(input: TryGetPastObjectParams): Promise<ObjectRead> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_tryGetPastObject',\n\t\t\tparams: [input.id, input.version, input.options],\n\t\t});\n\t}\n\n\t/**\n\t * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n\t */\n\tasync multiGetObjects(input: MultiGetObjectsParams): Promise<SuiObjectResponse[]> {\n\t\tinput.ids.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Object id ${id}`);\n\t\t\t}\n\t\t});\n\t\tconst hasDuplicates = input.ids.length !== new Set(input.ids).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate object ids in batch call ${input.ids}`);\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_multiGetObjects',\n\t\t\tparams: [input.ids, input.options],\n\t\t});\n\t}\n\n\t/**\n\t * Get transaction blocks for a given query criteria\n\t */\n\tasync queryTransactionBlocks(\n\t\tinput: QueryTransactionBlocksParams,\n\t): Promise<PaginatedTransactionResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_queryTransactionBlocks',\n\t\t\tparams: [\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiTransactionBlockResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t});\n\t}\n\n\tasync getTransactionBlock(\n\t\tinput: GetTransactionBlockParams,\n\t): Promise<SuiTransactionBlockResponse> {\n\t\tif (!isValidTransactionDigest(input.digest)) {\n\t\t\tthrow new Error('Invalid Transaction digest');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getTransactionBlock',\n\t\t\tparams: [input.digest, input.options],\n\t\t});\n\t}\n\n\tasync multiGetTransactionBlocks(\n\t\tinput: MultiGetTransactionBlocksParams,\n\t): Promise<SuiTransactionBlockResponse[]> {\n\t\tinput.digests.forEach((d) => {\n\t\t\tif (!isValidTransactionDigest(d)) {\n\t\t\t\tthrow new Error(`Invalid Transaction digest ${d}`);\n\t\t\t}\n\t\t});\n\n\t\tconst hasDuplicates = input.digests.length !== new Set(input.digests).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate digests in batch call ${input.digests}`);\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_multiGetTransactionBlocks',\n\t\t\tparams: [input.digests, input.options],\n\t\t});\n\t}\n\n\tasync executeTransactionBlock(\n\t\tinput: ExecuteTransactionBlockParams,\n\t): Promise<SuiTransactionBlockResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_executeTransactionBlock',\n\t\t\tparams: [\n\t\t\t\ttypeof input.transactionBlock === 'string'\n\t\t\t\t\t? input.transactionBlock\n\t\t\t\t\t: toB64(input.transactionBlock),\n\t\t\t\tArray.isArray(input.signature) ? input.signature : [input.signature],\n\t\t\t\tinput.options,\n\t\t\t\tinput.requestType,\n\t\t\t],\n\t\t});\n\t}\n\n\tasync signAndExecuteTransactionBlock({\n\t\ttransactionBlock,\n\t\tsigner,\n\t\t...input\n\t}: {\n\t\ttransactionBlock: Uint8Array | TransactionBlock;\n\t\tsigner: Keypair;\n\t} & Omit<\n\t\tExecuteTransactionBlockParams,\n\t\t'transactionBlock' | 'signature'\n\t>): Promise<SuiTransactionBlockResponse> {\n\t\tlet transactionBytes;\n\n\t\tif (transactionBlock instanceof Uint8Array) {\n\t\t\ttransactionBytes = transactionBlock;\n\t\t} else {\n\t\t\ttransactionBlock.setSenderIfNotSet(signer.toSuiAddress());\n\t\t\ttransactionBytes = await transactionBlock.build({ client: this });\n\t\t}\n\n\t\tconst { signature, bytes } = await signer.signTransactionBlock(transactionBytes);\n\n\t\treturn this.executeTransactionBlock({\n\t\t\ttransactionBlock: bytes,\n\t\t\tsignature,\n\t\t\t...input,\n\t\t});\n\t}\n\n\t/**\n\t * Get total number of transactions\n\t */\n\n\tasync getTotalTransactionBlocks(): Promise<bigint> {\n\t\tconst resp = await this.transport.request<string>({\n\t\t\tmethod: 'sui_getTotalTransactionBlocks',\n\t\t\tparams: [],\n\t\t});\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Getting the reference gas price for the network\n\t */\n\tasync getReferenceGasPrice(): Promise<bigint> {\n\t\tconst resp = await this.transport.request<string>({\n\t\t\tmethod: 'suix_getReferenceGasPrice',\n\t\t\tparams: [],\n\t\t});\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Return the delegated stakes for an address\n\t */\n\tasync getStakes(input: GetStakesParams): Promise<DelegatedStake[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({ method: 'suix_getStakes', params: [input.owner] });\n\t}\n\n\t/**\n\t * Return the delegated stakes queried by id.\n\t */\n\tasync getStakesByIds(input: GetStakesByIdsParams): Promise<DelegatedStake[]> {\n\t\tinput.stakedSuiIds.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Stake id ${id}`);\n\t\t\t}\n\t\t});\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getStakesByIds',\n\t\t\tparams: [input.stakedSuiIds],\n\t\t});\n\t}\n\n\t/**\n\t * Return the latest system state content.\n\t */\n\tasync getLatestSuiSystemState(): Promise<SuiSystemStateSummary> {\n\t\treturn await this.transport.request({ method: 'suix_getLatestSuiSystemState', params: [] });\n\t}\n\n\t/**\n\t * Get events for a given query criteria\n\t */\n\tasync queryEvents(input: QueryEventsParams): Promise<PaginatedEvents> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_queryEvents',\n\t\t\tparams: [\n\t\t\t\tinput.query,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Subscribe to get notifications whenever an event matching the filter occurs\n\t */\n\tasync subscribeEvent(\n\t\tinput: SubscribeEventParams & {\n\t\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\t\tonMessage: (event: SuiEvent) => void;\n\t\t},\n\t): Promise<Unsubscribe> {\n\t\treturn this.transport.subscribe({\n\t\t\tmethod: 'suix_subscribeEvent',\n\t\t\tunsubscribe: 'suix_unsubscribeEvent',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\tasync subscribeTransaction(\n\t\tinput: SubscribeTransactionParams & {\n\t\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\t\tonMessage: (event: TransactionEffects) => void;\n\t\t},\n\t): Promise<Unsubscribe> {\n\t\treturn this.transport.subscribe({\n\t\t\tmethod: 'suix_subscribeTransaction',\n\t\t\tunsubscribe: 'suix_unsubscribeTransaction',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\t/**\n\t * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n\t * transaction (or Move call) with any arguments. Detailed results are\n\t * provided, including both the transaction effects and any return values.\n\t */\n\tasync devInspectTransactionBlock(\n\t\tinput: DevInspectTransactionBlockParams,\n\t): Promise<DevInspectResults> {\n\t\tlet devInspectTxBytes;\n\t\tif (isTransactionBlock(input.transactionBlock)) {\n\t\t\tinput.transactionBlock.setSenderIfNotSet(input.sender);\n\t\t\tdevInspectTxBytes = toB64(\n\t\t\t\tawait input.transactionBlock.build({\n\t\t\t\t\tclient: this,\n\t\t\t\t\tonlyTransactionKind: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else if (typeof input.transactionBlock === 'string') {\n\t\t\tdevInspectTxBytes = input.transactionBlock;\n\t\t} else if (input.transactionBlock instanceof Uint8Array) {\n\t\t\tdevInspectTxBytes = toB64(input.transactionBlock);\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction block format.');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_devInspectTransactionBlock',\n\t\t\tparams: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch],\n\t\t});\n\t}\n\n\t/**\n\t * Dry run a transaction block and return the result.\n\t */\n\tasync dryRunTransactionBlock(\n\t\tinput: DryRunTransactionBlockParams,\n\t): Promise<DryRunTransactionBlockResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_dryRunTransactionBlock',\n\t\t\tparams: [\n\t\t\t\ttypeof input.transactionBlock === 'string'\n\t\t\t\t\t? input.transactionBlock\n\t\t\t\t\t: toB64(input.transactionBlock),\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Return the list of dynamic field objects owned by an object\n\t */\n\tasync getDynamicFields(input: GetDynamicFieldsParams): Promise<DynamicFieldPage> {\n\t\tif (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getDynamicFields',\n\t\t\tparams: [input.parentId, input.cursor, input.limit],\n\t\t});\n\t}\n\n\t/**\n\t * Return the dynamic field object information for a specified object\n\t */\n\tasync getDynamicFieldObject(input: GetDynamicFieldObjectParams): Promise<SuiObjectResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getDynamicFieldObject',\n\t\t\tparams: [input.parentId, input.name],\n\t\t});\n\t}\n\n\t/**\n\t * Get the sequence number of the latest checkpoint that has been executed\n\t */\n\tasync getLatestCheckpointSequenceNumber(): Promise<string> {\n\t\tconst resp = await this.transport.request({\n\t\t\tmethod: 'sui_getLatestCheckpointSequenceNumber',\n\t\t\tparams: [],\n\t\t});\n\t\treturn String(resp);\n\t}\n\n\t/**\n\t * Returns information about a given checkpoint\n\t */\n\tasync getCheckpoint(input: GetCheckpointParams): Promise<Checkpoint> {\n\t\treturn await this.transport.request({ method: 'sui_getCheckpoint', params: [input.id] });\n\t}\n\n\t/**\n\t * Returns historical checkpoints paginated\n\t */\n\tasync getCheckpoints(\n\t\tinput: PaginationArguments<CheckpointPage['nextCursor']> & GetCheckpointsParams,\n\t): Promise<CheckpointPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getCheckpoints',\n\t\t\tparams: [input.cursor, input?.limit, input.descendingOrder],\n\t\t});\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCommitteeInfo(input?: GetCommitteeInfoParams): Promise<CommitteeInfo> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCommitteeInfo',\n\t\t\tparams: [input?.epoch],\n\t\t});\n\t}\n\n\tasync getNetworkMetrics(): Promise<NetworkMetrics> {\n\t\treturn await this.transport.request({ method: 'suix_getNetworkMetrics', params: [] });\n\t}\n\n\tasync getAddressMetrics(): Promise<AddressMetrics> {\n\t\treturn await this.transport.request({ method: 'suix_getLatestAddressMetrics', params: [] });\n\t}\n\n\tasync getEpochMetrics(\n\t\tinput?: { descendingOrder?: boolean } & PaginationArguments<EpochMetricsPage['nextCursor']>,\n\t): Promise<EpochMetricsPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getEpochMetrics',\n\t\t\tparams: [input?.cursor, input?.limit, input?.descendingOrder],\n\t\t});\n\t}\n\n\tasync getAllEpochAddressMetrics(input?: {\n\t\tdescendingOrder?: boolean;\n\t}): Promise<AllEpochsAddressMetrics> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getAllEpochAddressMetrics',\n\t\t\tparams: [input?.descendingOrder],\n\t\t});\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getEpochs(\n\t\tinput?: {\n\t\t\tdescendingOrder?: boolean;\n\t\t} & PaginationArguments<EpochPage['nextCursor']>,\n\t): Promise<EpochPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getEpochs',\n\t\t\tparams: [input?.cursor, input?.limit, input?.descendingOrder],\n\t\t});\n\t}\n\n\t/**\n\t * Returns list of top move calls by usage\n\t */\n\tasync getMoveCallMetrics(): Promise<MoveCallMetrics> {\n\t\treturn await this.transport.request({ method: 'suix_getMoveCallMetrics', params: [] });\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCurrentEpoch(): Promise<EpochInfo> {\n\t\treturn await this.transport.request({ method: 'suix_getCurrentEpoch', params: [] });\n\t}\n\n\t/**\n\t * Return the Validators APYs\n\t */\n\tasync getValidatorsApy(): Promise<ValidatorsApy> {\n\t\treturn await this.transport.request({ method: 'suix_getValidatorsApy', params: [] });\n\t}\n\n\t// TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n\tasync getChainIdentifier(): Promise<string> {\n\t\tconst checkpoint = await this.getCheckpoint({ id: '0' });\n\t\tconst bytes = fromB58(checkpoint.digest);\n\t\treturn toHEX(bytes.slice(0, 4));\n\t}\n\n\tasync resolveNameServiceAddress(input: ResolveNameServiceAddressParams): Promise<string | null> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_resolveNameServiceAddress',\n\t\t\tparams: [input.name],\n\t\t});\n\t}\n\n\tasync resolveNameServiceNames(\n\t\tinput: ResolveNameServiceNamesParams,\n\t): Promise<ResolvedNameServiceNames> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_resolveNameServiceNames',\n\t\t\tparams: [input.address, input.cursor, input.limit],\n\t\t});\n\t}\n\n\tasync getProtocolConfig(input?: GetProtocolConfigParams): Promise<ProtocolConfig> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getProtocolConfig',\n\t\t\tparams: [input?.version],\n\t\t});\n\t}\n\n\t/**\n\t * Wait for a transaction block result to be available over the API.\n\t * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n\t * be available via the API.\n\t * This currently polls the `getTransactionBlock` API to check for the transaction.\n\t */\n\tasync waitForTransactionBlock({\n\t\tsignal,\n\t\ttimeout = 60 * 1000,\n\t\tpollInterval = 2 * 1000,\n\t\t...input\n\t}: {\n\t\t/** An optional abort signal that can be used to cancel */\n\t\tsignal?: AbortSignal;\n\t\t/** The amount of time to wait for a transaction block. Defaults to one minute. */\n\t\ttimeout?: number;\n\t\t/** The amount of time to wait between checks for the transaction block. Defaults to 2 seconds. */\n\t\tpollInterval?: number;\n\t} & Parameters<SuiClient['getTransactionBlock']>[0]): Promise<SuiTransactionBlockResponse> {\n\t\tconst timeoutSignal = AbortSignal.timeout(timeout);\n\t\tconst timeoutPromise = new Promise((_, reject) => {\n\t\t\ttimeoutSignal.addEventListener('abort', () => reject(timeoutSignal.reason));\n\t\t});\n\n\t\ttimeoutPromise.catch(() => {\n\t\t\t// Swallow unhandled rejections that might be thrown after early return\n\t\t});\n\n\t\twhile (!timeoutSignal.aborted) {\n\t\t\tsignal?.throwIfAborted();\n\t\t\ttry {\n\t\t\t\treturn await this.getTransactionBlock(input);\n\t\t\t} catch (e) {\n\t\t\t\t// Wait for either the next poll interval, or the timeout.\n\t\t\t\tawait Promise.race([\n\t\t\t\t\tnew Promise((resolve) => setTimeout(resolve, pollInterval)),\n\t\t\t\t\ttimeoutPromise,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\ttimeoutSignal.throwIfAborted();\n\n\t\t// This should never happen, because the above case should always throw, but just adding it in the event that something goes horribly wrong.\n\t\tthrow new Error('Unexpected error while waiting for transaction block.');\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}