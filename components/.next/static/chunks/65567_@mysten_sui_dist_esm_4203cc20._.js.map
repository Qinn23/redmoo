{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/experimental/cache.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport interface ClientCacheOptions {\n\tprefix?: string[];\n\tcache?: Map<string, unknown>;\n}\n\nexport class ClientCache {\n\t#prefix: string[];\n\t#cache: Map<string, unknown>;\n\n\tconstructor({ prefix, cache }: ClientCacheOptions = {}) {\n\t\tthis.#prefix = prefix ?? [];\n\t\tthis.#cache = cache ?? new Map();\n\t}\n\n\tread<T>(key: [string, ...string[]], load: () => T | Promise<T>): T | Promise<T> {\n\t\tconst cacheKey = [this.#prefix, ...key].join(':');\n\n\t\tif (this.#cache.has(cacheKey)) {\n\t\t\treturn this.#cache.get(cacheKey) as T;\n\t\t}\n\n\t\tconst result = load();\n\n\t\tthis.#cache.set(cacheKey, result);\n\n\t\tif (typeof result === 'object' && result !== null && 'then' in result) {\n\t\t\treturn Promise.resolve(result)\n\t\t\t\t.then((v) => {\n\t\t\t\t\tthis.#cache.set(cacheKey, v);\n\t\t\t\t\treturn v as T;\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthis.#cache.delete(cacheKey);\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\t\t}\n\n\t\treturn result as T;\n\t}\n\n\tclear(prefix?: string[]) {\n\t\tconst prefixKey = [...this.#prefix, ...(prefix ?? [])].join(':');\n\t\tif (!prefixKey) {\n\t\t\tthis.#cache.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const key of this.#cache.keys()) {\n\t\t\tif (key.startsWith(prefixKey)) {\n\t\t\t\tthis.#cache.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tscope(prefix: string | string[]) {\n\t\treturn new ClientCache({\n\t\t\tprefix: [...this.#prefix, ...(Array.isArray(prefix) ? prefix : [prefix])],\n\t\t\tcache: this.#cache,\n\t\t});\n\t}\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,SAAA;AAQO,MAAM,eAAN,MAAM,aAAY;IASxB,KAAQ,GAAA,EAA4B,IAAA,EAA4C;QAC/E,MAAM,WAAW;YAAC,aAAA,IAAA,EAAK,UAAS;eAAG,GAAG;SAAA,CAAE,IAAA,CAAK,GAAG;QAEhD,IAAI,aAAA,IAAA,EAAK,QAAO,GAAA,CAAI,QAAQ,GAAG;YAC9B,OAAO,aAAA,IAAA,EAAK,QAAO,GAAA,CAAI,QAAQ;QAChC;QAEA,MAAM,SAAS,KAAK;QAEpB,aAAA,IAAA,EAAK,QAAO,GAAA,CAAI,UAAU,MAAM;QAEhC,IAAI,OAAO,WAAW,YAAY,WAAW,QAAQ,UAAU,QAAQ;YACtE,OAAO,QAAQ,OAAA,CAAQ,MAAM,EAC3B,IAAA,CAAK,CAAC,MAAM;gBACZ,aAAA,IAAA,EAAK,QAAO,GAAA,CAAI,UAAU,CAAC;gBAC3B,OAAO;YACR,CAAC,EACA,KAAA,CAAM,CAAC,QAAQ;gBACf,aAAA,IAAA,EAAK,QAAO,MAAA,CAAO,QAAQ;gBAC3B,MAAM;YACP,CAAC;QACH;QAEA,OAAO;IACR;IAEA,MAAM,MAAA,EAAmB;QACxB,MAAM,YAAY,CAAC;eAAG,aAAA,IAAA,EAAK,UAAS;sDAAI,SAAU,CAAC,CAAE;SAAA,CAAE,IAAA,CAAK,GAAG;QAC/D,IAAI,CAAC,WAAW;YACf,aAAA,IAAA,EAAK,QAAO,KAAA,CAAM;YAClB;QACD;QAEA,KAAA,MAAW,OAAO,aAAA,IAAA,EAAK,QAAO,IAAA,CAAK,EAAG;YACrC,IAAI,IAAI,UAAA,CAAW,SAAS,GAAG;gBAC9B,aAAA,IAAA,EAAK,QAAO,MAAA,CAAO,GAAG;YACvB;QACD;IACD;IAEA,MAAM,MAAA,EAA2B;QAChC,OAAO,IAAI,aAAY;YACtB,QAAQ,CAAC;mBAAG,aAAA,IAAA,EAAK,UAAS;mBAAI,MAAM,OAAA,CAAQ,MAAM,IAAI,SAAS;oBAAC,MAAM;iBAAE;aAAA;YACxE,OAAO,aAAA,IAAA,EAAK;QACb,CAAC;IACF;IAlDA,YAAY,EAAE,MAAA,EAAQ,KAAA,CAAM,CAAA,GAAwB,CAAC,CAAA,CAAG;QAHxD,aAAA,IAAA,EAAA;QACA,aAAA,IAAA,EAAA;QAGC,aAAA,IAAA,EAAK,gDAAU,SAAU,CAAC,CAAA;QAC1B,aAAA,IAAA,EAAK,6CAAS,QAAS,aAAA,GAAA,IAAI,IAAI;IAChC;AAgDD;AAtDC,UAAA,IAAA;AACA,SAAA,IAAA;AAFM,IAAM,cAAN","debugId":null}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/experimental/client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n/* eslint-disable @typescript-eslint/ban-types */\n\nimport type { Simplify, UnionToIntersection } from '@mysten/utils';\nimport { ClientCache } from './cache.js';\nimport type { Experimental_CoreClient } from './core.js';\nimport type {\n\tClientWithExtensions,\n\tExperimental_SuiClientTypes,\n\tSuiClientRegistration,\n} from './types.js';\n\nexport abstract class Experimental_BaseClient {\n\tnetwork: Experimental_SuiClientTypes.Network;\n\tcache = new ClientCache();\n\n\tconstructor({ network }: Experimental_SuiClientTypes.SuiClientOptions) {\n\t\tthis.network = network;\n\t}\n\n\tabstract core: Experimental_CoreClient;\n\n\t$extend<const Registrations extends SuiClientRegistration<this>[]>(\n\t\t...registrations: Registrations\n\t) {\n\t\treturn Object.create(\n\t\t\tthis,\n\t\t\tObject.fromEntries(\n\t\t\t\tregistrations.map((registration) => {\n\t\t\t\t\tif ('experimental_asClientExtension' in registration) {\n\t\t\t\t\t\tconst { name, register } = registration.experimental_asClientExtension();\n\t\t\t\t\t\treturn [name, { value: register(this) }];\n\t\t\t\t\t}\n\t\t\t\t\treturn [registration.name, { value: registration.register(this) }];\n\t\t\t\t}),\n\t\t\t),\n\t\t) as ClientWithExtensions<\n\t\t\tSimplify<\n\t\t\t\tUnionToIntersection<\n\t\t\t\t\t{\n\t\t\t\t\t\t[K in keyof Registrations]: Registrations[K] extends SuiClientRegistration<\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\tinfer Name extends string,\n\t\t\t\t\t\t\tinfer Extension\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t[K2 in Name]: Extension;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: never;\n\t\t\t\t\t}[number]\n\t\t\t\t>\n\t\t\t>,\n\t\t\tthis\n\t\t>;\n\t}\n}\n"],"names":[],"mappings":";;;AAKA,SAAS,mBAAmB;;AAQrB,MAAe,wBAAwB;IAU7C,UAEE;QAFF,IAAA,IAAA,OAAA,UAAA,QAAA,gBAAA,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;YACI,cADJ,QAAA,SAAA,CAAA,KACI;;QAEH,OAAO,OAAO,MAAA,CACb,IAAA,EACA,OAAO,WAAA,CACN,cAAc,GAAA,CAAI,CAAC,iBAAiB;YACnC,IAAI,oCAAoC,cAAc;gBACrD,MAAM,EAAE,IAAA,EAAM,QAAA,CAAS,CAAA,GAAI,aAAa,8BAAA,CAA+B;gBACvE,OAAO;oBAAC;oBAAM;wBAAE,OAAO,SAAS,IAAI;oBAAE,CAAC;iBAAA;YACxC;YACA,OAAO;gBAAC,aAAa,IAAA;gBAAM;oBAAE,OAAO,aAAa,QAAA,CAAS,IAAI;gBAAE,CAAC;aAAA;QAClE,CAAC;IAoBJ;IAtCA,YAAY,EAAE,OAAA,CAAQ,CAAA,CAAiD;QAFvE,IAAA,CAAA,KAAA,GAAQ,oNAAI,cAAA,CAAY;QAGvB,IAAA,CAAK,OAAA,GAAU;IAChB;AAqCD","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/utils/suins.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nconst SUI_NS_NAME_REGEX =\n\t/^(?!.*(^(?!@)|[-.@])($|[-.@]))(?:[a-z0-9-]{0,63}(?:\\.[a-z0-9-]{0,63})*)?@[a-z0-9-]{0,63}$/i;\nconst SUI_NS_DOMAIN_REGEX = /^(?!.*(^|[-.])($|[-.]))(?:[a-z0-9-]{0,63}\\.)+sui$/i;\nconst MAX_SUI_NS_NAME_LENGTH = 235;\n\nexport function isValidSuiNSName(name: string): boolean {\n\tif (name.length > MAX_SUI_NS_NAME_LENGTH) {\n\t\treturn false;\n\t}\n\n\tif (name.includes('@')) {\n\t\treturn SUI_NS_NAME_REGEX.test(name);\n\t}\n\n\treturn SUI_NS_DOMAIN_REGEX.test(name);\n}\n\nexport function normalizeSuiNSName(name: string, format: 'at' | 'dot' = 'at'): string {\n\tconst lowerCase = name.toLowerCase();\n\tlet parts;\n\n\tif (lowerCase.includes('@')) {\n\t\tif (!SUI_NS_NAME_REGEX.test(lowerCase)) {\n\t\t\tthrow new Error(`Invalid SuiNS name ${name}`);\n\t\t}\n\t\tconst [labels, domain] = lowerCase.split('@');\n\t\tparts = [...(labels ? labels.split('.') : []), domain];\n\t} else {\n\t\tif (!SUI_NS_DOMAIN_REGEX.test(lowerCase)) {\n\t\t\tthrow new Error(`Invalid SuiNS name ${name}`);\n\t\t}\n\t\tparts = lowerCase.split('.').slice(0, -1);\n\t}\n\n\tif (format === 'dot') {\n\t\treturn `${parts.join('.')}.sui`;\n\t}\n\n\treturn `${parts.slice(0, -1).join('.')}@${parts[parts.length - 1]}`;\n}\n"],"names":[],"mappings":";;;;AAGA,MAAM,oBACL;AACD,MAAM,sBAAsB;AAC5B,MAAM,yBAAyB;AAExB,SAAS,iBAAiB,IAAA,EAAuB;IACvD,IAAI,KAAK,MAAA,GAAS,wBAAwB;QACzC,OAAO;IACR;IAEA,IAAI,KAAK,QAAA,CAAS,GAAG,GAAG;QACvB,OAAO,kBAAkB,IAAA,CAAK,IAAI;IACnC;IAEA,OAAO,oBAAoB,IAAA,CAAK,IAAI;AACrC;AAEO,SAAS,mBAAmB,IAAA;iBAAc,iEAAuB,MAAc;IACrF,MAAM,YAAY,KAAK,WAAA,CAAY;IACnC,IAAI;IAEJ,IAAI,UAAU,QAAA,CAAS,GAAG,GAAG;QAC5B,IAAI,CAAC,kBAAkB,IAAA,CAAK,SAAS,GAAG;YACvC,MAAM,IAAI,MAAM,sBAA0B,CAAE,MAAN,IAAI;QAC3C;QACA,MAAM,CAAC,QAAQ,MAAM,CAAA,GAAI,UAAU,KAAA,CAAM,GAAG;QAC5C,QAAQ,CAAC;eAAI,SAAS,OAAO,KAAA,CAAM,GAAG,IAAI,CAAC,CAAA;YAAI,MAAM;SAAA;IACtD,OAAO;QACN,IAAI,CAAC,oBAAoB,IAAA,CAAK,SAAS,GAAG;YACzC,MAAM,IAAI,MAAM,sBAA0B,CAAE,MAAN,IAAI;QAC3C;QACA,QAAQ,UAAU,KAAA,CAAM,GAAG,EAAE,KAAA,CAAM,GAAG,CAAA,CAAE;IACzC;IAEA,IAAI,WAAW,OAAO;QACrB,OAAO,GAAkB,OAAf,MAAM,IAAA,CAAK,GAAG,CAAC,EAAA;IAC1B;IAEA,OAAO,UAAG,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,EAAE,IAAA,CAAK,GAAG,CAAC,EAAA,KAA2B,OAAvB,KAAA,CAAM,MAAM,MAAA,GAAS,CAAC,CAAC;AAClE","debugId":null}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/utils/move-registry.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isValidSuiNSName } from './suins.js';\n\n/** The pattern to find an optionally versioned name */\nconst NAME_PATTERN = /^([a-z0-9]+(?:-[a-z0-9]+)*)$/;\n/** The pattern for a valid version number */\nconst VERSION_REGEX = /^\\d+$/;\n/** The maximum size for an app */\nconst MAX_APP_SIZE = 64;\n/** The separator for the name */\nconst NAME_SEPARATOR = '/';\n\nexport const isValidNamedPackage = (name: string): boolean => {\n\tconst parts = name.split(NAME_SEPARATOR);\n\t// The name has to have 2 parts (without-version), or 3 parts (with version).\n\tif (parts.length < 2 || parts.length > 3) return false;\n\n\tconst [org, app, version] = parts; // split by {org} {app} {optional version}\n\n\t// If the version exists, it must be a number.\n\tif (version !== undefined && !VERSION_REGEX.test(version)) return false;\n\t// Check if the org is a valid SuiNS name.\n\tif (!isValidSuiNSName(org)) return false;\n\n\t// Check if the app is a valid name.\n\treturn NAME_PATTERN.test(app) && app.length < MAX_APP_SIZE;\n};\n\n/**\n * Checks if a type contains valid named packages.\n * This DOES NOT check if the type is a valid Move type.\n */\nexport const isValidNamedType = (type: string): boolean => {\n\t// split our type by all possible type delimeters.\n\tconst splitType = type.split(/::|<|>|,/);\n\tfor (const t of splitType) {\n\t\tif (t.includes(NAME_SEPARATOR) && !isValidNamedPackage(t)) return false;\n\t}\n\t// TODO: Add `isValidStructTag` check once it's introduced.\n\treturn true;\n};\n"],"names":[],"mappings":";;;;AAGA,SAAS,wBAAwB;;AAGjC,MAAM,eAAe;AAErB,MAAM,gBAAgB;AAEtB,MAAM,eAAe;AAErB,MAAM,iBAAiB;AAEhB,MAAM,sBAAsB,CAAC,SAA0B;IAC7D,MAAM,QAAQ,KAAK,KAAA,CAAM,cAAc;IAEvC,IAAI,MAAM,MAAA,GAAS,KAAK,MAAM,MAAA,GAAS,EAAG,CAAA,OAAO;IAEjD,MAAM,CAAC,KAAK,KAAK,OAAO,CAAA,GAAI;IAG5B,IAAI,YAAY,KAAA,KAAa,CAAC,cAAc,IAAA,CAAK,OAAO,EAAG,CAAA,OAAO;IAElE,IAAI,EAAC,+NAAA,EAAiB,GAAG,EAAG,CAAA,OAAO;IAGnC,OAAO,aAAa,IAAA,CAAK,GAAG,KAAK,IAAI,MAAA,GAAS;AAC/C;AAMO,MAAM,mBAAmB,CAAC,SAA0B;IAE1D,MAAM,YAAY,KAAK,KAAA,CAAM,UAAU;IACvC,KAAA,MAAW,KAAK,UAAW;QAC1B,IAAI,EAAE,QAAA,CAAS,cAAc,KAAK,CAAC,oBAAoB,CAAC,EAAG,CAAA,OAAO;IACnE;IAEA,OAAO;AACR","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/utils/sui-types.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase58, splitGenericParameters } from '@mysten/bcs';\n\nimport { isValidNamedPackage } from './move-registry.js';\n\nconst TX_DIGEST_LENGTH = 32;\n\n/** Returns whether the tx digest is valid based on the serialization format */\nexport function isValidTransactionDigest(value: string): value is string {\n\ttry {\n\t\tconst buffer = fromBase58(value);\n\t\treturn buffer.length === TX_DIGEST_LENGTH;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\n// TODO - can we automatically sync this with rust length definition?\n// Source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67\n// which uses the Move account address length\n// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .\n\nexport const SUI_ADDRESS_LENGTH = 32;\nexport function isValidSuiAddress(value: string): value is string {\n\treturn isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\n\nexport function isValidSuiObjectId(value: string): boolean {\n\treturn isValidSuiAddress(value);\n}\n\nexport type StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: (string | StructTag)[];\n};\n\nfunction parseTypeTag(type: string): string | StructTag {\n\tif (!type.includes('::')) return type;\n\n\treturn parseStructTag(type);\n}\n\nexport function parseStructTag(type: string): StructTag {\n\tconst [address, module] = type.split('::');\n\n\tconst isMvrPackage = isValidNamedPackage(address);\n\n\tconst rest = type.slice(address.length + module.length + 4);\n\tconst name = rest.includes('<') ? rest.slice(0, rest.indexOf('<')) : rest;\n\tconst typeParams = rest.includes('<')\n\t\t? splitGenericParameters(rest.slice(rest.indexOf('<') + 1, rest.lastIndexOf('>'))).map(\n\t\t\t\t(typeParam) => parseTypeTag(typeParam.trim()),\n\t\t\t)\n\t\t: [];\n\n\treturn {\n\t\taddress: isMvrPackage ? address : normalizeSuiAddress(address),\n\t\tmodule,\n\t\tname,\n\t\ttypeParams,\n\t};\n}\n\nexport function normalizeStructTag(type: string | StructTag): string {\n\tconst { address, module, name, typeParams } =\n\t\ttypeof type === 'string' ? parseStructTag(type) : type;\n\n\tconst formattedTypeParams =\n\t\ttypeParams?.length > 0\n\t\t\t? `<${typeParams\n\t\t\t\t\t.map((typeParam) =>\n\t\t\t\t\t\ttypeof typeParam === 'string' ? typeParam : normalizeStructTag(typeParam),\n\t\t\t\t\t)\n\t\t\t\t\t.join(',')}>`\n\t\t\t: '';\n\n\treturn `${address}::${module}::${name}${formattedTypeParams}`;\n}\n\n/**\n * Perform the following operations:\n * 1. Make the address lower case\n * 2. Prepend `0x` if the string does not start with `0x`.\n * 3. Add more zeros if the length of the address(excluding `0x`) is less than `SUI_ADDRESS_LENGTH`\n *\n * WARNING: if the address value itself starts with `0x`, e.g., `0x0x`, the default behavior\n * is to treat the first `0x` not as part of the address. The default behavior can be overridden by\n * setting `forceAdd0x` to true\n *\n */\nexport function normalizeSuiAddress(value: string, forceAdd0x: boolean = false): string {\n\tlet address = value.toLowerCase();\n\tif (!forceAdd0x && address.startsWith('0x')) {\n\t\taddress = address.slice(2);\n\t}\n\treturn `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, '0')}`;\n}\n\nexport function normalizeSuiObjectId(value: string, forceAdd0x: boolean = false): string {\n\treturn normalizeSuiAddress(value, forceAdd0x);\n}\n\nfunction isHex(value: string): boolean {\n\treturn /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\n\nfunction getHexByteLength(value: string): number {\n\treturn /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\n"],"names":[],"mappings":";;;;;;;;;;AAGA,SAAS,YAAY,8BAA8B;;AAEnD,SAAS,2BAA2B;;;AAEpC,MAAM,mBAAmB;AAGlB,SAAS,yBAAyB,KAAA,EAAgC;IACxE,IAAI;QACH,MAAM,2MAAS,aAAA,EAAW,KAAK;QAC/B,OAAO,OAAO,MAAA,KAAW;IAC1B,EAAA,OAAS,GAAG;QACX,OAAO;IACR;AACD;AAQO,MAAM,qBAAqB;AAC3B,SAAS,kBAAkB,KAAA,EAAgC;IACjE,OAAO,MAAM,KAAK,KAAK,iBAAiB,KAAK,MAAM;AACpD;AAEO,SAAS,mBAAmB,KAAA,EAAwB;IAC1D,OAAO,kBAAkB,KAAK;AAC/B;AASA,SAAS,aAAa,IAAA,EAAkC;IACvD,IAAI,CAAC,KAAK,QAAA,CAAS,IAAI,EAAG,CAAA,OAAO;IAEjC,OAAO,eAAe,IAAI;AAC3B;AAEO,SAAS,eAAe,IAAA,EAAyB;IACvD,MAAM,CAAC,SAAS,MAAM,CAAA,GAAI,KAAK,KAAA,CAAM,IAAI;IAEzC,MAAM,uOAAe,sBAAA,EAAoB,OAAO;IAEhD,MAAM,OAAO,KAAK,KAAA,CAAM,QAAQ,MAAA,GAAS,OAAO,MAAA,GAAS,CAAC;IAC1D,MAAM,OAAO,KAAK,QAAA,CAAS,GAAG,IAAI,KAAK,KAAA,CAAM,GAAG,KAAK,OAAA,CAAQ,GAAG,CAAC,IAAI;IACrE,MAAM,aAAa,KAAK,QAAA,CAAS,GAAG,wMACjC,yBAAA,EAAuB,KAAK,KAAA,CAAM,KAAK,OAAA,CAAQ,GAAG,IAAI,GAAG,KAAK,WAAA,CAAY,GAAG,CAAC,CAAC,EAAE,GAAA,CACjF,CAAC,YAAc,aAAa,UAAU,IAAA,CAAK,CAAC,KAE5C,CAAC,CAAA;IAEJ,OAAO;QACN,SAAS,eAAe,UAAU,oBAAoB,OAAO;QAC7D;QACA;QACA;IACD;AACD;AAEO,SAAS,mBAAmB,IAAA,EAAkC;IACpE,MAAM,EAAE,OAAA,EAAS,MAAA,EAAQ,IAAA,EAAM,UAAA,CAAW,CAAA,GACzC,OAAO,SAAS,WAAW,eAAe,IAAI,IAAI;IAEnD,MAAM,+EACL,WAAY,MAAA,IAAS,IAClB,IAIU,OAJN,WACH,GAAA,CAAI,CAAC,YACL,OAAO,cAAc,WAAW,YAAY,mBAAmB,SAAS,GAExE,IAAA,CAAK,GAAG,CAAC,EAAA,OACV;IAEJ,OAAO,UAAG,OAAO,EAAA,MAAgB,IAAI,GAAf,MAAM,EAAA,mBAA+B,OAAnB,mBAAmB;AAC5D;AAaO,SAAS,oBAAoB,KAAA;qBAAe,iEAAsB,OAAe;IACvF,IAAI,UAAU,MAAM,WAAA,CAAY;IAChC,IAAI,CAAC,cAAc,QAAQ,UAAA,CAAW,IAAI,GAAG;QAC5C,UAAU,QAAQ,KAAA,CAAM,CAAC;IAC1B;IACA,OAAO,KAAkD,OAA7C,QAAQ,QAAA,CAAS,qBAAqB,GAAG,GAAG,CAAC;AAC1D;AAEO,SAAS,qBAAqB,KAAA;qBAAe,iEAAsB,OAAe;IACxF,OAAO,oBAAoB,OAAO,UAAU;AAC7C;AAEA,SAAS,MAAM,KAAA,EAAwB;IACtC,OAAO,yBAAyB,IAAA,CAAK,KAAK,KAAK,MAAM,MAAA,GAAS,MAAM;AACrE;AAEA,SAAS,iBAAiB,KAAA,EAAuB;IAChD,OAAO,WAAW,IAAA,CAAK,KAAK,IAAA,CAAK,MAAM,MAAA,GAAS,CAAA,IAAK,IAAI,MAAM,MAAA,GAAS;AACzE","debugId":null}},
    {"offset": {"line": 273, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/bcs/type-tag-serializer.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { splitGenericParameters } from '@mysten/bcs';\n\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { TypeTag } from './types.js';\n\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\n\nexport class TypeTagSerializer {\n\tstatic parseFromStr(str: string, normalizeAddress = false): TypeTag {\n\t\tif (str === 'address') {\n\t\t\treturn { address: null };\n\t\t} else if (str === 'bool') {\n\t\t\treturn { bool: null };\n\t\t} else if (str === 'u8') {\n\t\t\treturn { u8: null };\n\t\t} else if (str === 'u16') {\n\t\t\treturn { u16: null };\n\t\t} else if (str === 'u32') {\n\t\t\treturn { u32: null };\n\t\t} else if (str === 'u64') {\n\t\t\treturn { u64: null };\n\t\t} else if (str === 'u128') {\n\t\t\treturn { u128: null };\n\t\t} else if (str === 'u256') {\n\t\t\treturn { u256: null };\n\t\t} else if (str === 'signer') {\n\t\t\treturn { signer: null };\n\t\t}\n\n\t\tconst vectorMatch = str.match(VECTOR_REGEX);\n\t\tif (vectorMatch) {\n\t\t\treturn {\n\t\t\t\tvector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress),\n\t\t\t};\n\t\t}\n\n\t\tconst structMatch = str.match(STRUCT_REGEX);\n\t\tif (structMatch) {\n\t\t\tconst address = normalizeAddress ? normalizeSuiAddress(structMatch[1]) : structMatch[1];\n\t\t\treturn {\n\t\t\t\tstruct: {\n\t\t\t\t\taddress,\n\t\t\t\t\tmodule: structMatch[2],\n\t\t\t\t\tname: structMatch[3],\n\t\t\t\t\ttypeParams:\n\t\t\t\t\t\tstructMatch[5] === undefined\n\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t: TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tthrow new Error(`Encountered unexpected token when parsing type args for ${str}`);\n\t}\n\n\tstatic parseStructTypeArgs(str: string, normalizeAddress = false): TypeTag[] {\n\t\treturn splitGenericParameters(str).map((tok) =>\n\t\t\tTypeTagSerializer.parseFromStr(tok, normalizeAddress),\n\t\t);\n\t}\n\n\tstatic tagToString(tag: TypeTag): string {\n\t\tif ('bool' in tag) {\n\t\t\treturn 'bool';\n\t\t}\n\t\tif ('u8' in tag) {\n\t\t\treturn 'u8';\n\t\t}\n\t\tif ('u16' in tag) {\n\t\t\treturn 'u16';\n\t\t}\n\t\tif ('u32' in tag) {\n\t\t\treturn 'u32';\n\t\t}\n\t\tif ('u64' in tag) {\n\t\t\treturn 'u64';\n\t\t}\n\t\tif ('u128' in tag) {\n\t\t\treturn 'u128';\n\t\t}\n\t\tif ('u256' in tag) {\n\t\t\treturn 'u256';\n\t\t}\n\t\tif ('address' in tag) {\n\t\t\treturn 'address';\n\t\t}\n\t\tif ('signer' in tag) {\n\t\t\treturn 'signer';\n\t\t}\n\t\tif ('vector' in tag) {\n\t\t\treturn `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n\t\t}\n\t\tif ('struct' in tag) {\n\t\t\tconst struct = tag.struct;\n\t\t\tconst typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(', ');\n\t\t\treturn `${struct.address}::${struct.module}::${struct.name}${\n\t\t\t\ttypeParams ? `<${typeParams}>` : ''\n\t\t\t}`;\n\t\t}\n\t\tthrow new Error('Invalid TypeTag');\n\t}\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,8BAA8B;AAEvC,SAAS,2BAA2B;;;AAGpC,MAAM,eAAe;AACrB,MAAM,eAAe;AAEd,MAAM,kBAAkB;IAC9B,OAAO,aAAa,GAAA,EAAgD;+BAAnC,iEAAmB;QACnD,IAAI,QAAQ,WAAW;YACtB,OAAO;gBAAE,SAAS;YAAK;QACxB,OAAA,IAAW,QAAQ,QAAQ;YAC1B,OAAO;gBAAE,MAAM;YAAK;QACrB,OAAA,IAAW,QAAQ,MAAM;YACxB,OAAO;gBAAE,IAAI;YAAK;QACnB,OAAA,IAAW,QAAQ,OAAO;YACzB,OAAO;gBAAE,KAAK;YAAK;QACpB,OAAA,IAAW,QAAQ,OAAO;YACzB,OAAO;gBAAE,KAAK;YAAK;QACpB,OAAA,IAAW,QAAQ,OAAO;YACzB,OAAO;gBAAE,KAAK;YAAK;QACpB,OAAA,IAAW,QAAQ,QAAQ;YAC1B,OAAO;gBAAE,MAAM;YAAK;QACrB,OAAA,IAAW,QAAQ,QAAQ;YAC1B,OAAO;gBAAE,MAAM;YAAK;QACrB,OAAA,IAAW,QAAQ,UAAU;YAC5B,OAAO;gBAAE,QAAQ;YAAK;QACvB;QAEA,MAAM,cAAc,IAAI,KAAA,CAAM,YAAY;QAC1C,IAAI,aAAa;YAChB,OAAO;gBACN,QAAQ,kBAAkB,YAAA,CAAa,WAAA,CAAY,CAAC,CAAA,EAAG,gBAAgB;YACxE;QACD;QAEA,MAAM,cAAc,IAAI,KAAA,CAAM,YAAY;QAC1C,IAAI,aAAa;YAChB,MAAM,UAAU,uOAAmB,sBAAA,EAAoB,WAAA,CAAY,CAAC,CAAC,IAAI,WAAA,CAAY,CAAC,CAAA;YACtF,OAAO;gBACN,QAAQ;oBACP;oBACA,QAAQ,WAAA,CAAY,CAAC,CAAA;oBACrB,MAAM,WAAA,CAAY,CAAC,CAAA;oBACnB,YACC,WAAA,CAAY,CAAC,CAAA,KAAM,KAAA,IAChB,CAAC,CAAA,GACD,kBAAkB,mBAAA,CAAoB,WAAA,CAAY,CAAC,CAAA,EAAG,gBAAgB;gBAC3E;YACD;QACD;QAEA,MAAM,IAAI,MAAM,2DAA8D,CAAE,MAAL,GAAG;IAC/E;IAEA,OAAO,oBAAoB,GAAA,EAAkD;+BAArC,iEAAmB;QAC1D,2MAAO,yBAAA,EAAuB,GAAG,EAAE,GAAA,CAAI,CAAC,MACvC,kBAAkB,YAAA,CAAa,KAAK,gBAAgB;IAEtD;IAEA,OAAO,YAAY,GAAA,EAAsB;QACxC,IAAI,UAAU,KAAK;YAClB,OAAO;QACR;QACA,IAAI,QAAQ,KAAK;YAChB,OAAO;QACR;QACA,IAAI,SAAS,KAAK;YACjB,OAAO;QACR;QACA,IAAI,SAAS,KAAK;YACjB,OAAO;QACR;QACA,IAAI,SAAS,KAAK;YACjB,OAAO;QACR;QACA,IAAI,UAAU,KAAK;YAClB,OAAO;QACR;QACA,IAAI,UAAU,KAAK;YAClB,OAAO;QACR;QACA,IAAI,aAAa,KAAK;YACrB,OAAO;QACR;QACA,IAAI,YAAY,KAAK;YACpB,OAAO;QACR;QACA,IAAI,YAAY,KAAK;YACpB,OAAO,UAAmD,OAAzC,kBAAkB,WAAA,CAAY,IAAI,MAAM,CAAC,EAAA;QAC3D;QACA,IAAI,YAAY,KAAK;YACpB,MAAM,SAAS,IAAI,MAAA;YACnB,MAAM,aAAa,OAAO,UAAA,CAAW,GAAA,CAAI,kBAAkB,WAAW,EAAE,IAAA,CAAK,IAAI;YACjF,OAAO,UAAG,OAAO,OAAO,EAAA,MAAuB,OAAlB,OAAO,MAAM,EAAA,oBAAY,IAAI,EAE1D,OADC,aAAa,IAAc,OAAV,UAAU,EAAA,OAAM,EAClC;QACD;QACA,MAAM,IAAI,MAAM,iBAAiB;IAClC;AACD","debugId":null}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/bcs/bcs.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType, BcsTypeOptions } from '@mysten/bcs';\nimport { bcs, fromBase58, fromBase64, fromHex, toBase58, toBase64, toHex } from '@mysten/bcs';\n\nimport { isValidSuiAddress, normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../utils/sui-types.js';\nimport { TypeTagSerializer } from './type-tag-serializer.js';\nimport type { TypeTag as TypeTagType } from './types.js';\n\nfunction unsafe_u64(options?: BcsTypeOptions<number>) {\n\treturn bcs\n\t\t.u64({\n\t\t\tname: 'unsafe_u64',\n\t\t\t...(options as object),\n\t\t})\n\t\t.transform({\n\t\t\tinput: (val: number | string) => val,\n\t\t\toutput: (val) => Number(val),\n\t\t});\n}\n\nfunction optionEnum<T extends BcsType<any, any>>(type: T) {\n\treturn bcs.enum('Option', {\n\t\tNone: null,\n\t\tSome: type,\n\t});\n}\n\nexport const Address = bcs.bytes(SUI_ADDRESS_LENGTH).transform({\n\tvalidate: (val) => {\n\t\tconst address = typeof val === 'string' ? val : toHex(val);\n\t\tif (!address || !isValidSuiAddress(normalizeSuiAddress(address))) {\n\t\t\tthrow new Error(`Invalid Sui address ${address}`);\n\t\t}\n\t},\n\tinput: (val: string | Uint8Array) =>\n\t\ttypeof val === 'string' ? fromHex(normalizeSuiAddress(val)) : val,\n\toutput: (val) => normalizeSuiAddress(toHex(val)),\n});\n\nexport const ObjectDigest = bcs.vector(bcs.u8()).transform({\n\tname: 'ObjectDigest',\n\tinput: (value: string) => fromBase58(value),\n\toutput: (value) => toBase58(new Uint8Array(value)),\n\tvalidate: (value) => {\n\t\tif (fromBase58(value).length !== 32) {\n\t\t\tthrow new Error('ObjectDigest must be 32 bytes');\n\t\t}\n\t},\n});\n\nexport const SuiObjectRef = bcs.struct('SuiObjectRef', {\n\tobjectId: Address,\n\tversion: bcs.u64(),\n\tdigest: ObjectDigest,\n});\n\nexport const SharedObjectRef = bcs.struct('SharedObjectRef', {\n\tobjectId: Address,\n\tinitialSharedVersion: bcs.u64(),\n\tmutable: bcs.bool(),\n});\n\nexport const ObjectArg = bcs.enum('ObjectArg', {\n\tImmOrOwnedObject: SuiObjectRef,\n\tSharedObject: SharedObjectRef,\n\tReceiving: SuiObjectRef,\n});\n\nexport const Owner = bcs.enum('Owner', {\n\tAddressOwner: Address,\n\tObjectOwner: Address,\n\tShared: bcs.struct('Shared', {\n\t\tinitialSharedVersion: bcs.u64(),\n\t}),\n\tImmutable: null,\n\tConsensusV2: bcs.struct('ConsensusV2', {\n\t\tauthenticator: bcs.enum('Authenticator', {\n\t\t\tSingleOwner: Address,\n\t\t}),\n\t\tstartVersion: bcs.u64(),\n\t}),\n});\n\nexport const CallArg = bcs.enum('CallArg', {\n\tPure: bcs.struct('Pure', {\n\t\tbytes: bcs.vector(bcs.u8()).transform({\n\t\t\tinput: (val: string | Uint8Array) => (typeof val === 'string' ? fromBase64(val) : val),\n\t\t\toutput: (val) => toBase64(new Uint8Array(val)),\n\t\t}),\n\t}),\n\tObject: ObjectArg,\n});\n\nconst InnerTypeTag: BcsType<TypeTagType, TypeTagType> = bcs.enum('TypeTag', {\n\tbool: null,\n\tu8: null,\n\tu64: null,\n\tu128: null,\n\taddress: null,\n\tsigner: null,\n\tvector: bcs.lazy(() => InnerTypeTag),\n\tstruct: bcs.lazy(() => StructTag),\n\tu16: null,\n\tu32: null,\n\tu256: null,\n}) as BcsType<TypeTagType>;\n\nexport const TypeTag = InnerTypeTag.transform({\n\tinput: (typeTag: string | TypeTagType) =>\n\t\ttypeof typeTag === 'string' ? TypeTagSerializer.parseFromStr(typeTag, true) : typeTag,\n\toutput: (typeTag: TypeTagType) => TypeTagSerializer.tagToString(typeTag),\n});\n\nexport const Argument = bcs.enum('Argument', {\n\tGasCoin: null,\n\tInput: bcs.u16(),\n\tResult: bcs.u16(),\n\tNestedResult: bcs.tuple([bcs.u16(), bcs.u16()]),\n});\n\nexport const ProgrammableMoveCall = bcs.struct('ProgrammableMoveCall', {\n\tpackage: Address,\n\tmodule: bcs.string(),\n\tfunction: bcs.string(),\n\ttypeArguments: bcs.vector(TypeTag),\n\targuments: bcs.vector(Argument),\n});\n\nexport const Command = bcs.enum('Command', {\n\t/**\n\t * A Move Call - any public Move function can be called via\n\t * this transaction. The results can be used that instant to pass\n\t * into the next transaction.\n\t */\n\tMoveCall: ProgrammableMoveCall,\n\t/**\n\t * Transfer vector of objects to a receiver.\n\t */\n\tTransferObjects: bcs.struct('TransferObjects', {\n\t\tobjects: bcs.vector(Argument),\n\t\taddress: Argument,\n\t}),\n\t// /**\n\t//  * Split `amount` from a `coin`.\n\t//  */\n\tSplitCoins: bcs.struct('SplitCoins', {\n\t\tcoin: Argument,\n\t\tamounts: bcs.vector(Argument),\n\t}),\n\t// /**\n\t//  * Merge Vector of Coins (`sources`) into a `destination`.\n\t//  */\n\tMergeCoins: bcs.struct('MergeCoins', {\n\t\tdestination: Argument,\n\t\tsources: bcs.vector(Argument),\n\t}),\n\t// /**\n\t//  * Publish a Move module.\n\t//  */\n\tPublish: bcs.struct('Publish', {\n\t\tmodules: bcs.vector(\n\t\t\tbcs.vector(bcs.u8()).transform({\n\t\t\t\tinput: (val: string | Uint8Array) => (typeof val === 'string' ? fromBase64(val) : val),\n\t\t\t\toutput: (val) => toBase64(new Uint8Array(val)),\n\t\t\t}),\n\t\t),\n\t\tdependencies: bcs.vector(Address),\n\t}),\n\t// /**\n\t//  * Build a vector of objects using the input arguments.\n\t//  * It is impossible to export construct a `vector<T: key>` otherwise,\n\t//  * so this call serves a utility function.\n\t//  */\n\tMakeMoveVec: bcs.struct('MakeMoveVec', {\n\t\ttype: optionEnum(TypeTag).transform({\n\t\t\tinput: (val: string | null) =>\n\t\t\t\tval === null\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tNone: true,\n\t\t\t\t\t\t}\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tSome: val,\n\t\t\t\t\t\t},\n\t\t\toutput: (val) => val.Some ?? null,\n\t\t}),\n\t\telements: bcs.vector(Argument),\n\t}),\n\tUpgrade: bcs.struct('Upgrade', {\n\t\tmodules: bcs.vector(\n\t\t\tbcs.vector(bcs.u8()).transform({\n\t\t\t\tinput: (val: string | Uint8Array) => (typeof val === 'string' ? fromBase64(val) : val),\n\t\t\t\toutput: (val) => toBase64(new Uint8Array(val)),\n\t\t\t}),\n\t\t),\n\t\tdependencies: bcs.vector(Address),\n\t\tpackage: Address,\n\t\tticket: Argument,\n\t}),\n});\n\nexport const ProgrammableTransaction = bcs.struct('ProgrammableTransaction', {\n\tinputs: bcs.vector(CallArg),\n\tcommands: bcs.vector(Command),\n});\n\nexport const TransactionKind = bcs.enum('TransactionKind', {\n\tProgrammableTransaction: ProgrammableTransaction,\n\tChangeEpoch: null,\n\tGenesis: null,\n\tConsensusCommitPrologue: null,\n});\n\nexport const TransactionExpiration = bcs.enum('TransactionExpiration', {\n\tNone: null,\n\tEpoch: unsafe_u64(),\n});\n\nexport const StructTag = bcs.struct('StructTag', {\n\taddress: Address,\n\tmodule: bcs.string(),\n\tname: bcs.string(),\n\ttypeParams: bcs.vector(InnerTypeTag),\n});\n\nexport const GasData = bcs.struct('GasData', {\n\tpayment: bcs.vector(SuiObjectRef),\n\towner: Address,\n\tprice: bcs.u64(),\n\tbudget: bcs.u64(),\n});\n\nexport const TransactionDataV1 = bcs.struct('TransactionDataV1', {\n\tkind: TransactionKind,\n\tsender: Address,\n\tgasData: GasData,\n\texpiration: TransactionExpiration,\n});\n\nexport const TransactionData = bcs.enum('TransactionData', {\n\tV1: TransactionDataV1,\n});\n\nexport const IntentScope = bcs.enum('IntentScope', {\n\tTransactionData: null,\n\tTransactionEffects: null,\n\tCheckpointSummary: null,\n\tPersonalMessage: null,\n});\n\nexport const IntentVersion = bcs.enum('IntentVersion', {\n\tV0: null,\n});\n\nexport const AppId = bcs.enum('AppId', {\n\tSui: null,\n});\n\nexport const Intent = bcs.struct('Intent', {\n\tscope: IntentScope,\n\tversion: IntentVersion,\n\tappId: AppId,\n});\n\nexport function IntentMessage<T extends BcsType<any>>(T: T) {\n\treturn bcs.struct(`IntentMessage<${T.name}>`, {\n\t\tintent: Intent,\n\t\tvalue: T,\n\t});\n}\n\nexport const CompressedSignature = bcs.enum('CompressedSignature', {\n\tED25519: bcs.fixedArray(64, bcs.u8()),\n\tSecp256k1: bcs.fixedArray(64, bcs.u8()),\n\tSecp256r1: bcs.fixedArray(64, bcs.u8()),\n\tZkLogin: bcs.vector(bcs.u8()),\n});\n\nexport const PublicKey = bcs.enum('PublicKey', {\n\tED25519: bcs.fixedArray(32, bcs.u8()),\n\tSecp256k1: bcs.fixedArray(33, bcs.u8()),\n\tSecp256r1: bcs.fixedArray(33, bcs.u8()),\n\tZkLogin: bcs.vector(bcs.u8()),\n});\n\nexport const MultiSigPkMap = bcs.struct('MultiSigPkMap', {\n\tpubKey: PublicKey,\n\tweight: bcs.u8(),\n});\n\nexport const MultiSigPublicKey = bcs.struct('MultiSigPublicKey', {\n\tpk_map: bcs.vector(MultiSigPkMap),\n\tthreshold: bcs.u16(),\n});\n\nexport const MultiSig = bcs.struct('MultiSig', {\n\tsigs: bcs.vector(CompressedSignature),\n\tbitmap: bcs.u16(),\n\tmultisig_pk: MultiSigPublicKey,\n});\n\nexport const base64String = bcs.vector(bcs.u8()).transform({\n\tinput: (val: string | Uint8Array) => (typeof val === 'string' ? fromBase64(val) : val),\n\toutput: (val) => toBase64(new Uint8Array(val)),\n});\n\nexport const SenderSignedTransaction = bcs.struct('SenderSignedTransaction', {\n\tintentMessage: IntentMessage(TransactionData),\n\ttxSignatures: bcs.vector(base64String),\n});\n\nexport const SenderSignedData = bcs.vector(SenderSignedTransaction, {\n\tname: 'SenderSignedData',\n});\n\nexport const PasskeyAuthenticator = bcs.struct('PasskeyAuthenticator', {\n\tauthenticatorData: bcs.vector(bcs.u8()),\n\tclientDataJson: bcs.string(),\n\tuserSignature: bcs.vector(bcs.u8()),\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,SAAS,KAAK,YAAY,YAAY,SAAS,UAAU,UAAU,aAAa;;;;AAEhF,SAAS,mBAAmB,qBAAqB,0BAA0B;AAC3E,SAAS,yBAAyB;;;;AAGlC,SAAS,WAAW,OAAA,EAAkC;IACrD,qMAAO,MAAA,CACL,GAAA,CAAI;QACJ,MAAM;QACN,GAAI,OAAA;IACL,CAAC,EACA,SAAA,CAAU;QACV,OAAO,CAAC,MAAyB;QACjC,QAAQ,CAAC,MAAQ,OAAO,GAAG;IAC5B,CAAC;AACH;AAEA,SAAS,WAAwC,IAAA,EAAS;IACzD,qMAAO,MAAA,CAAI,IAAA,CAAK,UAAU;QACzB,MAAM;QACN,MAAM;IACP,CAAC;AACF;AAEO,MAAM,wMAAU,MAAA,CAAI,KAAA,iNAAM,qBAAkB,EAAE,SAAA,CAAU;IAC9D,UAAU,CAAC,QAAQ;QAClB,MAAM,UAAU,OAAO,QAAQ,WAAW,uMAAM,SAAA,EAAM,GAAG;QACzD,IAAI,CAAC,WAAW,qNAAC,oBAAA,sNAAkB,sBAAA,EAAoB,OAAO,CAAC,GAAG;YACjE,MAAM,IAAI,MAAM,uBAA8B,CAAE,MAAT,OAAO;QAC/C;IACD;IACA,OAAO,CAAC,MACP,OAAO,QAAQ,6MAAW,UAAA,sNAAQ,sBAAA,EAAoB,GAAG,CAAC,IAAI;IAC/D,QAAQ,CAAC,yNAAQ,uBAAA,oMAAoB,QAAA,EAAM,GAAG,CAAC;AAChD,CAAC;AAEM,MAAM,6MAAe,MAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC,EAAE,SAAA,CAAU;IAC1D,MAAM;IACN,OAAO,CAAC,0MAAkB,aAAA,EAAW,KAAK;IAC1C,QAAQ,CAAC,0MAAU,WAAA,EAAS,IAAI,WAAW,KAAK,CAAC;IACjD,UAAU,CAAC,UAAU;QACpB,qMAAI,cAAA,EAAW,KAAK,EAAE,MAAA,KAAW,IAAI;YACpC,MAAM,IAAI,MAAM,+BAA+B;QAChD;IACD;AACD,CAAC;AAEM,MAAM,6MAAe,MAAA,CAAI,MAAA,CAAO,gBAAgB;IACtD,UAAU;IACV,uMAAS,MAAA,CAAI,GAAA,CAAI;IACjB,QAAQ;AACT,CAAC;AAEM,MAAM,gNAAkB,MAAA,CAAI,MAAA,CAAO,mBAAmB;IAC5D,UAAU;IACV,sBAAsB,oMAAA,CAAI,GAAA,CAAI;IAC9B,uMAAS,MAAA,CAAI,IAAA,CAAK;AACnB,CAAC;AAEM,MAAM,0MAAY,MAAA,CAAI,IAAA,CAAK,aAAa;IAC9C,kBAAkB;IAClB,cAAc;IACd,WAAW;AACZ,CAAC;AAEM,MAAM,sMAAQ,MAAA,CAAI,IAAA,CAAK,SAAS;IACtC,cAAc;IACd,aAAa;IACb,sMAAQ,MAAA,CAAI,MAAA,CAAO,UAAU;QAC5B,oNAAsB,MAAA,CAAI,GAAA,CAAI;IAC/B,CAAC;IACD,WAAW;IACX,2MAAa,MAAA,CAAI,MAAA,CAAO,eAAe;QACtC,6MAAe,MAAA,CAAI,IAAA,CAAK,iBAAiB;YACxC,aAAa;QACd,CAAC;QACD,4MAAc,MAAA,CAAI,GAAA,CAAI;IACvB,CAAC;AACF,CAAC;AAEM,MAAM,wMAAU,MAAA,CAAI,IAAA,CAAK,WAAW;IAC1C,oMAAM,MAAA,CAAI,MAAA,CAAO,QAAQ;QACxB,qMAAO,MAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC,EAAE,SAAA,CAAU;YACrC,OAAO,CAAC,MAA8B,OAAO,QAAQ,6MAAW,aAAA,EAAW,GAAG,IAAI;YAClF,QAAQ,CAAC,wMAAQ,WAAA,EAAS,IAAI,WAAW,GAAG,CAAC;QAC9C,CAAC;IACF,CAAC;IACD,QAAQ;AACT,CAAC;AAED,MAAM,6MAAkD,MAAA,CAAI,IAAA,CAAK,WAAW;IAC3E,MAAM;IACN,IAAI;IACJ,KAAK;IACL,MAAM;IACN,SAAS;IACT,QAAQ;IACR,QAAQ,oMAAA,CAAI,IAAA,CAAK,IAAM,YAAY;IACnC,sMAAQ,MAAA,CAAI,IAAA,CAAK,IAAM,SAAS;IAChC,KAAK;IACL,KAAK;IACL,MAAM;AACP,CAAC;AAEM,MAAM,UAAU,aAAa,SAAA,CAAU;IAC7C,OAAO,CAAC,UACP,OAAO,YAAY,sOAAW,oBAAA,CAAkB,YAAA,CAAa,SAAS,IAAI,IAAI;IAC/E,QAAQ,CAAC,qOAAyB,oBAAA,CAAkB,WAAA,CAAY,OAAO;AACxE,CAAC;AAEM,MAAM,yMAAW,MAAA,CAAI,IAAA,CAAK,YAAY;IAC5C,SAAS;IACT,qMAAO,MAAA,CAAI,GAAA,CAAI;IACf,sMAAQ,MAAA,CAAI,GAAA,CAAI;IAChB,4MAAc,MAAA,CAAI,KAAA,CAAM;sMAAC,MAAA,CAAI,GAAA,CAAI;sMAAG,MAAA,CAAI,GAAA,CAAI,CAAC;KAAC;AAC/C,CAAC;AAEM,MAAM,qNAAuB,MAAA,CAAI,MAAA,CAAO,wBAAwB;IACtE,SAAS;IACT,sMAAQ,MAAA,CAAI,MAAA,CAAO;IACnB,wMAAU,MAAA,CAAI,MAAA,CAAO;IACrB,6MAAe,MAAA,CAAI,MAAA,CAAO,OAAO;IACjC,WAAW,oMAAA,CAAI,MAAA,CAAO,QAAQ;AAC/B,CAAC;AAEM,MAAM,wMAAU,MAAA,CAAI,IAAA,CAAK,WAAW;IAAA;;;;GAAA,GAM1C,UAAU;IAAA;;GAAA,GAIV,+MAAiB,MAAA,CAAI,MAAA,CAAO,mBAAmB;QAC9C,uMAAS,MAAA,CAAI,MAAA,CAAO,QAAQ;QAC5B,SAAS;IACV,CAAC;IAAA,MAAA;IAAA,mCAAA;IAAA,MAAA;IAID,0MAAY,MAAA,CAAI,MAAA,CAAO,cAAc;QACpC,MAAM;QACN,uMAAS,MAAA,CAAI,MAAA,CAAO,QAAQ;IAC7B,CAAC;IAAA,MAAA;IAAA,6DAAA;IAAA,MAAA;IAID,0MAAY,MAAA,CAAI,MAAA,CAAO,cAAc;QACpC,aAAa;QACb,uMAAS,MAAA,CAAI,MAAA,CAAO,QAAQ;IAC7B,CAAC;IAAA,MAAA;IAAA,4BAAA;IAAA,MAAA;IAID,uMAAS,MAAA,CAAI,MAAA,CAAO,WAAW;QAC9B,uMAAS,MAAA,CAAI,MAAA,+LACZ,MAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC,EAAE,SAAA,CAAU;YAC9B,OAAO,CAAC,MAA8B,OAAO,QAAQ,6MAAW,aAAA,EAAW,GAAG,IAAI;YAClF,QAAQ,CAAC,MAAQ,6MAAA,EAAS,IAAI,WAAW,GAAG,CAAC;QAC9C,CAAC;QAEF,4MAAc,MAAA,CAAI,MAAA,CAAO,OAAO;IACjC,CAAC;IAAA,MAAA;IAAA,0DAAA;IAAA,wEAAA;IAAA,6CAAA;IAAA,MAAA;IAMD,2MAAa,MAAA,CAAI,MAAA,CAAO,eAAe;QACtC,MAAM,WAAW,OAAO,EAAE,SAAA,CAAU;YACnC,OAAO,CAAC,MACP,QAAQ,OACL;oBACA,MAAM;gBACP,IACC;oBACA,MAAM;gBACP;YACH,QAAQ,CAAC;oBAAQ;wCAAI,IAAA,iDAAQ;;QAC9B,CAAC;QACD,wMAAU,MAAA,CAAI,MAAA,CAAO,QAAQ;IAC9B,CAAC;IACD,uMAAS,MAAA,CAAI,MAAA,CAAO,WAAW;QAC9B,uMAAS,MAAA,CAAI,MAAA,CACZ,oMAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC,EAAE,SAAA,CAAU;YAC9B,OAAO,CAAC,MAA8B,OAAO,QAAQ,6MAAW,aAAA,EAAW,GAAG,IAAI;YAClF,QAAQ,CAAC,OAAQ,4MAAA,EAAS,IAAI,WAAW,GAAG,CAAC;QAC9C,CAAC;QAEF,4MAAc,MAAA,CAAI,MAAA,CAAO,OAAO;QAChC,SAAS;QACT,QAAQ;IACT,CAAC;AACF,CAAC;AAEM,MAAM,wNAA0B,MAAA,CAAI,MAAA,CAAO,2BAA2B;IAC5E,sMAAQ,MAAA,CAAI,MAAA,CAAO,OAAO;IAC1B,wMAAU,MAAA,CAAI,MAAA,CAAO,OAAO;AAC7B,CAAC;AAEM,MAAM,gNAAkB,MAAA,CAAI,IAAA,CAAK,mBAAmB;IAC1D;IACA,aAAa;IACb,SAAS;IACT,yBAAyB;AAC1B,CAAC;AAEM,MAAM,sNAAwB,MAAA,CAAI,IAAA,CAAK,yBAAyB;IACtE,MAAM;IACN,OAAO,WAAW;AACnB,CAAC;AAEM,MAAM,0MAAY,MAAA,CAAI,MAAA,CAAO,aAAa;IAChD,SAAS;IACT,sMAAQ,MAAA,CAAI,MAAA,CAAO;IACnB,mMAAM,OAAA,CAAI,MAAA,CAAO;IACjB,0MAAY,MAAA,CAAI,MAAA,CAAO,YAAY;AACpC,CAAC;AAEM,MAAM,wMAAU,MAAA,CAAI,MAAA,CAAO,WAAW;IAC5C,uMAAS,MAAA,CAAI,MAAA,CAAO,YAAY;IAChC,OAAO;IACP,qMAAO,MAAA,CAAI,GAAA,CAAI;IACf,sMAAQ,MAAA,CAAI,GAAA,CAAI;AACjB,CAAC;AAEM,MAAM,kNAAoB,MAAA,CAAI,MAAA,CAAO,qBAAqB;IAChE,MAAM;IACN,QAAQ;IACR,SAAS;IACT,YAAY;AACb,CAAC;AAEM,MAAM,gNAAkB,MAAA,CAAI,IAAA,CAAK,mBAAmB;IAC1D,IAAI;AACL,CAAC;AAEM,MAAM,4MAAc,MAAA,CAAI,IAAA,CAAK,eAAe;IAClD,iBAAiB;IACjB,oBAAoB;IACpB,mBAAmB;IACnB,iBAAiB;AAClB,CAAC;AAEM,MAAM,8MAAgB,MAAA,CAAI,IAAA,CAAK,iBAAiB;IACtD,IAAI;AACL,CAAC;AAEM,MAAM,sMAAQ,MAAA,CAAI,IAAA,CAAK,SAAS;IACtC,KAAK;AACN,CAAC;AAEM,MAAM,SAAS,oMAAA,CAAI,MAAA,CAAO,UAAU;IAC1C,OAAO;IACP,SAAS;IACT,OAAO;AACR,CAAC;AAEM,SAAS,cAAsC,CAAA,EAAM;IAC3D,oMAAO,OAAA,CAAI,MAAA,CAAO,iBAAuB,OAAN,EAAE,IAAI,EAAA,MAAK;QAC7C,QAAQ;QACR,OAAO;IACR,CAAC;AACF;AAEO,MAAM,oNAAsB,MAAA,CAAI,IAAA,CAAK,uBAAuB;IAClE,uMAAS,MAAA,CAAI,UAAA,CAAW,kMAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACpC,yMAAW,MAAA,CAAI,UAAA,CAAW,kMAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACtC,yMAAW,MAAA,CAAI,UAAA,CAAW,kMAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACtC,sMAAS,OAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC;AAC7B,CAAC;AAEM,MAAM,0MAAY,MAAA,CAAI,IAAA,CAAK,aAAa;IAC9C,uMAAS,MAAA,CAAI,UAAA,CAAW,kMAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACpC,yMAAW,MAAA,CAAI,UAAA,CAAW,IAAI,oMAAA,CAAI,EAAA,CAAG,CAAC;IACtC,yMAAW,MAAA,CAAI,UAAA,CAAW,kMAAI,MAAA,CAAI,EAAA,CAAG,CAAC;IACtC,SAAS,oMAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC;AAC7B,CAAC;AAEM,MAAM,8MAAgB,MAAA,CAAI,MAAA,CAAO,iBAAiB;IACxD,QAAQ;IACR,sMAAQ,MAAA,CAAI,EAAA,CAAG;AAChB,CAAC;AAEM,MAAM,kNAAoB,MAAA,CAAI,MAAA,CAAO,qBAAqB;IAChE,sMAAQ,MAAA,CAAI,MAAA,CAAO,aAAa;IAChC,yMAAW,MAAA,CAAI,GAAA,CAAI;AACpB,CAAC;AAEM,MAAM,yMAAW,MAAA,CAAI,MAAA,CAAO,YAAY;IAC9C,oMAAM,MAAA,CAAI,MAAA,CAAO,mBAAmB;IACpC,sMAAQ,MAAA,CAAI,GAAA,CAAI;IAChB,aAAa;AACd,CAAC;AAEM,MAAM,eAAe,oMAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC,EAAE,SAAA,CAAU;IAC1D,OAAO,CAAC,MAA8B,OAAO,QAAQ,6MAAW,aAAA,EAAW,GAAG,IAAI;IAClF,QAAQ,CAAC,OAAQ,4MAAA,EAAS,IAAI,WAAW,GAAG,CAAC;AAC9C,CAAC;AAEM,MAAM,wNAA0B,MAAA,CAAI,MAAA,CAAO,2BAA2B;IAC5E,eAAe,cAAc,eAAe;IAC5C,4MAAc,MAAA,CAAI,MAAA,CAAO,YAAY;AACtC,CAAC;AAEM,MAAM,iNAAmB,MAAA,CAAI,MAAA,CAAO,yBAAyB;IACnE,MAAM;AACP,CAAC;AAEM,MAAM,qNAAuB,MAAA,CAAI,MAAA,CAAO,wBAAwB;IACtE,gNAAmB,OAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC;IACtC,8MAAgB,MAAA,CAAI,MAAA,CAAO;IAC3B,6MAAe,MAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC;AACnC,CAAC","debugId":null}},
    {"offset": {"line": 710, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/bcs/effects.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/bcs';\n\nimport { Address, ObjectDigest, Owner, SuiObjectRef } from './bcs.js';\n\nconst PackageUpgradeError = bcs.enum('PackageUpgradeError', {\n\tUnableToFetchPackage: bcs.struct('UnableToFetchPackage', { packageId: Address }),\n\tNotAPackage: bcs.struct('NotAPackage', { objectId: Address }),\n\tIncompatibleUpgrade: null,\n\tDigestDoesNotMatch: bcs.struct('DigestDoesNotMatch', { digest: bcs.vector(bcs.u8()) }),\n\tUnknownUpgradePolicy: bcs.struct('UnknownUpgradePolicy', { policy: bcs.u8() }),\n\tPackageIDDoesNotMatch: bcs.struct('PackageIDDoesNotMatch', {\n\t\tpackageId: Address,\n\t\tticketId: Address,\n\t}),\n});\n\nconst ModuleId = bcs.struct('ModuleId', {\n\taddress: Address,\n\tname: bcs.string(),\n});\nconst MoveLocation = bcs.struct('MoveLocation', {\n\tmodule: ModuleId,\n\tfunction: bcs.u16(),\n\tinstruction: bcs.u16(),\n\tfunctionName: bcs.option(bcs.string()),\n});\n\nconst CommandArgumentError = bcs.enum('CommandArgumentError', {\n\tTypeMismatch: null,\n\tInvalidBCSBytes: null,\n\tInvalidUsageOfPureArg: null,\n\tInvalidArgumentToPrivateEntryFunction: null,\n\tIndexOutOfBounds: bcs.struct('IndexOutOfBounds', { idx: bcs.u16() }),\n\tSecondaryIndexOutOfBounds: bcs.struct('SecondaryIndexOutOfBounds', {\n\t\tresultIdx: bcs.u16(),\n\t\tsecondaryIdx: bcs.u16(),\n\t}),\n\tInvalidResultArity: bcs.struct('InvalidResultArity', { resultIdx: bcs.u16() }),\n\tInvalidGasCoinUsage: null,\n\tInvalidValueUsage: null,\n\tInvalidObjectByValue: null,\n\tInvalidObjectByMutRef: null,\n\tSharedObjectOperationNotAllowed: null,\n});\n\nconst TypeArgumentError = bcs.enum('TypeArgumentError', {\n\tTypeNotFound: null,\n\tConstraintNotSatisfied: null,\n});\n\nconst ExecutionFailureStatus = bcs.enum('ExecutionFailureStatus', {\n\tInsufficientGas: null,\n\tInvalidGasObject: null,\n\tInvariantViolation: null,\n\tFeatureNotYetSupported: null,\n\tMoveObjectTooBig: bcs.struct('MoveObjectTooBig', {\n\t\tobjectSize: bcs.u64(),\n\t\tmaxObjectSize: bcs.u64(),\n\t}),\n\tMovePackageTooBig: bcs.struct('MovePackageTooBig', {\n\t\tobjectSize: bcs.u64(),\n\t\tmaxObjectSize: bcs.u64(),\n\t}),\n\tCircularObjectOwnership: bcs.struct('CircularObjectOwnership', { object: Address }),\n\tInsufficientCoinBalance: null,\n\tCoinBalanceOverflow: null,\n\tPublishErrorNonZeroAddress: null,\n\tSuiMoveVerificationError: null,\n\tMovePrimitiveRuntimeError: bcs.option(MoveLocation),\n\tMoveAbort: bcs.tuple([MoveLocation, bcs.u64()]),\n\tVMVerificationOrDeserializationError: null,\n\tVMInvariantViolation: null,\n\tFunctionNotFound: null,\n\tArityMismatch: null,\n\tTypeArityMismatch: null,\n\tNonEntryFunctionInvoked: null,\n\tCommandArgumentError: bcs.struct('CommandArgumentError', {\n\t\targIdx: bcs.u16(),\n\t\tkind: CommandArgumentError,\n\t}),\n\tTypeArgumentError: bcs.struct('TypeArgumentError', {\n\t\targumentIdx: bcs.u16(),\n\t\tkind: TypeArgumentError,\n\t}),\n\tUnusedValueWithoutDrop: bcs.struct('UnusedValueWithoutDrop', {\n\t\tresultIdx: bcs.u16(),\n\t\tsecondaryIdx: bcs.u16(),\n\t}),\n\tInvalidPublicFunctionReturnType: bcs.struct('InvalidPublicFunctionReturnType', {\n\t\tidx: bcs.u16(),\n\t}),\n\tInvalidTransferObject: null,\n\tEffectsTooLarge: bcs.struct('EffectsTooLarge', { currentSize: bcs.u64(), maxSize: bcs.u64() }),\n\tPublishUpgradeMissingDependency: null,\n\tPublishUpgradeDependencyDowngrade: null,\n\tPackageUpgradeError: bcs.struct('PackageUpgradeError', { upgradeError: PackageUpgradeError }),\n\tWrittenObjectsTooLarge: bcs.struct('WrittenObjectsTooLarge', {\n\t\tcurrentSize: bcs.u64(),\n\t\tmaxSize: bcs.u64(),\n\t}),\n\tCertificateDenied: null,\n\tSuiMoveVerificationTimedout: null,\n\tSharedObjectOperationNotAllowed: null,\n\tInputObjectDeleted: null,\n\tExecutionCancelledDueToSharedObjectCongestion: bcs.struct(\n\t\t'ExecutionCancelledDueToSharedObjectCongestion',\n\t\t{\n\t\t\tcongestedObjects: bcs.vector(Address),\n\t\t},\n\t),\n\tAddressDeniedForCoin: bcs.struct('AddressDeniedForCoin', {\n\t\taddress: Address,\n\t\tcoinType: bcs.string(),\n\t}),\n\tCoinTypeGlobalPause: bcs.struct('CoinTypeGlobalPause', { coinType: bcs.string() }),\n\tExecutionCancelledDueToRandomnessUnavailable: null,\n});\n\nconst ExecutionStatus = bcs.enum('ExecutionStatus', {\n\tSuccess: null,\n\tFailed: bcs.struct('ExecutionFailed', {\n\t\terror: ExecutionFailureStatus,\n\t\tcommand: bcs.option(bcs.u64()),\n\t}),\n});\n\nconst GasCostSummary = bcs.struct('GasCostSummary', {\n\tcomputationCost: bcs.u64(),\n\tstorageCost: bcs.u64(),\n\tstorageRebate: bcs.u64(),\n\tnonRefundableStorageFee: bcs.u64(),\n});\n\nconst TransactionEffectsV1 = bcs.struct('TransactionEffectsV1', {\n\tstatus: ExecutionStatus,\n\texecutedEpoch: bcs.u64(),\n\tgasUsed: GasCostSummary,\n\tmodifiedAtVersions: bcs.vector(bcs.tuple([Address, bcs.u64()])),\n\tsharedObjects: bcs.vector(SuiObjectRef),\n\ttransactionDigest: ObjectDigest,\n\tcreated: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n\tmutated: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n\tunwrapped: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n\tdeleted: bcs.vector(SuiObjectRef),\n\tunwrappedThenDeleted: bcs.vector(SuiObjectRef),\n\twrapped: bcs.vector(SuiObjectRef),\n\tgasObject: bcs.tuple([SuiObjectRef, Owner]),\n\teventsDigest: bcs.option(ObjectDigest),\n\tdependencies: bcs.vector(ObjectDigest),\n});\n\nconst VersionDigest = bcs.tuple([bcs.u64(), ObjectDigest]);\n\nconst ObjectIn = bcs.enum('ObjectIn', {\n\tNotExist: null,\n\tExist: bcs.tuple([VersionDigest, Owner]),\n});\n\nconst ObjectOut = bcs.enum('ObjectOut', {\n\tNotExist: null,\n\tObjectWrite: bcs.tuple([ObjectDigest, Owner]),\n\tPackageWrite: VersionDigest,\n});\n\nconst IDOperation = bcs.enum('IDOperation', {\n\tNone: null,\n\tCreated: null,\n\tDeleted: null,\n});\n\nconst EffectsObjectChange = bcs.struct('EffectsObjectChange', {\n\tinputState: ObjectIn,\n\toutputState: ObjectOut,\n\tidOperation: IDOperation,\n});\n\nconst UnchangedSharedKind = bcs.enum('UnchangedSharedKind', {\n\tReadOnlyRoot: VersionDigest,\n\tMutateDeleted: bcs.u64(),\n\tReadDeleted: bcs.u64(),\n\tCancelled: bcs.u64(),\n\tPerEpochConfig: null,\n});\n\nconst TransactionEffectsV2 = bcs.struct('TransactionEffectsV2', {\n\tstatus: ExecutionStatus,\n\texecutedEpoch: bcs.u64(),\n\tgasUsed: GasCostSummary,\n\ttransactionDigest: ObjectDigest,\n\tgasObjectIndex: bcs.option(bcs.u32()),\n\teventsDigest: bcs.option(ObjectDigest),\n\tdependencies: bcs.vector(ObjectDigest),\n\tlamportVersion: bcs.u64(),\n\tchangedObjects: bcs.vector(bcs.tuple([Address, EffectsObjectChange])),\n\tunchangedSharedObjects: bcs.vector(bcs.tuple([Address, UnchangedSharedKind])),\n\tauxDataDigest: bcs.option(ObjectDigest),\n});\n\nexport const TransactionEffects = bcs.enum('TransactionEffects', {\n\tV1: TransactionEffectsV1,\n\tV2: TransactionEffectsV2,\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 957, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/bcs/index.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/bcs';\n\nimport {\n\tAddress,\n\tAppId,\n\tArgument,\n\tCallArg,\n\tCommand,\n\tCompressedSignature,\n\tGasData,\n\tIntent,\n\tIntentMessage,\n\tIntentScope,\n\tIntentVersion,\n\tMultiSig,\n\tMultiSigPkMap,\n\tMultiSigPublicKey,\n\tObjectArg,\n\tObjectDigest,\n\tOwner,\n\tPasskeyAuthenticator,\n\tProgrammableMoveCall,\n\tProgrammableTransaction,\n\tPublicKey,\n\tSenderSignedData,\n\tSenderSignedTransaction,\n\tSharedObjectRef,\n\tStructTag,\n\tSuiObjectRef,\n\tTransactionData,\n\tTransactionDataV1,\n\tTransactionExpiration,\n\tTransactionKind,\n\tTypeTag,\n} from './bcs.js';\nimport { TransactionEffects } from './effects.js';\n\nexport type { TypeTag } from './types.js';\n\nexport { TypeTagSerializer } from './type-tag-serializer.js';\nexport { BcsType, type BcsTypeOptions } from '@mysten/bcs';\n\nconst suiBcs = {\n\t...bcs,\n\tU8: bcs.u8(),\n\tU16: bcs.u16(),\n\tU32: bcs.u32(),\n\tU64: bcs.u64(),\n\tU128: bcs.u128(),\n\tU256: bcs.u256(),\n\tULEB128: bcs.uleb128(),\n\tBool: bcs.bool(),\n\tString: bcs.string(),\n\tAddress,\n\tAppId,\n\tArgument,\n\tCallArg,\n\tCommand,\n\tCompressedSignature,\n\tGasData,\n\tIntent,\n\tIntentMessage,\n\tIntentScope,\n\tIntentVersion,\n\tMultiSig,\n\tMultiSigPkMap,\n\tMultiSigPublicKey,\n\tObjectArg,\n\tObjectDigest,\n\tOwner,\n\tPasskeyAuthenticator,\n\tProgrammableMoveCall,\n\tProgrammableTransaction,\n\tPublicKey,\n\tSenderSignedData,\n\tSenderSignedTransaction,\n\tSharedObjectRef,\n\tStructTag,\n\tSuiObjectRef,\n\tTransactionData,\n\tTransactionDataV1,\n\tTransactionEffects,\n\tTransactionExpiration,\n\tTransactionKind,\n\tTypeTag,\n};\nexport {\n\tpureBcsSchemaFromTypeName,\n\ttype ShapeFromPureTypeName,\n\ttype PureTypeName,\n} from './pure.js';\n\nexport { suiBcs as bcs };\n"],"names":[],"mappings":";;;AAGA,SAAS,WAAW;AAEpB;AAiCA,SAAS,0BAA0B;;;;;;AAOnC,MAAM,SAAS;IACd,iMAAG,MAAA;IACH,kMAAI,MAAA,CAAI,EAAA,CAAG;IACX,mMAAK,MAAA,CAAI,GAAA,CAAI;IACb,mMAAK,MAAA,CAAI,GAAA,CAAI;IACb,mMAAK,MAAA,CAAI,GAAA,CAAI;IACb,oMAAM,MAAA,CAAI,IAAA,CAAK;IACf,oMAAM,MAAA,CAAI,IAAA,CAAK;IACf,uMAAS,MAAA,CAAI,OAAA,CAAQ;IACrB,oMAAM,MAAA,CAAI,IAAA,CAAK;IACf,sMAAQ,MAAA,CAAI,MAAA,CAAO;kNACnB,UAAA;gNACA,QAAA;mNACA,WAAA;kNACA,UAAA;kNACA,UAAA;8NACA,sBAAA;kNACA,UAAA;iNACA,SAAA;wNACA,gBAAA;sNACA,cAAA;wNACA,gBAAA;mNACA,WAAA;wNACA,gBAAA;4NACA,oBAAA;oNACA,YAAA;uNACA,eAAA;gNACA,QAAA;+NACA,uBAAA;+NACA,uBAAA;kOACA,0BAAA;oNACA,YAAA;2NACA,mBAAA;kOACA,0BAAA;0NACA,kBAAA;oNACA,YAAA;uNACA,eAAA;0NACA,kBAAA;4NACA,oBAAA;iOACA,qBAAA;gOACA,wBAAA;0NACA,kBAAA;kNACA,UAAA;AACD","debugId":null}},
    {"offset": {"line": 1019, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/plugins/utils.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isValidNamedPackage, isValidNamedType } from '../../utils/move-registry.js';\nimport { normalizeStructTag, parseStructTag } from '../../utils/sui-types.js';\nimport type { StructTag } from '../../utils/sui-types.js';\nimport type { TransactionDataBuilder } from '../TransactionData.js';\n\nexport type NamedPackagesPluginCache = {\n\tpackages: Record<string, string>;\n\ttypes: Record<string, string>;\n};\n\nconst NAME_SEPARATOR = '/';\n\nexport type NameResolutionRequest = {\n\tid: number;\n\ttype: 'package' | 'moveType';\n\tname: string;\n};\n\n/**\n * Looks up all `.move` names in a transaction block.\n * Returns a list of all the names found.\n */\nexport function findNamesInTransaction(builder: TransactionDataBuilder): {\n\tpackages: string[];\n\ttypes: string[];\n} {\n\tconst packages: Set<string> = new Set();\n\tconst types: Set<string> = new Set();\n\n\tfor (const command of builder.commands) {\n\t\tif (command.MakeMoveVec?.type) {\n\t\t\tgetNamesFromTypeList([command.MakeMoveVec.type]).forEach((type) => {\n\t\t\t\ttypes.add(type);\n\t\t\t});\n\t\t\tcontinue;\n\t\t}\n\t\tif (!('MoveCall' in command)) continue;\n\t\tconst tx = command.MoveCall;\n\n\t\tif (!tx) continue;\n\n\t\tconst pkg = tx.package.split('::')[0];\n\t\tif (hasMvrName(pkg)) {\n\t\t\tif (!isValidNamedPackage(pkg)) throw new Error(`Invalid package name: ${pkg}`);\n\t\t\tpackages.add(pkg);\n\t\t}\n\n\t\tgetNamesFromTypeList(tx.typeArguments ?? []).forEach((type) => {\n\t\t\ttypes.add(type);\n\t\t});\n\t}\n\n\treturn {\n\t\tpackages: [...packages],\n\t\ttypes: [...types],\n\t};\n}\n\n/**\n * Extracts all first-level types from a list of types.\n * E.g. for the input `['@mvr/demo::a::A<@mvr/demo::b::B>']`,\n * the output will be `['@mvr/demo::a::A', '@mvr/demo::b::B']`.\n */\nexport function getFirstLevelNamedTypes(types: string[]) {\n\tconst results: Set<string> = new Set();\n\n\tfor (const type of types) {\n\t\tfindMvrNames(type).forEach((name) => results.add(name));\n\t}\n\n\treturn results;\n}\n\n/**\n * Extracts all named types from a given type.\n */\nfunction findMvrNames(type: string | StructTag) {\n\tconst types: Set<string> = new Set();\n\n\tif (typeof type === 'string' && !hasMvrName(type)) return types;\n\n\tconst tag = isStructTag(type) ? type : parseStructTag(type);\n\n\tif (hasMvrName(tag.address)) types.add(`${tag.address}::${tag.module}::${tag.name}`);\n\n\tfor (const param of tag.typeParams) {\n\t\tfindMvrNames(param).forEach((name) => types.add(name));\n\t}\n\n\treturn types;\n}\n\n// /**\n//  * Allows partial replacements of known types with their resolved equivalents.\n//  * E.g. `@mvr/demo::a::A<@mvr/demo::b::B>` can be resolved, if we already have\n//  * the address for `@mvr/demo::b::B` and the address for `@mvr/demo::a::A`,\n//  * without the need to have the full type in the cache.\n//  *\n//  * Returns the fully composed resolved types (if any) in a `named-type -> normalized-type` map.\n//  */\nexport function populateNamedTypesFromCache(types: string[], typeCache: Record<string, string>) {\n\tconst composedTypes: Record<string, string> = {};\n\n\ttypes.forEach((type) => {\n\t\tconst normalized = normalizeStructTag(findAndReplaceCachedTypes(type, typeCache));\n\t\tcomposedTypes[type] = normalized;\n\t});\n\n\treturn composedTypes;\n}\n\n/**\n * Traverses a type, and replaces any found names with their resolved equivalents,\n * based on the supplied type cache.\n */\nfunction findAndReplaceCachedTypes(\n\ttag: string | StructTag,\n\ttypeCache: Record<string, string>,\n): StructTag {\n\tconst type = isStructTag(tag) ? tag : parseStructTag(tag);\n\n\tconst typeTag = `${type.address}::${type.module}::${type.name}`;\n\tconst cacheHit = typeCache[typeTag];\n\n\treturn {\n\t\t...type,\n\t\taddress: cacheHit ? cacheHit.split('::')[0] : type.address,\n\t\ttypeParams: type.typeParams.map((param) => findAndReplaceCachedTypes(param, typeCache)),\n\t};\n}\n\n/**\n * Replace all names & types in a transaction block\n * with their resolved names/types.\n */\nexport function replaceNames(builder: TransactionDataBuilder, cache: NamedPackagesPluginCache) {\n\tfor (const command of builder.commands) {\n\t\t// Replacements for `MakeMoveVec` commands (that can include types)\n\t\tif (command.MakeMoveVec?.type) {\n\t\t\tif (!hasMvrName(command.MakeMoveVec.type)) continue;\n\t\t\tif (!cache.types[command.MakeMoveVec.type])\n\t\t\t\tthrow new Error(`No resolution found for type: ${command.MakeMoveVec.type}`);\n\t\t\tcommand.MakeMoveVec.type = cache.types[command.MakeMoveVec.type];\n\t\t}\n\t\t// Replacements for `MoveCall` commands (that can include packages & types)\n\t\tconst tx = command.MoveCall;\n\t\tif (!tx) continue;\n\n\t\tconst nameParts = tx.package.split('::');\n\t\tconst name = nameParts[0];\n\n\t\tif (hasMvrName(name) && !cache.packages[name])\n\t\t\tthrow new Error(`No address found for package: ${name}`);\n\n\t\t// Replace package name with address.\n\t\tif (hasMvrName(name)) {\n\t\t\tnameParts[0] = cache.packages[name];\n\t\t\ttx.package = nameParts.join('::');\n\t\t}\n\n\t\tconst types = tx.typeArguments;\n\t\tif (!types) continue;\n\n\t\tfor (let i = 0; i < types.length; i++) {\n\t\t\tif (!hasMvrName(types[i])) continue;\n\n\t\t\tif (!cache.types[types[i]]) throw new Error(`No resolution found for type: ${types[i]}`);\n\t\t\ttypes[i] = cache.types[types[i]];\n\t\t}\n\n\t\ttx.typeArguments = types;\n\t}\n}\n\nexport function batch<T>(arr: T[], size: number): T[][] {\n\tconst batches = [];\n\tfor (let i = 0; i < arr.length; i += size) {\n\t\tbatches.push(arr.slice(i, i + size));\n\t}\n\treturn batches;\n}\n\n/**\n * Returns a list of unique types that include a name\n * from the given list. This list is retrieved from the Transaction Data.\n */\nfunction getNamesFromTypeList(types: string[]) {\n\tconst names = new Set<string>();\n\tfor (const type of types) {\n\t\tif (hasMvrName(type)) {\n\t\t\tif (!isValidNamedType(type)) throw new Error(`Invalid type with names: ${type}`);\n\t\t\tnames.add(type);\n\t\t}\n\t}\n\treturn names;\n}\n\nfunction hasMvrName(nameOrType: string) {\n\treturn (\n\t\tnameOrType.includes(NAME_SEPARATOR) || nameOrType.includes('@') || nameOrType.includes('.sui')\n\t);\n}\n\nfunction isStructTag(type: string | StructTag): type is StructTag {\n\treturn (\n\t\ttypeof type === 'object' &&\n\t\t'address' in type &&\n\t\t'module' in type &&\n\t\t'name' in type &&\n\t\t'typeParams' in type\n\t);\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1157, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/data/internal.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumInputShape, EnumOutputShape } from '@mysten/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n\tarray,\n\tboolean,\n\tcheck,\n\tinteger,\n\tlazy,\n\tliteral,\n\tnullable,\n\tnullish,\n\tnumber,\n\tobject,\n\toptional,\n\tpipe,\n\trecord,\n\tstring,\n\ttransform,\n\ttuple,\n\tunion,\n\tunknown,\n} from 'valibot';\n\nimport { isValidSuiAddress, normalizeSuiAddress } from '../../utils/sui-types.js';\nimport type { Simplify } from '@mysten/utils';\n\ntype EnumSchema<T extends Record<string, GenericSchema<any>>> = GenericSchema<\n\tEnumInputShape<\n\t\tSimplify<{\n\t\t\t[K in keyof T]: InferInput<T[K]>;\n\t\t}>\n\t>,\n\tEnumOutputShape<\n\t\tSimplify<{\n\t\t\t[K in keyof T]: InferOutput<T[K]>;\n\t\t}>\n\t>\n>;\n\nexport function safeEnum<T extends Record<string, GenericSchema<any>>>(options: T): EnumSchema<T> {\n\tconst unionOptions = Object.entries(options).map(([key, value]) => object({ [key]: value }));\n\n\treturn pipe(\n\t\tunion(unionOptions),\n\t\ttransform((value) => ({\n\t\t\t...value,\n\t\t\t$kind: Object.keys(value)[0] as keyof typeof value,\n\t\t})),\n\t) as EnumSchema<T>;\n}\n\nexport const SuiAddress = pipe(\n\tstring(),\n\ttransform((value) => normalizeSuiAddress(value)),\n\tcheck(isValidSuiAddress),\n);\nexport const ObjectID = SuiAddress;\nexport const BCSBytes = string();\nexport const JsonU64 = pipe(\n\tunion([string(), pipe(number(), integer())]),\n\n\tcheck((val) => {\n\t\ttry {\n\t\t\tBigInt(val);\n\t\t\treturn BigInt(val) >= 0 && BigInt(val) <= 18446744073709551615n;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}, 'Invalid u64'),\n);\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/base_types.rs#L138\n// Implemented as a tuple in rust\nexport const ObjectRef = object({\n\tobjectId: SuiAddress,\n\tversion: JsonU64,\n\tdigest: string(),\n});\nexport type ObjectRef = InferOutput<typeof ObjectRef>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L690-L702\nexport const Argument = pipe(\n\tunion([\n\t\tobject({ GasCoin: literal(true) }),\n\t\tobject({ Input: pipe(number(), integer()), type: optional(literal('pure')) }),\n\t\tobject({ Input: pipe(number(), integer()), type: optional(literal('object')) }),\n\t\tobject({ Result: pipe(number(), integer()) }),\n\t\tobject({ NestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())]) }),\n\t]),\n\ttransform((value) => ({\n\t\t...value,\n\t\t$kind: Object.keys(value)[0] as keyof typeof value,\n\t})),\n\t// Defined manually to add `type?: 'pure' | 'object'` to Input\n) as GenericSchema<\n\t// Input\n\t| { GasCoin: true }\n\t| { Input: number; type?: 'pure' | 'object' }\n\t| { Result: number }\n\t| { NestedResult: [number, number] },\n\t// Output\n\t| { $kind: 'GasCoin'; GasCoin: true }\n\t| { $kind: 'Input'; Input: number; type?: 'pure' }\n\t| { $kind: 'Input'; Input: number; type?: 'object' }\n\t| { $kind: 'Result'; Result: number }\n\t| { $kind: 'NestedResult'; NestedResult: [number, number] }\n>;\n\nexport type Argument = InferOutput<typeof Argument>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L1387-L1392\nexport const GasData = object({\n\tbudget: nullable(JsonU64),\n\tprice: nullable(JsonU64),\n\towner: nullable(SuiAddress),\n\tpayment: nullable(array(ObjectRef)),\n});\nexport type GasData = InferOutput<typeof GasData>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/external-crates/move/crates/move-core-types/src/language_storage.rs#L140-L147\nexport const StructTag = object({\n\taddress: string(),\n\tmodule: string(),\n\tname: string(),\n\t// type_params in rust, should be updated to use camelCase\n\ttypeParams: array(string()),\n});\nexport type StructTag = InferOutput<typeof StructTag>;\n\n// https://github.com/MystenLabs/sui/blob/cea8742e810142a8145fd83c4c142d61e561004a/crates/sui-graphql-rpc/schema/current_progress_schema.graphql#L1614-L1627\nexport type OpenMoveTypeSignatureBody =\n\t| 'address'\n\t| 'bool'\n\t| 'u8'\n\t| 'u16'\n\t| 'u32'\n\t| 'u64'\n\t| 'u128'\n\t| 'u256'\n\t| { vector: OpenMoveTypeSignatureBody }\n\t| {\n\t\t\tdatatype: {\n\t\t\t\tpackage: string;\n\t\t\t\tmodule: string;\n\t\t\t\ttype: string;\n\t\t\t\ttypeParameters: OpenMoveTypeSignatureBody[];\n\t\t\t};\n\t  }\n\t| { typeParameter: number };\n\nexport const OpenMoveTypeSignatureBody: GenericSchema<OpenMoveTypeSignatureBody> = union([\n\tliteral('address'),\n\tliteral('bool'),\n\tliteral('u8'),\n\tliteral('u16'),\n\tliteral('u32'),\n\tliteral('u64'),\n\tliteral('u128'),\n\tliteral('u256'),\n\tobject({ vector: lazy(() => OpenMoveTypeSignatureBody) }),\n\tobject({\n\t\tdatatype: object({\n\t\t\tpackage: string(),\n\t\t\tmodule: string(),\n\t\t\ttype: string(),\n\t\t\ttypeParameters: array(lazy(() => OpenMoveTypeSignatureBody)),\n\t\t}),\n\t}),\n\tobject({ typeParameter: pipe(number(), integer()) }),\n]);\n\n// https://github.com/MystenLabs/sui/blob/cea8742e810142a8145fd83c4c142d61e561004a/crates/sui-graphql-rpc/schema/current_progress_schema.graphql#L1609-L1612\nexport const OpenMoveTypeSignature = object({\n\tref: nullable(union([literal('&'), literal('&mut')])),\n\tbody: OpenMoveTypeSignatureBody,\n});\nexport type OpenMoveTypeSignature = InferOutput<typeof OpenMoveTypeSignature>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L707-L718\nconst ProgrammableMoveCall = object({\n\tpackage: ObjectID,\n\tmodule: string(),\n\tfunction: string(),\n\t// snake case in rust\n\ttypeArguments: array(string()),\n\targuments: array(Argument),\n\t_argumentTypes: optional(nullable(array(OpenMoveTypeSignature))),\n});\nexport type ProgrammableMoveCall = InferOutput<typeof ProgrammableMoveCall>;\n\nexport const $Intent = object({\n\tname: string(),\n\tinputs: record(string(), union([Argument, array(Argument)])),\n\tdata: record(string(), unknown()),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L657-L685\nexport const Command = safeEnum({\n\tMoveCall: ProgrammableMoveCall,\n\tTransferObjects: object({\n\t\tobjects: array(Argument),\n\t\taddress: Argument,\n\t}),\n\tSplitCoins: object({\n\t\tcoin: Argument,\n\t\tamounts: array(Argument),\n\t}),\n\tMergeCoins: object({\n\t\tdestination: Argument,\n\t\tsources: array(Argument),\n\t}),\n\tPublish: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t}),\n\tMakeMoveVec: object({\n\t\ttype: nullable(string()),\n\t\telements: array(Argument),\n\t}),\n\tUpgrade: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t\tpackage: ObjectID,\n\t\tticket: Argument,\n\t}),\n\t$Intent,\n});\n\nexport type Command<Arg = Argument> = EnumOutputShape<{\n\tMoveCall: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t\tfunction: string;\n\t\ttypeArguments: string[];\n\t\targuments: Arg[];\n\t\t_argumentTypes?: OpenMoveTypeSignature[] | null;\n\t};\n\tTransferObjects: {\n\t\tobjects: Arg[];\n\t\taddress: Arg;\n\t};\n\tSplitCoins: {\n\t\tcoin: Arg;\n\t\tamounts: Arg[];\n\t};\n\tMergeCoins: {\n\t\tdestination: Arg;\n\t\tsources: Arg[];\n\t};\n\tPublish: {\n\t\tmodules: string[];\n\t\tdependencies: string[];\n\t};\n\tMakeMoveVec: {\n\t\ttype: string | null;\n\t\telements: Arg[];\n\t};\n\tUpgrade: {\n\t\tmodules: string[];\n\t\tdependencies: string[];\n\t\tpackage: string;\n\t\tticket: Arg;\n\t};\n\t$Intent: {\n\t\tname: string;\n\t\tinputs: Record<string, Argument | Argument[]>;\n\t\tdata: Record<string, unknown>;\n\t};\n}>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L102-L114\nexport const ObjectArg = safeEnum({\n\tImmOrOwnedObject: ObjectRef,\n\tSharedObject: object({\n\t\tobjectId: ObjectID,\n\t\t// snake case in rust\n\t\tinitialSharedVersion: JsonU64,\n\t\tmutable: boolean(),\n\t}),\n\tReceiving: ObjectRef,\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L75-L80\nconst CallArg = safeEnum({\n\tObject: ObjectArg,\n\tPure: object({\n\t\tbytes: BCSBytes,\n\t}),\n\tUnresolvedPure: object({\n\t\tvalue: unknown(),\n\t}),\n\tUnresolvedObject: object({\n\t\tobjectId: ObjectID,\n\t\tversion: optional(nullable(JsonU64)),\n\t\tdigest: optional(nullable(string())),\n\t\tinitialSharedVersion: optional(nullable(JsonU64)),\n\t}),\n});\nexport type CallArg = InferOutput<typeof CallArg>;\n\nexport const NormalizedCallArg = safeEnum({\n\tObject: ObjectArg,\n\tPure: object({\n\t\tbytes: BCSBytes,\n\t}),\n});\n\nexport const TransactionExpiration = safeEnum({\n\tNone: literal(true),\n\tEpoch: JsonU64,\n});\n\nexport type TransactionExpiration = InferOutput<typeof TransactionExpiration>;\n\nexport const TransactionData = object({\n\tversion: literal(2),\n\tsender: nullish(SuiAddress),\n\texpiration: nullish(TransactionExpiration),\n\tgasData: GasData,\n\tinputs: array(CallArg),\n\tcommands: array(Command),\n});\nexport type TransactionData = InferOutput<typeof TransactionData>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1376, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/Commands.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toBase64 } from '@mysten/bcs';\nimport type { InferInput } from 'valibot';\nimport { parse } from 'valibot';\n\nimport { normalizeSuiObjectId } from '../utils/sui-types.js';\nimport { Argument } from './data/internal.js';\nimport type { CallArg, Command } from './data/internal.js';\nimport type { Transaction } from './Transaction.js';\n\nexport type TransactionArgument =\n\t| InferInput<typeof Argument>\n\t| ((tx: Transaction) => InferInput<typeof Argument>);\nexport type TransactionInput = CallArg;\n\n// Keep in sync with constants in\n// crates/sui-framework/packages/sui-framework/sources/package.move\nexport enum UpgradePolicy {\n\tCOMPATIBLE = 0,\n\tADDITIVE = 128,\n\tDEP_ONLY = 192,\n}\n\ntype TransactionShape<T extends Command['$kind']> = { $kind: T } & {\n\t[K in T]: Extract<Command, { [K in T]: any }>[T];\n};\n\n/**\n * Simple helpers used to construct transactions:\n */\nexport const Commands = {\n\tMoveCall(\n\t\tinput:\n\t\t\t| {\n\t\t\t\t\tpackage: string;\n\t\t\t\t\tmodule: string;\n\t\t\t\t\tfunction: string;\n\t\t\t\t\targuments?: Argument[];\n\t\t\t\t\ttypeArguments?: string[];\n\t\t\t  }\n\t\t\t| {\n\t\t\t\t\ttarget: string;\n\t\t\t\t\targuments?: Argument[];\n\t\t\t\t\ttypeArguments?: string[];\n\t\t\t  },\n\t): TransactionShape<'MoveCall'> {\n\t\tconst [pkg, mod = '', fn = ''] =\n\t\t\t'target' in input ? input.target.split('::') : [input.package, input.module, input.function];\n\n\t\treturn {\n\t\t\t$kind: 'MoveCall',\n\t\t\tMoveCall: {\n\t\t\t\tpackage: pkg,\n\t\t\t\tmodule: mod,\n\t\t\t\tfunction: fn,\n\t\t\t\ttypeArguments: input.typeArguments ?? [],\n\t\t\t\targuments: input.arguments ?? [],\n\t\t\t},\n\t\t};\n\t},\n\n\tTransferObjects(\n\t\tobjects: InferInput<typeof Argument>[],\n\t\taddress: InferInput<typeof Argument>,\n\t): TransactionShape<'TransferObjects'> {\n\t\treturn {\n\t\t\t$kind: 'TransferObjects',\n\t\t\tTransferObjects: {\n\t\t\t\tobjects: objects.map((o) => parse(Argument, o)),\n\t\t\t\taddress: parse(Argument, address),\n\t\t\t},\n\t\t};\n\t},\n\tSplitCoins(\n\t\tcoin: InferInput<typeof Argument>,\n\t\tamounts: InferInput<typeof Argument>[],\n\t): TransactionShape<'SplitCoins'> {\n\t\treturn {\n\t\t\t$kind: 'SplitCoins',\n\t\t\tSplitCoins: {\n\t\t\t\tcoin: parse(Argument, coin),\n\t\t\t\tamounts: amounts.map((o) => parse(Argument, o)),\n\t\t\t},\n\t\t};\n\t},\n\tMergeCoins(\n\t\tdestination: InferInput<typeof Argument>,\n\t\tsources: InferInput<typeof Argument>[],\n\t): TransactionShape<'MergeCoins'> {\n\t\treturn {\n\t\t\t$kind: 'MergeCoins',\n\t\t\tMergeCoins: {\n\t\t\t\tdestination: parse(Argument, destination),\n\t\t\t\tsources: sources.map((o) => parse(Argument, o)),\n\t\t\t},\n\t\t};\n\t},\n\tPublish({\n\t\tmodules,\n\t\tdependencies,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t}): TransactionShape<'Publish'> {\n\t\treturn {\n\t\t\t$kind: 'Publish',\n\t\t\tPublish: {\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? module : toBase64(new Uint8Array(module)),\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t},\n\t\t};\n\t},\n\tUpgrade({\n\t\tmodules,\n\t\tdependencies,\n\t\tpackage: packageId,\n\t\tticket,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t\tpackage: string;\n\t\tticket: InferInput<typeof Argument>;\n\t}): TransactionShape<'Upgrade'> {\n\t\treturn {\n\t\t\t$kind: 'Upgrade',\n\t\t\tUpgrade: {\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? module : toBase64(new Uint8Array(module)),\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t\tpackage: packageId,\n\t\t\t\tticket: parse(Argument, ticket),\n\t\t\t},\n\t\t};\n\t},\n\tMakeMoveVec({\n\t\ttype,\n\t\telements,\n\t}: {\n\t\ttype?: string;\n\t\telements: InferInput<typeof Argument>[];\n\t}): TransactionShape<'MakeMoveVec'> {\n\t\treturn {\n\t\t\t$kind: 'MakeMoveVec',\n\t\t\tMakeMoveVec: {\n\t\t\t\ttype: type ?? null,\n\t\t\t\telements: elements.map((o) => parse(Argument, o)),\n\t\t\t},\n\t\t};\n\t},\n\tIntent({\n\t\tname,\n\t\tinputs = {},\n\t\tdata = {},\n\t}: {\n\t\tname: string;\n\t\tinputs?: Record<string, InferInput<typeof Argument> | InferInput<typeof Argument>[]>;\n\t\tdata?: Record<string, unknown>;\n\t}): TransactionShape<'$Intent'> {\n\t\treturn {\n\t\t\t$kind: '$Intent',\n\t\t\t$Intent: {\n\t\t\t\tname,\n\t\t\t\tinputs: Object.fromEntries(\n\t\t\t\t\tObject.entries(inputs).map(([key, value]) => [\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tArray.isArray(value) ? value.map((o) => parse(Argument, o)) : parse(Argument, value),\n\t\t\t\t\t]),\n\t\t\t\t),\n\t\t\t\tdata,\n\t\t\t},\n\t\t};\n\t},\n};\n"],"names":["UpgradePolicy"],"mappings":"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","debugId":null}},
    {"offset": {"line": 1496, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/data/v1.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64 } from '@mysten/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n\tarray,\n\tbigint,\n\tboolean,\n\tcheck,\n\tinteger,\n\tis,\n\tlazy,\n\tliteral,\n\tnullable,\n\tnullish,\n\tnumber,\n\tobject,\n\toptional,\n\tparse,\n\tpipe,\n\tstring,\n\tunion,\n\tunknown,\n} from 'valibot';\n\nimport { TypeTagSerializer } from '../../bcs/index.js';\nimport type { StructTag as StructTagType, TypeTag as TypeTagType } from '../../bcs/types.js';\nimport { JsonU64, ObjectID, safeEnum, TransactionData } from './internal.js';\nimport type { Argument } from './internal.js';\n\nexport const ObjectRef = object({\n\tdigest: string(),\n\tobjectId: string(),\n\tversion: union([pipe(number(), integer()), string(), bigint()]),\n});\n\nconst ObjectArg = safeEnum({\n\tImmOrOwned: ObjectRef,\n\tShared: object({\n\t\tobjectId: ObjectID,\n\t\tinitialSharedVersion: JsonU64,\n\t\tmutable: boolean(),\n\t}),\n\tReceiving: ObjectRef,\n});\n\nexport const NormalizedCallArg = safeEnum({\n\tObject: ObjectArg,\n\tPure: array(pipe(number(), integer())),\n});\n\nconst TransactionInput = union([\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: pipe(number(), integer()),\n\t\tvalue: unknown(),\n\t\ttype: optional(literal('object')),\n\t}),\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: pipe(number(), integer()),\n\t\tvalue: unknown(),\n\t\ttype: literal('pure'),\n\t}),\n]);\n\nconst TransactionExpiration = union([\n\tobject({ Epoch: pipe(number(), integer()) }),\n\tobject({ None: nullable(literal(true)) }),\n]);\n\nconst StringEncodedBigint = pipe(\n\tunion([number(), string(), bigint()]),\n\tcheck((val) => {\n\t\tif (!['string', 'number', 'bigint'].includes(typeof val)) return false;\n\n\t\ttry {\n\t\t\tBigInt(val as string);\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}),\n);\n\nexport const TypeTag: GenericSchema<TypeTagType> = union([\n\tobject({ bool: nullable(literal(true)) }),\n\tobject({ u8: nullable(literal(true)) }),\n\tobject({ u64: nullable(literal(true)) }),\n\tobject({ u128: nullable(literal(true)) }),\n\tobject({ address: nullable(literal(true)) }),\n\tobject({ signer: nullable(literal(true)) }),\n\tobject({ vector: lazy(() => TypeTag) }),\n\tobject({ struct: lazy(() => StructTag) }),\n\tobject({ u16: nullable(literal(true)) }),\n\tobject({ u32: nullable(literal(true)) }),\n\tobject({ u256: nullable(literal(true)) }),\n]);\n\n// https://github.com/MystenLabs/sui/blob/cea8742e810142a8145fd83c4c142d61e561004a/external-crates/move/crates/move-core-types/src/language_storage.rs#L140-L147\nexport const StructTag: GenericSchema<StructTagType> = object({\n\taddress: string(),\n\tmodule: string(),\n\tname: string(),\n\ttypeParams: array(TypeTag),\n});\n\nconst GasConfig = object({\n\tbudget: optional(StringEncodedBigint),\n\tprice: optional(StringEncodedBigint),\n\tpayment: optional(array(ObjectRef)),\n\towner: optional(string()),\n});\n\nconst TransactionArgumentTypes = [\n\tTransactionInput,\n\tobject({ kind: literal('GasCoin') }),\n\tobject({ kind: literal('Result'), index: pipe(number(), integer()) }),\n\tobject({\n\t\tkind: literal('NestedResult'),\n\t\tindex: pipe(number(), integer()),\n\t\tresultIndex: pipe(number(), integer()),\n\t}),\n] as const;\n\n// Generic transaction argument\nexport const TransactionArgument = union([...TransactionArgumentTypes]);\n\nconst MoveCallTransaction = object({\n\tkind: literal('MoveCall'),\n\ttarget: pipe(\n\t\tstring(),\n\t\tcheck((target) => target.split('::').length === 3),\n\t) as GenericSchema<`${string}::${string}::${string}`>,\n\ttypeArguments: array(string()),\n\targuments: array(TransactionArgument),\n});\n\nconst TransferObjectsTransaction = object({\n\tkind: literal('TransferObjects'),\n\tobjects: array(TransactionArgument),\n\taddress: TransactionArgument,\n});\n\nconst SplitCoinsTransaction = object({\n\tkind: literal('SplitCoins'),\n\tcoin: TransactionArgument,\n\tamounts: array(TransactionArgument),\n});\n\nconst MergeCoinsTransaction = object({\n\tkind: literal('MergeCoins'),\n\tdestination: TransactionArgument,\n\tsources: array(TransactionArgument),\n});\n\nconst MakeMoveVecTransaction = object({\n\tkind: literal('MakeMoveVec'),\n\ttype: union([object({ Some: TypeTag }), object({ None: nullable(literal(true)) })]),\n\tobjects: array(TransactionArgument),\n});\n\nconst PublishTransaction = object({\n\tkind: literal('Publish'),\n\tmodules: array(array(pipe(number(), integer()))),\n\tdependencies: array(string()),\n});\n\nconst UpgradeTransaction = object({\n\tkind: literal('Upgrade'),\n\tmodules: array(array(pipe(number(), integer()))),\n\tdependencies: array(string()),\n\tpackageId: string(),\n\tticket: TransactionArgument,\n});\n\nconst TransactionTypes = [\n\tMoveCallTransaction,\n\tTransferObjectsTransaction,\n\tSplitCoinsTransaction,\n\tMergeCoinsTransaction,\n\tPublishTransaction,\n\tUpgradeTransaction,\n\tMakeMoveVecTransaction,\n] as const;\n\nconst TransactionType = union([...TransactionTypes]);\n\nexport const SerializedTransactionDataV1 = object({\n\tversion: literal(1),\n\tsender: optional(string()),\n\texpiration: nullish(TransactionExpiration),\n\tgasConfig: GasConfig,\n\tinputs: array(TransactionInput),\n\ttransactions: array(TransactionType),\n});\n\nexport type SerializedTransactionDataV1 = InferOutput<typeof SerializedTransactionDataV1>;\n\nexport function serializeV1TransactionData(\n\ttransactionData: TransactionData,\n): SerializedTransactionDataV1 {\n\tconst inputs: InferOutput<typeof TransactionInput>[] = transactionData.inputs.map(\n\t\t(input, index) => {\n\t\t\tif (input.Object) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tObject: input.Object.ImmOrOwnedObject\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tImmOrOwned: input.Object.ImmOrOwnedObject,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: input.Object.Receiving\n\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\tReceiving: {\n\t\t\t\t\t\t\t\t\t\t\tdigest: input.Object.Receiving.digest,\n\t\t\t\t\t\t\t\t\t\t\tversion: input.Object.Receiving.version,\n\t\t\t\t\t\t\t\t\t\t\tobjectId: input.Object.Receiving.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\tShared: {\n\t\t\t\t\t\t\t\t\t\t\tmutable: input.Object.SharedObject.mutable,\n\t\t\t\t\t\t\t\t\t\t\tinitialSharedVersion: input.Object.SharedObject.initialSharedVersion,\n\t\t\t\t\t\t\t\t\t\t\tobjectId: input.Object.SharedObject.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'object',\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (input.Pure) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tPure: Array.from(fromBase64(input.Pure.bytes)),\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'pure',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (input.UnresolvedPure) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\ttype: 'pure',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: input.UnresolvedPure.value,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (input.UnresolvedObject) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: input.UnresolvedObject.objectId,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new Error('Invalid input');\n\t\t},\n\t);\n\n\treturn {\n\t\tversion: 1,\n\t\tsender: transactionData.sender ?? undefined,\n\t\texpiration:\n\t\t\ttransactionData.expiration?.$kind === 'Epoch'\n\t\t\t\t? { Epoch: Number(transactionData.expiration.Epoch) }\n\t\t\t\t: transactionData.expiration\n\t\t\t\t\t? { None: true }\n\t\t\t\t\t: null,\n\t\tgasConfig: {\n\t\t\towner: transactionData.gasData.owner ?? undefined,\n\t\t\tbudget: transactionData.gasData.budget ?? undefined,\n\t\t\tprice: transactionData.gasData.price ?? undefined,\n\t\t\tpayment: transactionData.gasData.payment ?? undefined,\n\t\t},\n\t\tinputs,\n\t\ttransactions: transactionData.commands.map((command): InferOutput<typeof TransactionType> => {\n\t\t\tif (command.MakeMoveVec) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'MakeMoveVec',\n\t\t\t\t\ttype:\n\t\t\t\t\t\tcommand.MakeMoveVec.type === null\n\t\t\t\t\t\t\t? { None: true }\n\t\t\t\t\t\t\t: { Some: TypeTagSerializer.parseFromStr(command.MakeMoveVec.type) },\n\t\t\t\t\tobjects: command.MakeMoveVec.elements.map((arg) =>\n\t\t\t\t\t\tconvertTransactionArgument(arg, inputs),\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.MergeCoins) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'MergeCoins',\n\t\t\t\t\tdestination: convertTransactionArgument(command.MergeCoins.destination, inputs),\n\t\t\t\t\tsources: command.MergeCoins.sources.map((arg) => convertTransactionArgument(arg, inputs)),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.MoveCall) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'MoveCall',\n\t\t\t\t\ttarget: `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`,\n\t\t\t\t\ttypeArguments: command.MoveCall.typeArguments,\n\t\t\t\t\targuments: command.MoveCall.arguments.map((arg) =>\n\t\t\t\t\t\tconvertTransactionArgument(arg, inputs),\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.Publish) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Publish',\n\t\t\t\t\tmodules: command.Publish.modules.map((mod) => Array.from(fromBase64(mod))),\n\t\t\t\t\tdependencies: command.Publish.dependencies,\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.SplitCoins) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'SplitCoins',\n\t\t\t\t\tcoin: convertTransactionArgument(command.SplitCoins.coin, inputs),\n\t\t\t\t\tamounts: command.SplitCoins.amounts.map((arg) => convertTransactionArgument(arg, inputs)),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.TransferObjects) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'TransferObjects',\n\t\t\t\t\tobjects: command.TransferObjects.objects.map((arg) =>\n\t\t\t\t\t\tconvertTransactionArgument(arg, inputs),\n\t\t\t\t\t),\n\t\t\t\t\taddress: convertTransactionArgument(command.TransferObjects.address, inputs),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (command.Upgrade) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Upgrade',\n\t\t\t\t\tmodules: command.Upgrade.modules.map((mod) => Array.from(fromBase64(mod))),\n\t\t\t\t\tdependencies: command.Upgrade.dependencies,\n\t\t\t\t\tpackageId: command.Upgrade.package,\n\t\t\t\t\tticket: convertTransactionArgument(command.Upgrade.ticket, inputs),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new Error(`Unknown transaction ${Object.keys(command)}`);\n\t\t}),\n\t};\n}\n\nfunction convertTransactionArgument(\n\targ: Argument,\n\tinputs: InferOutput<typeof TransactionInput>[],\n): InferOutput<typeof TransactionArgument> {\n\tif (arg.$kind === 'GasCoin') {\n\t\treturn { kind: 'GasCoin' };\n\t}\n\tif (arg.$kind === 'Result') {\n\t\treturn { kind: 'Result', index: arg.Result };\n\t}\n\tif (arg.$kind === 'NestedResult') {\n\t\treturn { kind: 'NestedResult', index: arg.NestedResult[0], resultIndex: arg.NestedResult[1] };\n\t}\n\tif (arg.$kind === 'Input') {\n\t\treturn inputs[arg.Input];\n\t}\n\n\tthrow new Error(`Invalid argument ${Object.keys(arg)}`);\n}\n\nexport function transactionDataFromV1(data: SerializedTransactionDataV1): TransactionData {\n\treturn parse(TransactionData, {\n\t\tversion: 2,\n\t\tsender: data.sender ?? null,\n\t\texpiration: data.expiration\n\t\t\t? 'Epoch' in data.expiration\n\t\t\t\t? { Epoch: data.expiration.Epoch }\n\t\t\t\t: { None: true }\n\t\t\t: null,\n\t\tgasData: {\n\t\t\towner: data.gasConfig.owner ?? null,\n\t\t\tbudget: data.gasConfig.budget?.toString() ?? null,\n\t\t\tprice: data.gasConfig.price?.toString() ?? null,\n\t\t\tpayment:\n\t\t\t\tdata.gasConfig.payment?.map((ref) => ({\n\t\t\t\t\tdigest: ref.digest,\n\t\t\t\t\tobjectId: ref.objectId,\n\t\t\t\t\tversion: ref.version.toString(),\n\t\t\t\t})) ?? null,\n\t\t},\n\t\tinputs: data.inputs.map((input) => {\n\t\t\tif (input.kind === 'Input') {\n\t\t\t\tif (is(NormalizedCallArg, input.value)) {\n\t\t\t\t\tconst value = parse(NormalizedCallArg, input.value);\n\n\t\t\t\t\tif (value.Object) {\n\t\t\t\t\t\tif (value.Object.ImmOrOwned) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tObject: {\n\t\t\t\t\t\t\t\t\tImmOrOwnedObject: {\n\t\t\t\t\t\t\t\t\t\tobjectId: value.Object.ImmOrOwned.objectId,\n\t\t\t\t\t\t\t\t\t\tversion: String(value.Object.ImmOrOwned.version),\n\t\t\t\t\t\t\t\t\t\tdigest: value.Object.ImmOrOwned.digest,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value.Object.Shared) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tObject: {\n\t\t\t\t\t\t\t\t\tSharedObject: {\n\t\t\t\t\t\t\t\t\t\tmutable: value.Object.Shared.mutable ?? null,\n\t\t\t\t\t\t\t\t\t\tinitialSharedVersion: value.Object.Shared.initialSharedVersion,\n\t\t\t\t\t\t\t\t\t\tobjectId: value.Object.Shared.objectId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value.Object.Receiving) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tObject: {\n\t\t\t\t\t\t\t\t\tReceiving: {\n\t\t\t\t\t\t\t\t\t\tdigest: value.Object.Receiving.digest,\n\t\t\t\t\t\t\t\t\t\tversion: String(value.Object.Receiving.version),\n\t\t\t\t\t\t\t\t\t\tobjectId: value.Object.Receiving.objectId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow new Error('Invalid object input');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tPure: {\n\t\t\t\t\t\t\tbytes: toBase64(new Uint8Array(value.Pure)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (input.type === 'object') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tUnresolvedObject: {\n\t\t\t\t\t\t\tobjectId: input.value as string,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tUnresolvedPure: {\n\t\t\t\t\t\tvalue: input.value,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new Error('Invalid input');\n\t\t}),\n\t\tcommands: data.transactions.map((transaction) => {\n\t\t\tswitch (transaction.kind) {\n\t\t\t\tcase 'MakeMoveVec':\n\t\t\t\t\treturn {\n\t\t\t\t\t\tMakeMoveVec: {\n\t\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\t\t'Some' in transaction.type\n\t\t\t\t\t\t\t\t\t? TypeTagSerializer.tagToString(transaction.type.Some)\n\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\telements: transaction.objects.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase 'MergeCoins': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tMergeCoins: {\n\t\t\t\t\t\t\tdestination: parseV1TransactionArgument(transaction.destination),\n\t\t\t\t\t\t\tsources: transaction.sources.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'MoveCall': {\n\t\t\t\t\tconst [pkg, mod, fn] = transaction.target.split('::');\n\t\t\t\t\treturn {\n\t\t\t\t\t\tMoveCall: {\n\t\t\t\t\t\t\tpackage: pkg,\n\t\t\t\t\t\t\tmodule: mod,\n\t\t\t\t\t\t\tfunction: fn,\n\t\t\t\t\t\t\ttypeArguments: transaction.typeArguments,\n\t\t\t\t\t\t\targuments: transaction.arguments.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'Publish': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tPublish: {\n\t\t\t\t\t\t\tmodules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),\n\t\t\t\t\t\t\tdependencies: transaction.dependencies,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'SplitCoins': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tSplitCoins: {\n\t\t\t\t\t\t\tcoin: parseV1TransactionArgument(transaction.coin),\n\t\t\t\t\t\t\tamounts: transaction.amounts.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'TransferObjects': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tTransferObjects: {\n\t\t\t\t\t\t\tobjects: transaction.objects.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t\taddress: parseV1TransactionArgument(transaction.address),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'Upgrade': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tUpgrade: {\n\t\t\t\t\t\t\tmodules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),\n\t\t\t\t\t\t\tdependencies: transaction.dependencies,\n\t\t\t\t\t\t\tpackage: transaction.packageId,\n\t\t\t\t\t\t\tticket: parseV1TransactionArgument(transaction.ticket),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(`Unknown transaction ${Object.keys(transaction)}`);\n\t\t}),\n\t} satisfies InferInput<typeof TransactionData>);\n}\n\nfunction parseV1TransactionArgument(\n\targ: InferOutput<typeof TransactionArgument>,\n): InferInput<typeof Argument> {\n\tswitch (arg.kind) {\n\t\tcase 'GasCoin': {\n\t\t\treturn { GasCoin: true };\n\t\t}\n\t\tcase 'Result':\n\t\t\treturn { Result: arg.index };\n\t\tcase 'NestedResult': {\n\t\t\treturn { NestedResult: [arg.index, arg.resultIndex] };\n\t\t}\n\t\tcase 'Input': {\n\t\t\treturn { Input: arg.index };\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2053, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/data/v2.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumInputShape } from '@mysten/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n\tarray,\n\tboolean,\n\tinteger,\n\tliteral,\n\tnullable,\n\tnullish,\n\tnumber,\n\tobject,\n\toptional,\n\tpipe,\n\trecord,\n\tstring,\n\ttuple,\n\tunion,\n\tunknown,\n} from 'valibot';\n\nimport { BCSBytes, JsonU64, ObjectID, ObjectRef, SuiAddress } from './internal.js';\nimport type { Simplify } from '@mysten/utils';\n\nfunction enumUnion<T extends Record<string, GenericSchema<any>>>(options: T) {\n\treturn union(\n\t\tObject.entries(options).map(([key, value]) => object({ [key]: value })),\n\t) as GenericSchema<\n\t\tEnumInputShape<\n\t\t\tSimplify<{\n\t\t\t\t[K in keyof T]: InferInput<T[K]>;\n\t\t\t}>\n\t\t>\n\t>;\n}\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L690-L702\nconst Argument = enumUnion({\n\tGasCoin: literal(true),\n\tInput: pipe(number(), integer()),\n\tResult: pipe(number(), integer()),\n\tNestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())]),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L1387-L1392\nconst GasData = object({\n\tbudget: nullable(JsonU64),\n\tprice: nullable(JsonU64),\n\towner: nullable(SuiAddress),\n\tpayment: nullable(array(ObjectRef)),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L707-L718\nconst ProgrammableMoveCall = object({\n\tpackage: ObjectID,\n\tmodule: string(),\n\tfunction: string(),\n\t// snake case in rust\n\ttypeArguments: array(string()),\n\targuments: array(Argument),\n});\n\nconst $Intent = object({\n\tname: string(),\n\tinputs: record(string(), union([Argument, array(Argument)])),\n\tdata: record(string(), unknown()),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L657-L685\nconst Command = enumUnion({\n\tMoveCall: ProgrammableMoveCall,\n\tTransferObjects: object({\n\t\tobjects: array(Argument),\n\t\taddress: Argument,\n\t}),\n\tSplitCoins: object({\n\t\tcoin: Argument,\n\t\tamounts: array(Argument),\n\t}),\n\tMergeCoins: object({\n\t\tdestination: Argument,\n\t\tsources: array(Argument),\n\t}),\n\tPublish: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t}),\n\tMakeMoveVec: object({\n\t\ttype: nullable(string()),\n\t\telements: array(Argument),\n\t}),\n\tUpgrade: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t\tpackage: ObjectID,\n\t\tticket: Argument,\n\t}),\n\t$Intent,\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L102-L114\nconst ObjectArg = enumUnion({\n\tImmOrOwnedObject: ObjectRef,\n\tSharedObject: object({\n\t\tobjectId: ObjectID,\n\t\t// snake case in rust\n\t\tinitialSharedVersion: JsonU64,\n\t\tmutable: boolean(),\n\t}),\n\tReceiving: ObjectRef,\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L75-L80\nconst CallArg = enumUnion({\n\tObject: ObjectArg,\n\tPure: object({\n\t\tbytes: BCSBytes,\n\t}),\n\tUnresolvedPure: object({\n\t\tvalue: unknown(),\n\t}),\n\tUnresolvedObject: object({\n\t\tobjectId: ObjectID,\n\t\tversion: optional(nullable(JsonU64)),\n\t\tdigest: optional(nullable(string())),\n\t\tinitialSharedVersion: optional(nullable(JsonU64)),\n\t}),\n});\n\nconst TransactionExpiration = enumUnion({\n\tNone: literal(true),\n\tEpoch: JsonU64,\n});\n\nexport const SerializedTransactionDataV2 = object({\n\tversion: literal(2),\n\tsender: nullish(SuiAddress),\n\texpiration: nullish(TransactionExpiration),\n\tgasData: GasData,\n\tinputs: array(CallArg),\n\tcommands: array(Command),\n});\n\nexport type SerializedTransactionDataV2 = InferOutput<typeof SerializedTransactionDataV2>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2172, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/Inputs.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toBase64 } from '@mysten/bcs';\nimport type { SerializedBcs } from '@mysten/bcs';\n\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { CallArg, ObjectRef } from './data/internal.js';\n\nfunction Pure(data: Uint8Array | SerializedBcs<any>): Extract<CallArg, { Pure: unknown }> {\n\treturn {\n\t\t$kind: 'Pure',\n\t\tPure: {\n\t\t\tbytes: data instanceof Uint8Array ? toBase64(data) : data.toBase64(),\n\t\t},\n\t};\n}\n\nexport const Inputs = {\n\tPure,\n\tObjectRef({ objectId, digest, version }: ObjectRef): Extract<CallArg, { Object: unknown }> {\n\t\treturn {\n\t\t\t$kind: 'Object',\n\t\t\tObject: {\n\t\t\t\t$kind: 'ImmOrOwnedObject',\n\t\t\t\tImmOrOwnedObject: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tSharedObjectRef({\n\t\tobjectId,\n\t\tmutable,\n\t\tinitialSharedVersion,\n\t}: {\n\t\tobjectId: string;\n\t\tmutable: boolean;\n\t\tinitialSharedVersion: number | string;\n\t}): Extract<CallArg, { Object: unknown }> {\n\t\treturn {\n\t\t\t$kind: 'Object',\n\t\t\tObject: {\n\t\t\t\t$kind: 'SharedObject',\n\t\t\t\tSharedObject: {\n\t\t\t\t\tmutable,\n\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tReceivingRef({ objectId, digest, version }: ObjectRef): Extract<CallArg, { Object: unknown }> {\n\t\treturn {\n\t\t\t$kind: 'Object',\n\t\t\tObject: {\n\t\t\t\t$kind: 'Receiving',\n\t\t\t\tReceiving: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n};\n"],"names":[],"mappings":";;;AAGA,SAAS,gBAAgB;AAGzB,SAAS,2BAA2B;;;AAGpC,SAAS,KAAK,IAAA,EAA4E;IACzF,OAAO;QACN,OAAO;QACP,MAAM;YACL,OAAO,gBAAgB,+MAAa,WAAA,EAAS,IAAI,IAAI,KAAK,QAAA,CAAS;QACpE;IACD;AACD;AAEO,MAAM,SAAS;IACrB;IACA,gBAAsC;cAA1B,QAAA,EAAU,MAAA,EAAQ,OAAA,CAAQ,CAAA,EAAqD,CAAjF;QACT,OAAO;YACN,OAAO;YACP,QAAQ;gBACP,OAAO;gBACP,kBAAkB;oBACjB;oBACA;oBACA,8NAAU,sBAAA,EAAoB,QAAQ;gBACvC;YACD;QACD;IACD;IACA,sBAIA;cAHC,QAAA,EACA,OAAA,EACA,oBAAA,EACD,EAI0C,CAR1B;QASf,OAAO;YACN,OAAO;YACP,QAAQ;gBACP,OAAO;gBACP,cAAc;oBACb;oBACA;oBACA,WAAU,yOAAA,EAAoB,QAAQ;gBACvC;YACD;QACD;IACD;IACA,mBAAyC,EAAqD;cAA/E,QAAA,EAAU,MAAA,EAAQ,OAAA,CAAQ,CAAA,GAA5B;QACZ,OAAO;YACN,OAAO;YACP,QAAQ;gBACP,OAAO;gBACP,WAAW;oBACV;oBACA;oBACA,8NAAU,sBAAA,EAAoB,QAAQ;gBACvC;YACD;QACD;IACD;AACD","debugId":null}},
    {"offset": {"line": 2238, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/utils/constants.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { normalizeSuiObjectId } from './sui-types.js';\n\nexport const SUI_DECIMALS = 9;\nexport const MIST_PER_SUI = BigInt(1000000000);\n\nexport const MOVE_STDLIB_ADDRESS = '0x1';\nexport const SUI_FRAMEWORK_ADDRESS = '0x2';\nexport const SUI_SYSTEM_ADDRESS = '0x3';\nexport const SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId('0x6');\nexport const SUI_SYSTEM_MODULE_NAME = 'sui_system';\nexport const SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nexport const SUI_SYSTEM_STATE_OBJECT_ID: string = normalizeSuiObjectId('0x5');\n"],"names":[],"mappings":";;;;;;;;;;;AAGA,SAAS,4BAA4B;;AAE9B,MAAM,eAAe;AACrB,MAAM,eAAe,OAAO,GAAU;AAEtC,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB;AAC9B,MAAM,qBAAqB;AAC3B,MAAM,0OAAsB,uBAAA,EAAqB,KAAK;AACtD,MAAM,yBAAyB;AAC/B,MAAM,eAAe,GAAwB,OAArB,qBAAqB,EAAA;AAC7C,MAAM,iPAAqC,uBAAA,EAAqB,KAAK","debugId":null}},
    {"offset": {"line": 2266, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/serializer.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport type { SuiMoveNormalizedType } from '../client/index.js';\nimport { MOVE_STDLIB_ADDRESS, SUI_FRAMEWORK_ADDRESS } from '../utils/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { OpenMoveTypeSignature, OpenMoveTypeSignatureBody } from './data/internal.js';\n\nconst OBJECT_MODULE_NAME = 'object';\nconst ID_STRUCT_NAME = 'ID';\n\nconst STD_ASCII_MODULE_NAME = 'ascii';\nconst STD_ASCII_STRUCT_NAME = 'String';\n\nconst STD_UTF8_MODULE_NAME = 'string';\nconst STD_UTF8_STRUCT_NAME = 'String';\n\nconst STD_OPTION_MODULE_NAME = 'option';\nconst STD_OPTION_STRUCT_NAME = 'Option';\n\nexport function isTxContext(param: OpenMoveTypeSignature): boolean {\n\tconst struct =\n\t\ttypeof param.body === 'object' && 'datatype' in param.body ? param.body.datatype : null;\n\n\treturn (\n\t\t!!struct &&\n\t\tnormalizeSuiAddress(struct.package) === normalizeSuiAddress('0x2') &&\n\t\tstruct.module === 'tx_context' &&\n\t\tstruct.type === 'TxContext'\n\t);\n}\n\nexport function getPureBcsSchema(typeSignature: OpenMoveTypeSignatureBody): BcsType<any> | null {\n\tif (typeof typeSignature === 'string') {\n\t\tswitch (typeSignature) {\n\t\t\tcase 'address':\n\t\t\t\treturn bcs.Address;\n\t\t\tcase 'bool':\n\t\t\t\treturn bcs.Bool;\n\t\t\tcase 'u8':\n\t\t\t\treturn bcs.U8;\n\t\t\tcase 'u16':\n\t\t\t\treturn bcs.U16;\n\t\t\tcase 'u32':\n\t\t\t\treturn bcs.U32;\n\t\t\tcase 'u64':\n\t\t\t\treturn bcs.U64;\n\t\t\tcase 'u128':\n\t\t\t\treturn bcs.U128;\n\t\t\tcase 'u256':\n\t\t\t\treturn bcs.U256;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown type signature ${typeSignature}`);\n\t\t}\n\t}\n\n\tif ('vector' in typeSignature) {\n\t\tif (typeSignature.vector === 'u8') {\n\t\t\treturn bcs.vector(bcs.U8).transform({\n\t\t\t\tinput: (val: string | Uint8Array) =>\n\t\t\t\t\ttypeof val === 'string' ? new TextEncoder().encode(val) : val,\n\t\t\t\toutput: (val) => val,\n\t\t\t});\n\t\t}\n\t\tconst type = getPureBcsSchema(typeSignature.vector);\n\t\treturn type ? bcs.vector(type) : null;\n\t}\n\n\tif ('datatype' in typeSignature) {\n\t\tconst pkg = normalizeSuiAddress(typeSignature.datatype.package);\n\n\t\tif (pkg === normalizeSuiAddress(MOVE_STDLIB_ADDRESS)) {\n\t\t\tif (\n\t\t\t\ttypeSignature.datatype.module === STD_ASCII_MODULE_NAME &&\n\t\t\t\ttypeSignature.datatype.type === STD_ASCII_STRUCT_NAME\n\t\t\t) {\n\t\t\t\treturn bcs.String;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeSignature.datatype.module === STD_UTF8_MODULE_NAME &&\n\t\t\t\ttypeSignature.datatype.type === STD_UTF8_STRUCT_NAME\n\t\t\t) {\n\t\t\t\treturn bcs.String;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeSignature.datatype.module === STD_OPTION_MODULE_NAME &&\n\t\t\t\ttypeSignature.datatype.type === STD_OPTION_STRUCT_NAME\n\t\t\t) {\n\t\t\t\tconst type = getPureBcsSchema(typeSignature.datatype.typeParameters[0]);\n\t\t\t\treturn type ? bcs.vector(type) : null;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tpkg === normalizeSuiAddress(SUI_FRAMEWORK_ADDRESS) &&\n\t\t\ttypeSignature.datatype.module === OBJECT_MODULE_NAME &&\n\t\t\ttypeSignature.datatype.type === ID_STRUCT_NAME\n\t\t) {\n\t\t\treturn bcs.Address;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function normalizedTypeToMoveTypeSignature(\n\ttype: SuiMoveNormalizedType,\n): OpenMoveTypeSignature {\n\tif (typeof type === 'object' && 'Reference' in type) {\n\t\treturn {\n\t\t\tref: '&',\n\t\t\tbody: normalizedTypeToMoveTypeSignatureBody(type.Reference),\n\t\t};\n\t}\n\tif (typeof type === 'object' && 'MutableReference' in type) {\n\t\treturn {\n\t\t\tref: '&mut',\n\t\t\tbody: normalizedTypeToMoveTypeSignatureBody(type.MutableReference),\n\t\t};\n\t}\n\n\treturn {\n\t\tref: null,\n\t\tbody: normalizedTypeToMoveTypeSignatureBody(type),\n\t};\n}\n\nfunction normalizedTypeToMoveTypeSignatureBody(\n\ttype: SuiMoveNormalizedType,\n): OpenMoveTypeSignatureBody {\n\tif (typeof type === 'string') {\n\t\tswitch (type) {\n\t\t\tcase 'Address':\n\t\t\t\treturn 'address';\n\t\t\tcase 'Bool':\n\t\t\t\treturn 'bool';\n\t\t\tcase 'U8':\n\t\t\t\treturn 'u8';\n\t\t\tcase 'U16':\n\t\t\t\treturn 'u16';\n\t\t\tcase 'U32':\n\t\t\t\treturn 'u32';\n\t\t\tcase 'U64':\n\t\t\t\treturn 'u64';\n\t\t\tcase 'U128':\n\t\t\t\treturn 'u128';\n\t\t\tcase 'U256':\n\t\t\t\treturn 'u256';\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected type ${type}`);\n\t\t}\n\t}\n\n\tif ('Vector' in type) {\n\t\treturn { vector: normalizedTypeToMoveTypeSignatureBody(type.Vector) };\n\t}\n\n\tif ('Struct' in type) {\n\t\treturn {\n\t\t\tdatatype: {\n\t\t\t\tpackage: type.Struct.address,\n\t\t\t\tmodule: type.Struct.module,\n\t\t\t\ttype: type.Struct.name,\n\t\t\t\ttypeParameters: type.Struct.typeArguments.map(normalizedTypeToMoveTypeSignatureBody),\n\t\t\t},\n\t\t};\n\t}\n\n\tif ('TypeParameter' in type) {\n\t\treturn { typeParameter: type.TypeParameter };\n\t}\n\n\tthrow new Error(`Unexpected type ${JSON.stringify(type)}`);\n}\n\nexport function pureBcsSchemaFromOpenMoveTypeSignatureBody(\n\ttypeSignature: OpenMoveTypeSignatureBody,\n): BcsType<any> {\n\tif (typeof typeSignature === 'string') {\n\t\tswitch (typeSignature) {\n\t\t\tcase 'address':\n\t\t\t\treturn bcs.Address;\n\t\t\tcase 'bool':\n\t\t\t\treturn bcs.Bool;\n\t\t\tcase 'u8':\n\t\t\t\treturn bcs.U8;\n\t\t\tcase 'u16':\n\t\t\t\treturn bcs.U16;\n\t\t\tcase 'u32':\n\t\t\t\treturn bcs.U32;\n\t\t\tcase 'u64':\n\t\t\t\treturn bcs.U64;\n\t\t\tcase 'u128':\n\t\t\t\treturn bcs.U128;\n\t\t\tcase 'u256':\n\t\t\t\treturn bcs.U256;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown type signature ${typeSignature}`);\n\t\t}\n\t}\n\n\tif ('vector' in typeSignature) {\n\t\treturn bcs.vector(pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature.vector));\n\t}\n\n\tthrow new Error(`Expected pure typeSignature, but got ${JSON.stringify(typeSignature)}`);\n}\n"],"names":[],"mappings":";;;;;;AAKA,SAAS,WAAW;AAEpB,SAAS,qBAAqB,6BAA6B;AAC3D,SAAS,2BAA2B;;;;AAGpC,MAAM,qBAAqB;AAC3B,MAAM,iBAAiB;AAEvB,MAAM,wBAAwB;AAC9B,MAAM,wBAAwB;AAE9B,MAAM,uBAAuB;AAC7B,MAAM,uBAAuB;AAE7B,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAExB,SAAS,YAAY,KAAA,EAAuC;IAClE,MAAM,SACL,OAAO,MAAM,IAAA,KAAS,YAAY,cAAc,MAAM,IAAA,GAAO,MAAM,IAAA,CAAK,QAAA,GAAW;IAEpF,OACC,CAAC,CAAC,8NACF,sBAAA,EAAoB,OAAO,OAAO,0NAAM,sBAAA,EAAoB,KAAK,KACjE,OAAO,MAAA,KAAW,gBAClB,OAAO,IAAA,KAAS;AAElB;AAEO,SAAS,iBAAiB,aAAA,EAA+D;IAC/F,IAAI,OAAO,kBAAkB,UAAU;QACtC,OAAQ,eAAe;YACtB,KAAK;gBACJ,8NAAO,MAAA,CAAI,OAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,IAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,EAAA;YACZ,KAAK;gBACJ,OAAO,6NAAA,CAAI,GAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,GAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,GAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,IAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,IAAA;YACZ;gBACC,MAAM,IAAI,MAAM,0BAAuC,CAAE,MAAf,aAAa;QACzD;IACD;IAEA,IAAI,YAAY,eAAe;QAC9B,IAAI,cAAc,MAAA,KAAW,MAAM;YAClC,8NAAO,MAAA,CAAI,MAAA,wNAAO,MAAA,CAAI,EAAE,EAAE,SAAA,CAAU;gBACnC,OAAO,CAAC,MACP,OAAO,QAAQ,WAAW,IAAI,YAAY,EAAE,MAAA,CAAO,GAAG,IAAI;gBAC3D,QAAQ,CAAC,MAAQ;YAClB,CAAC;QACF;QACA,MAAM,OAAO,iBAAiB,cAAc,MAAM;QAClD,OAAO,8NAAO,MAAA,CAAI,MAAA,CAAO,IAAI,IAAI;IAClC;IAEA,IAAI,cAAc,eAAe;QAChC,MAAM,0NAAM,sBAAA,EAAoB,cAAc,QAAA,CAAS,OAAO;QAE9D,IAAI,4NAAQ,sBAAA,+MAAoB,sBAAmB,GAAG;YACrD,IACC,cAAc,QAAA,CAAS,MAAA,KAAW,yBAClC,cAAc,QAAA,CAAS,IAAA,KAAS,uBAC/B;gBACD,8NAAO,MAAA,CAAI,MAAA;YACZ;YAEA,IACC,cAAc,QAAA,CAAS,MAAA,KAAW,wBAClC,cAAc,QAAA,CAAS,IAAA,KAAS,sBAC/B;gBACD,8NAAO,MAAA,CAAI,MAAA;YACZ;YAEA,IACC,cAAc,QAAA,CAAS,MAAA,KAAW,0BAClC,cAAc,QAAA,CAAS,IAAA,KAAS,wBAC/B;gBACD,MAAM,OAAO,iBAAiB,cAAc,QAAA,CAAS,cAAA,CAAe,CAAC,CAAC;gBACtE,OAAO,8NAAO,MAAA,CAAI,MAAA,CAAO,IAAI,IAAI;YAClC;QACD;QAEA,IACC,SAAQ,yOAAA,+MAAoB,wBAAqB,KACjD,cAAc,QAAA,CAAS,MAAA,KAAW,sBAClC,cAAc,QAAA,CAAS,IAAA,KAAS,gBAC/B;YACD,8NAAO,MAAA,CAAI,OAAA;QACZ;IACD;IAEA,OAAO;AACR;AAEO,SAAS,kCACf,IAAA,EACwB;IACxB,IAAI,OAAO,SAAS,YAAY,eAAe,MAAM;QACpD,OAAO;YACN,KAAK;YACL,MAAM,sCAAsC,KAAK,SAAS;QAC3D;IACD;IACA,IAAI,OAAO,SAAS,YAAY,sBAAsB,MAAM;QAC3D,OAAO;YACN,KAAK;YACL,MAAM,sCAAsC,KAAK,gBAAgB;QAClE;IACD;IAEA,OAAO;QACN,KAAK;QACL,MAAM,sCAAsC,IAAI;IACjD;AACD;AAEA,SAAS,sCACR,IAAA,EAC4B;IAC5B,IAAI,OAAO,SAAS,UAAU;QAC7B,OAAQ,MAAM;YACb,KAAK;gBACJ,OAAO;YACR,KAAK;gBACJ,OAAO;YACR,KAAK;gBACJ,OAAO;YACR,KAAK;gBACJ,OAAO;YACR,KAAK;gBACJ,OAAO;YACR,KAAK;gBACJ,OAAO;YACR,KAAK;gBACJ,OAAO;YACR,KAAK;gBACJ,OAAO;YACR;gBACC,MAAM,IAAI,MAAM,mBAAuB,CAAE,MAAN,IAAI;QACzC;IACD;IAEA,IAAI,YAAY,MAAM;QACrB,OAAO;YAAE,QAAQ,sCAAsC,KAAK,MAAM;QAAE;IACrE;IAEA,IAAI,YAAY,MAAM;QACrB,OAAO;YACN,UAAU;gBACT,SAAS,KAAK,MAAA,CAAO,OAAA;gBACrB,QAAQ,KAAK,MAAA,CAAO,MAAA;gBACpB,MAAM,KAAK,MAAA,CAAO,IAAA;gBAClB,gBAAgB,KAAK,MAAA,CAAO,aAAA,CAAc,GAAA,CAAI,qCAAqC;YACpF;QACD;IACD;IAEA,IAAI,mBAAmB,MAAM;QAC5B,OAAO;YAAE,eAAe,KAAK,aAAA;QAAc;IAC5C;IAEA,MAAM,IAAI,MAAM,mBAAuC,CAAE,MAAtB,KAAK,SAAA,CAAU,IAAI,CAAC;AACxD;AAEO,SAAS,2CACf,aAAA,EACe;IACf,IAAI,OAAO,kBAAkB,UAAU;QACtC,OAAQ,eAAe;YACtB,KAAK;gBACJ,6NAAO,OAAA,CAAI,OAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,IAAA;YACZ,KAAK;gBACJ,6NAAO,OAAA,CAAI,EAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,GAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,GAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,GAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,IAAA;YACZ,KAAK;gBACJ,8NAAO,MAAA,CAAI,IAAA;YACZ;gBACC,MAAM,IAAI,MAAM,0BAAuC,CAAE,MAAf,aAAa;QACzD;IACD;IAEA,IAAI,YAAY,eAAe;QAC9B,8NAAO,MAAA,CAAI,MAAA,CAAO,2CAA2C,cAAc,MAAM,CAAC;IACnF;IAEA,MAAM,IAAI,MAAM,wCAAqE,CAAE,MAA/B,KAAK,SAAA,CAAU,aAAa,CAAC;AACtF","debugId":null}},
    {"offset": {"line": 2440, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/json-rpc-resolver.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { parse } from 'valibot';\n\nimport type { BcsType } from '../bcs/index.js';\nimport { bcs } from '../bcs/index.js';\nimport type { SuiClient } from '../client/client.js';\nimport { normalizeSuiAddress, normalizeSuiObjectId, SUI_TYPE_ARG } from '../utils/index.js';\nimport { ObjectRef } from './data/internal.js';\nimport type { Argument, CallArg, Command, OpenMoveTypeSignature } from './data/internal.js';\nimport { Inputs } from './Inputs.js';\nimport { getPureBcsSchema, isTxContext, normalizedTypeToMoveTypeSignature } from './serializer.js';\nimport type { TransactionDataBuilder } from './TransactionData.js';\nimport { chunk } from '@mysten/utils';\n\n// The maximum objects that can be fetched at once using multiGetObjects.\nconst MAX_OBJECTS_PER_FETCH = 50;\n\n// An amount of gas (in gas units) that is added to transactions as an overhead to ensure transactions do not fail.\nconst GAS_SAFE_OVERHEAD = 1000n;\nconst MAX_GAS = 50_000_000_000;\n\nexport interface BuildTransactionOptions {\n\tclient?: SuiClient;\n\tonlyTransactionKind?: boolean;\n}\n\nexport interface SerializeTransactionOptions extends BuildTransactionOptions {\n\tsupportedIntents?: string[];\n}\n\nexport type TransactionPlugin = (\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n\tnext: () => Promise<void>,\n) => Promise<void>;\n\nexport async function resolveTransactionData(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n\tnext: () => Promise<void>,\n) {\n\tawait normalizeInputs(transactionData, options);\n\tawait resolveObjectReferences(transactionData, options);\n\n\tif (!options.onlyTransactionKind) {\n\t\tawait setGasPrice(transactionData, options);\n\t\tawait setGasBudget(transactionData, options);\n\t\tawait setGasPayment(transactionData, options);\n\t}\n\tawait validate(transactionData);\n\treturn await next();\n}\n\nasync function setGasPrice(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\tif (!transactionData.gasConfig.price) {\n\t\ttransactionData.gasConfig.price = String(await getClient(options).getReferenceGasPrice());\n\t}\n}\n\nasync function setGasBudget(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\tif (transactionData.gasConfig.budget) {\n\t\treturn;\n\t}\n\n\tconst dryRunResult = await getClient(options).dryRunTransactionBlock({\n\t\ttransactionBlock: transactionData.build({\n\t\t\toverrides: {\n\t\t\t\tgasData: {\n\t\t\t\t\tbudget: String(MAX_GAS),\n\t\t\t\t\tpayment: [],\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t});\n\n\tif (dryRunResult.effects.status.status !== 'success') {\n\t\tthrow new Error(\n\t\t\t`Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,\n\t\t\t{ cause: dryRunResult },\n\t\t);\n\t}\n\n\tconst safeOverhead = GAS_SAFE_OVERHEAD * BigInt(transactionData.gasConfig.price || 1n);\n\n\tconst baseComputationCostWithOverhead =\n\t\tBigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;\n\n\tconst gasBudget =\n\t\tbaseComputationCostWithOverhead +\n\t\tBigInt(dryRunResult.effects.gasUsed.storageCost) -\n\t\tBigInt(dryRunResult.effects.gasUsed.storageRebate);\n\n\ttransactionData.gasConfig.budget = String(\n\t\tgasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead,\n\t);\n}\n\n// The current default is just picking _all_ coins we can which may not be ideal.\nasync function setGasPayment(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\tif (!transactionData.gasConfig.payment) {\n\t\tconst coins = await getClient(options).getCoins({\n\t\t\towner: transactionData.gasConfig.owner || transactionData.sender!,\n\t\t\tcoinType: SUI_TYPE_ARG,\n\t\t});\n\n\t\tconst paymentCoins = coins.data\n\t\t\t// Filter out coins that are also used as input:\n\t\t\t.filter((coin) => {\n\t\t\t\tconst matchingInput = transactionData.inputs.find((input) => {\n\t\t\t\t\tif (input.Object?.ImmOrOwnedObject) {\n\t\t\t\t\t\treturn coin.coinObjectId === input.Object.ImmOrOwnedObject.objectId;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\treturn !matchingInput;\n\t\t\t})\n\t\t\t.map((coin) => ({\n\t\t\t\tobjectId: coin.coinObjectId,\n\t\t\t\tdigest: coin.digest,\n\t\t\t\tversion: coin.version,\n\t\t\t}));\n\n\t\tif (!paymentCoins.length) {\n\t\t\tthrow new Error('No valid gas coins found for the transaction.');\n\t\t}\n\n\t\ttransactionData.gasConfig.payment = paymentCoins.map((payment) => parse(ObjectRef, payment));\n\t}\n}\n\nasync function resolveObjectReferences(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\t// Keep track of the object references that will need to be resolved at the end of the transaction.\n\t// We keep the input by-reference to avoid needing to re-resolve it:\n\tconst objectsToResolve = transactionData.inputs.filter((input) => {\n\t\treturn (\n\t\t\tinput.UnresolvedObject &&\n\t\t\t!(input.UnresolvedObject.version || input.UnresolvedObject?.initialSharedVersion)\n\t\t);\n\t}) as Extract<CallArg, { UnresolvedObject: unknown }>[];\n\n\tconst dedupedIds = [\n\t\t...new Set(\n\t\t\tobjectsToResolve.map((input) => normalizeSuiObjectId(input.UnresolvedObject.objectId)),\n\t\t),\n\t];\n\n\tconst objectChunks = dedupedIds.length ? chunk(dedupedIds, MAX_OBJECTS_PER_FETCH) : [];\n\tconst resolved = (\n\t\tawait Promise.all(\n\t\t\tobjectChunks.map((chunk) =>\n\t\t\t\tgetClient(options).multiGetObjects({\n\t\t\t\t\tids: chunk,\n\t\t\t\t\toptions: { showOwner: true },\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n\t).flat();\n\n\tconst responsesById = new Map(\n\t\tdedupedIds.map((id, index) => {\n\t\t\treturn [id, resolved[index]];\n\t\t}),\n\t);\n\n\tconst invalidObjects = Array.from(responsesById)\n\t\t.filter(([_, obj]) => obj.error)\n\t\t.map(([_, obj]) => JSON.stringify(obj.error));\n\n\tif (invalidObjects.length) {\n\t\tthrow new Error(`The following input objects are invalid: ${invalidObjects.join(', ')}`);\n\t}\n\n\tconst objects = resolved.map((object) => {\n\t\tif (object.error || !object.data) {\n\t\t\tthrow new Error(`Failed to fetch object: ${object.error}`);\n\t\t}\n\t\tconst owner = object.data.owner;\n\t\tconst initialSharedVersion =\n\t\t\towner && typeof owner === 'object' && 'Shared' in owner\n\t\t\t\t? owner.Shared.initial_shared_version\n\t\t\t\t: null;\n\n\t\treturn {\n\t\t\tobjectId: object.data.objectId,\n\t\t\tdigest: object.data.digest,\n\t\t\tversion: object.data.version,\n\t\t\tinitialSharedVersion,\n\t\t};\n\t});\n\n\tconst objectsById = new Map(\n\t\tdedupedIds.map((id, index) => {\n\t\t\treturn [id, objects[index]];\n\t\t}),\n\t);\n\n\tfor (const [index, input] of transactionData.inputs.entries()) {\n\t\tif (!input.UnresolvedObject) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet updated: CallArg | undefined;\n\t\tconst id = normalizeSuiAddress(input.UnresolvedObject.objectId);\n\t\tconst object = objectsById.get(id);\n\n\t\tif (input.UnresolvedObject.initialSharedVersion ?? object?.initialSharedVersion) {\n\t\t\tupdated = Inputs.SharedObjectRef({\n\t\t\t\tobjectId: id,\n\t\t\t\tinitialSharedVersion:\n\t\t\t\t\tinput.UnresolvedObject.initialSharedVersion || object?.initialSharedVersion!,\n\t\t\t\tmutable: isUsedAsMutable(transactionData, index),\n\t\t\t});\n\t\t} else if (isUsedAsReceiving(transactionData, index)) {\n\t\t\tupdated = Inputs.ReceivingRef(\n\t\t\t\t{\n\t\t\t\t\tobjectId: id,\n\t\t\t\t\tdigest: input.UnresolvedObject.digest ?? object?.digest!,\n\t\t\t\t\tversion: input.UnresolvedObject.version ?? object?.version!,\n\t\t\t\t}!,\n\t\t\t);\n\t\t}\n\n\t\ttransactionData.inputs[transactionData.inputs.indexOf(input)] =\n\t\t\tupdated ??\n\t\t\tInputs.ObjectRef({\n\t\t\t\tobjectId: id,\n\t\t\t\tdigest: input.UnresolvedObject.digest ?? object?.digest!,\n\t\t\t\tversion: input.UnresolvedObject.version ?? object?.version!,\n\t\t\t});\n\t}\n}\n\nasync function normalizeInputs(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\tconst { inputs, commands } = transactionData;\n\tconst moveCallsToResolve: Extract<Command, { MoveCall: unknown }>['MoveCall'][] = [];\n\tconst moveFunctionsToResolve = new Set<string>();\n\n\tcommands.forEach((command) => {\n\t\t// Special case move call:\n\t\tif (command.MoveCall) {\n\t\t\t// Determine if any of the arguments require encoding.\n\t\t\t// - If they don't, then this is good to go.\n\t\t\t// - If they do, then we need to fetch the normalized move module.\n\n\t\t\t// If we already know the argument types, we don't need to resolve them again\n\t\t\tif (command.MoveCall._argumentTypes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst inputs = command.MoveCall.arguments.map((arg) => {\n\t\t\t\tif (arg.$kind === 'Input') {\n\t\t\t\t\treturn transactionData.inputs[arg.Input];\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t});\n\t\t\tconst needsResolution = inputs.some(\n\t\t\t\t(input) => input?.UnresolvedPure || input?.UnresolvedObject,\n\t\t\t);\n\n\t\t\tif (needsResolution) {\n\t\t\t\tconst functionName = `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`;\n\t\t\t\tmoveFunctionsToResolve.add(functionName);\n\t\t\t\tmoveCallsToResolve.push(command.MoveCall);\n\t\t\t}\n\t\t}\n\n\t\t// Special handling for values that where previously encoded using the wellKnownEncoding pattern.\n\t\t// This should only happen when transaction data was hydrated from an old version of the SDK\n\t\tswitch (command.$kind) {\n\t\t\tcase 'SplitCoins':\n\t\t\t\tcommand.SplitCoins.amounts.forEach((amount) => {\n\t\t\t\t\tnormalizeRawArgument(amount, bcs.U64, transactionData);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'TransferObjects':\n\t\t\t\tnormalizeRawArgument(command.TransferObjects.address, bcs.Address, transactionData);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tconst moveFunctionParameters = new Map<string, OpenMoveTypeSignature[]>();\n\tif (moveFunctionsToResolve.size > 0) {\n\t\tconst client = getClient(options);\n\t\tawait Promise.all(\n\t\t\t[...moveFunctionsToResolve].map(async (functionName) => {\n\t\t\t\tconst [packageId, moduleId, functionId] = functionName.split('::');\n\t\t\t\tconst def = await client.getNormalizedMoveFunction({\n\t\t\t\t\tpackage: packageId,\n\t\t\t\t\tmodule: moduleId,\n\t\t\t\t\tfunction: functionId,\n\t\t\t\t});\n\n\t\t\t\tmoveFunctionParameters.set(\n\t\t\t\t\tfunctionName,\n\t\t\t\t\tdef.parameters.map((param) => normalizedTypeToMoveTypeSignature(param)),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tif (moveCallsToResolve.length) {\n\t\tawait Promise.all(\n\t\t\tmoveCallsToResolve.map(async (moveCall) => {\n\t\t\t\tconst parameters = moveFunctionParameters.get(\n\t\t\t\t\t`${moveCall.package}::${moveCall.module}::${moveCall.function}`,\n\t\t\t\t);\n\n\t\t\t\tif (!parameters) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Entry functions can have a mutable reference to an instance of the TxContext\n\t\t\t\t// struct defined in the TxContext module as the last parameter. The caller of\n\t\t\t\t// the function does not need to pass it in as an argument.\n\t\t\t\tconst hasTxContext = parameters.length > 0 && isTxContext(parameters.at(-1)!);\n\t\t\t\tconst params = hasTxContext ? parameters.slice(0, parameters.length - 1) : parameters;\n\n\t\t\t\tmoveCall._argumentTypes = params;\n\t\t\t}),\n\t\t);\n\t}\n\n\tcommands.forEach((command) => {\n\t\tif (!command.MoveCall) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst moveCall = command.MoveCall;\n\t\tconst fnName = `${moveCall.package}::${moveCall.module}::${moveCall.function}`;\n\t\tconst params = moveCall._argumentTypes;\n\n\t\tif (!params) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (params.length !== command.MoveCall.arguments.length) {\n\t\t\tthrow new Error(`Incorrect number of arguments for ${fnName}`);\n\t\t}\n\n\t\tparams.forEach((param, i) => {\n\t\t\tconst arg = moveCall.arguments[i];\n\t\t\tif (arg.$kind !== 'Input') return;\n\t\t\tconst input = inputs[arg.Input];\n\n\t\t\t// Skip if the input is already resolved\n\t\t\tif (!input.UnresolvedPure && !input.UnresolvedObject) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst inputValue = input.UnresolvedPure?.value ?? input.UnresolvedObject?.objectId!;\n\n\t\t\tconst schema = getPureBcsSchema(param.body);\n\t\t\tif (schema) {\n\t\t\t\targ.type = 'pure';\n\t\t\t\tinputs[inputs.indexOf(input)] = Inputs.Pure(schema.serialize(inputValue));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof inputValue !== 'string') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Expect the argument to be an object id string, got ${JSON.stringify(\n\t\t\t\t\t\tinputValue,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t2,\n\t\t\t\t\t)}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\targ.type = 'object';\n\t\t\tconst unresolvedObject: typeof input = input.UnresolvedPure\n\t\t\t\t? {\n\t\t\t\t\t\t$kind: 'UnresolvedObject',\n\t\t\t\t\t\tUnresolvedObject: {\n\t\t\t\t\t\t\tobjectId: inputValue,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: input;\n\n\t\t\tinputs[arg.Input] = unresolvedObject;\n\t\t});\n\t});\n}\n\nfunction validate(transactionData: TransactionDataBuilder) {\n\ttransactionData.inputs.forEach((input, index) => {\n\t\tif (input.$kind !== 'Object' && input.$kind !== 'Pure') {\n\t\t\tthrow new Error(\n\t\t\t\t`Input at index ${index} has not been resolved.  Expected a Pure or Object input, but found ${JSON.stringify(\n\t\t\t\t\tinput,\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\t});\n}\n\nfunction normalizeRawArgument(\n\targ: Argument,\n\tschema: BcsType<any>,\n\ttransactionData: TransactionDataBuilder,\n) {\n\tif (arg.$kind !== 'Input') {\n\t\treturn;\n\t}\n\tconst input = transactionData.inputs[arg.Input];\n\n\tif (input.$kind !== 'UnresolvedPure') {\n\t\treturn;\n\t}\n\n\ttransactionData.inputs[arg.Input] = Inputs.Pure(schema.serialize(input.UnresolvedPure.value));\n}\n\nfunction isUsedAsMutable(transactionData: TransactionDataBuilder, index: number) {\n\tlet usedAsMutable = false;\n\n\ttransactionData.getInputUses(index, (arg, tx) => {\n\t\tif (tx.MoveCall && tx.MoveCall._argumentTypes) {\n\t\t\tconst argIndex = tx.MoveCall.arguments.indexOf(arg);\n\t\t\tusedAsMutable = tx.MoveCall._argumentTypes[argIndex].ref !== '&' || usedAsMutable;\n\t\t}\n\n\t\tif (tx.$kind === 'MakeMoveVec' || tx.$kind === 'MergeCoins' || tx.$kind === 'SplitCoins') {\n\t\t\tusedAsMutable = true;\n\t\t}\n\t});\n\n\treturn usedAsMutable;\n}\n\nfunction isUsedAsReceiving(transactionData: TransactionDataBuilder, index: number) {\n\tlet usedAsReceiving = false;\n\n\ttransactionData.getInputUses(index, (arg, tx) => {\n\t\tif (tx.MoveCall && tx.MoveCall._argumentTypes) {\n\t\t\tconst argIndex = tx.MoveCall.arguments.indexOf(arg);\n\t\t\tusedAsReceiving = isReceivingType(tx.MoveCall._argumentTypes[argIndex]) || usedAsReceiving;\n\t\t}\n\t});\n\n\treturn usedAsReceiving;\n}\n\nfunction isReceivingType(type: OpenMoveTypeSignature): boolean {\n\tif (typeof type.body !== 'object' || !('datatype' in type.body)) {\n\t\treturn false;\n\t}\n\n\treturn (\n\t\ttype.body.datatype.package === '0x2' &&\n\t\ttype.body.datatype.module === 'transfer' &&\n\t\ttype.body.datatype.type === 'Receiving'\n\t);\n}\n\nexport function getClient(options: BuildTransactionOptions): SuiClient {\n\tif (!options.client) {\n\t\tthrow new Error(\n\t\t\t`No sui client passed to Transaction#build, but transaction data was not sufficient to build offline.`,\n\t\t);\n\t}\n\n\treturn options.client;\n}\n"],"names":["chunk","inputs"],"mappings":";;;;AAGA,SAAS,aAAa;AAGtB,SAAS,WAAW;AAEpB,SAAS,qBAAqB,sBAAsB,oBAAoB;;AACxE,SAAS,iBAAiB;AAE1B,SAAS,cAAc;AACvB,SAAS,kBAAkB,aAAa,yCAAyC;AAEjF,SAAS,aAAa;;;;;;;;AAGtB,MAAM,wBAAwB;AAG9B,MAAM,oBAAoB,KAAA;AAC1B,MAAM,UAAU;AAiBhB,eAAsB,uBACrB,eAAA,EACA,OAAA,EACA,IAAA,EACC;IACD,MAAM,gBAAgB,iBAAiB,OAAO;IAC9C,MAAM,wBAAwB,iBAAiB,OAAO;IAEtD,IAAI,CAAC,QAAQ,mBAAA,EAAqB;QACjC,MAAM,YAAY,iBAAiB,OAAO;QAC1C,MAAM,aAAa,iBAAiB,OAAO;QAC3C,MAAM,cAAc,iBAAiB,OAAO;IAC7C;IACA,MAAM,SAAS,eAAe;IAC9B,OAAO,MAAM,KAAK;AACnB;AAEA,eAAe,YACd,eAAA,EACA,OAAA,EACC;IACD,IAAI,CAAC,gBAAgB,SAAA,CAAU,KAAA,EAAO;QACrC,gBAAgB,SAAA,CAAU,KAAA,GAAQ,OAAO,MAAM,UAAU,OAAO,EAAE,oBAAA,CAAqB,CAAC;IACzF;AACD;AAEA,eAAe,aACd,eAAA,EACA,OAAA,EACC;IACD,IAAI,gBAAgB,SAAA,CAAU,MAAA,EAAQ;QACrC;IACD;IAEA,MAAM,eAAe,MAAM,UAAU,OAAO,EAAE,sBAAA,CAAuB;QACpE,kBAAkB,gBAAgB,KAAA,CAAM;YACvC,WAAW;gBACV,SAAS;oBACR,QAAQ,OAAO,OAAO;oBACtB,SAAS,CAAC,CAAA;gBACX;YACD;QACD,CAAC;IACF,CAAC;IAED,IAAI,aAAa,OAAA,CAAQ,MAAA,CAAO,MAAA,KAAW,WAAW;QACrD,MAAM,IAAI,MACT,+DAAgG,OAAjC,aAAa,OAAA,CAAQ,MAAA,CAAO,KAAK,GAChG;YAAE,OAAO;QAAa;IAExB;IAEA,MAAM,eAAe,oBAAoB,OAAO,gBAAgB,SAAA,CAAU,KAAA,IAAS,EAAE;IAErF,MAAM,kCACL,OAAO,aAAa,OAAA,CAAQ,OAAA,CAAQ,eAAe,IAAI;IAExD,MAAM,YACL,kCACA,OAAO,aAAa,OAAA,CAAQ,OAAA,CAAQ,WAAW,IAC/C,OAAO,aAAa,OAAA,CAAQ,OAAA,CAAQ,aAAa;IAElD,gBAAgB,SAAA,CAAU,MAAA,GAAS,OAClC,YAAY,kCAAkC,YAAY;AAE5D;AAGA,eAAe,cACd,eAAA,EACA,OAAA,EACC;IACD,IAAI,CAAC,gBAAgB,SAAA,CAAU,OAAA,EAAS;QACvC,MAAM,QAAQ,MAAM,UAAU,OAAO,EAAE,QAAA,CAAS;YAC/C,OAAO,gBAAgB,SAAA,CAAU,KAAA,IAAS,gBAAgB,MAAA;YAC1D,UAAU,4NAAA;QACX,CAAC;QAED,MAAM,eAAe,MAAM,IAAA,CAEzB,MAAA,CAAO,CAAC,SAAS;YACjB,MAAM,gBAAgB,gBAAgB,MAAA,CAAO,IAAA,CAAK,CAAC,UAAU;;gBAC5D,2BAAU,MAAA,kDAAN,cAAc,gBAAA,EAAkB;oBACnC,OAAO,KAAK,YAAA,KAAiB,MAAM,MAAA,CAAO,gBAAA,CAAiB,QAAA;gBAC5D;gBAEA,OAAO;YACR,CAAC;YAED,OAAO,CAAC;QACT,CAAC,EACA,GAAA,CAAI,CAAC,OAAA,CAAU;gBACf,UAAU,KAAK,YAAA;gBACf,QAAQ,KAAK,MAAA;gBACb,SAAS,KAAK,OAAA;YACf,CAAA,CAAE;QAEH,IAAI,CAAC,aAAa,MAAA,EAAQ;YACzB,MAAM,IAAI,MAAM,+CAA+C;QAChE;QAEA,gBAAgB,SAAA,CAAU,OAAA,GAAU,aAAa,GAAA,CAAI,CAAC,mJAAY,QAAA,6NAAM,YAAA,EAAW,OAAO,CAAC;IAC5F;AACD;AAEA,eAAe,wBACd,eAAA,EACA,OAAA,EACC;IAGD,MAAM,mBAAmB,gBAAgB,MAAA,CAAO,MAAA,CAAO,CAAC,UAAU;YAG5B;QAFrC,OACC,MAAM,gBAAA,IACN,CAAA,CAAE,MAAM,gBAAA,CAAiB,OAAA,sCAAiB,gBAAA,oFAAkB,oBAAA,CAAA;IAE9D,CAAC;IAED,MAAM,aAAa;WACf,IAAI,IACN,iBAAiB,GAAA,CAAI,CAAC,QAAU,2OAAA,EAAqB,MAAM,gBAAA,CAAiB,QAAQ,CAAC;KAEvF;IAEA,MAAM,eAAe,WAAW,MAAA,6JAAS,QAAA,EAAM,YAAY,qBAAqB,IAAI,CAAC,CAAA;IACrF,MAAM,WAAA,CACL,MAAM,QAAQ,GAAA,CACb,aAAa,GAAA,CAAI,CAACA,SACjB,UAAU,OAAO,EAAE,eAAA,CAAgB;YAClC,KAAKA;YACL,SAAS;gBAAE,WAAW;YAAK;QAC5B,CAAC,GAEH,EACC,IAAA,CAAK;IAEP,MAAM,gBAAgB,IAAI,IACzB,WAAW,GAAA,CAAI,CAAC,IAAI,UAAU;QAC7B,OAAO;YAAC;YAAI,QAAA,CAAS,KAAK,CAAC;SAAA;IAC5B,CAAC;IAGF,MAAM,iBAAiB,MAAM,IAAA,CAAK,aAAa,EAC7C,MAAA,CAAO;YAAC,CAAC,GAAG,GAAG,CAAA;eAAM,IAAI,KAAK;OAC9B,GAAA,CAAI;YAAC,CAAC,GAAG,GAAG,CAAA;eAAM,KAAK,SAAA,CAAU,IAAI,KAAK,CAAC;;IAE7C,IAAI,eAAe,MAAA,EAAQ;QAC1B,MAAM,IAAI,MAAM,4CAAqE,CAAE,MAA3B,eAAe,IAAA,CAAK,IAAI,CAAC;IACtF;IAEA,MAAM,UAAU,SAAS,GAAA,CAAI,CAAC,WAAW;QACxC,IAAI,OAAO,KAAA,IAAS,CAAC,OAAO,IAAA,EAAM;YACjC,MAAM,IAAI,MAAM,2BAAuC,CAAE,MAAd,OAAO,KAAK;QACxD;QACA,MAAM,QAAQ,OAAO,IAAA,CAAK,KAAA;QAC1B,MAAM,uBACL,SAAS,OAAO,UAAU,YAAY,YAAY,QAC/C,MAAM,MAAA,CAAO,sBAAA,GACb;QAEJ,OAAO;YACN,UAAU,OAAO,IAAA,CAAK,QAAA;YACtB,QAAQ,OAAO,IAAA,CAAK,MAAA;YACpB,SAAS,OAAO,IAAA,CAAK,OAAA;YACrB;QACD;IACD,CAAC;IAED,MAAM,cAAc,IAAI,IACvB,WAAW,GAAA,CAAI,CAAC,IAAI,UAAU;QAC7B,OAAO;YAAC;YAAI,OAAA,CAAQ,KAAK,CAAC;SAAA;IAC3B,CAAC;IAGF,KAAA,MAAW,CAAC,OAAO,KAAK,CAAA,IAAK,gBAAgB,MAAA,CAAO,OAAA,CAAQ,EAAG;QAC9D,IAAI,CAAC,MAAM,gBAAA,EAAkB;YAC5B;QACD;QAEA,IAAI;QACJ,MAAM,yNAAK,sBAAA,EAAoB,MAAM,gBAAA,CAAiB,QAAQ;QAC9D,MAAM,SAAS,YAAY,GAAA,CAAI,EAAE;YAE7B;QAAJ,0DAAU,gBAAA,CAAiB,oBAAA,uKAAwB,OAAQ,oBAAA,EAAsB;YAChF,2NAAU,SAAA,CAAO,eAAA,CAAgB;gBAChC,UAAU;gBACV,sBACC,MAAM,gBAAA,CAAiB,oBAAA,qDAAwB,OAAQ,oBAAA;gBACxD,SAAS,gBAAgB,iBAAiB,KAAK;YAChD,CAAC;QACF,OAAA,IAAW,kBAAkB,iBAAiB,KAAK,GAAG;gBAI3C,gCACC;YAJX,UAAU,0NAAA,CAAO,YAAA,CAChB;gBACC,UAAU;gBACV,gDAAc,gBAAA,CAAiB,MAAA,2FAAU,uDAAQ,MAAA;gBACjD,kDAAe,gBAAA,CAAiB,OAAA,6IAAW,OAAQ,OAAA;YACpD;QAEF;YAMU,iCACC;QALX,gBAAgB,MAAA,CAAO,gBAAgB,MAAA,CAAO,OAAA,CAAQ,KAAK,CAAC,CAAA,4CAC3D,2NACA,SAAA,CAAO,SAAA,CAAU;YAChB,UAAU;YACV,iDAAc,gBAAA,CAAiB,MAAA,6IAAU,OAAQ,MAAA;YACjD,mDAAe,gBAAA,CAAiB,OAAA,+IAAW,OAAQ,OAAA;QACpD,CAAC;IACH;AACD;AAEA,eAAe,gBACd,eAAA,EACA,OAAA,EACC;IACD,MAAM,EAAE,MAAA,EAAQ,QAAA,CAAS,CAAA,GAAI;IAC7B,MAAM,qBAA4E,CAAC,CAAA;IACnF,MAAM,yBAAyB,aAAA,GAAA,IAAI,IAAY;IAE/C,SAAS,OAAA,CAAQ,CAAC,YAAY;QAE7B,IAAI,QAAQ,QAAA,EAAU;YAMrB,IAAI,QAAQ,QAAA,CAAS,cAAA,EAAgB;gBACpC;YACD;YAEA,MAAMC,UAAS,QAAQ,QAAA,CAAS,SAAA,CAAU,GAAA,CAAI,CAAC,QAAQ;gBACtD,IAAI,IAAI,KAAA,KAAU,SAAS;oBAC1B,OAAO,gBAAgB,MAAA,CAAO,IAAI,KAAK,CAAA;gBACxC;gBACA,OAAO;YACR,CAAC;YACD,MAAM,kBAAkBA,QAAO,IAAA,CAC9B,CAAC,uDAAU,MAAO,cAAA,wBAAkB,kCAAO,gBAAA;YAG5C,IAAI,iBAAiB;gBACpB,MAAM,eAAe,GAAgC,OAA7B,QAAQ,QAAA,CAAS,OAAO,EAAA,qBAAa,QAAA,CAAS,MAAM,EAAA,MAA8B,OAAzB,QAAQ,QAAA,CAAS,QAAQ;gBAC1G,uBAAuB,GAAA,CAAI,YAAY;gBACvC,mBAAmB,IAAA,CAAK,QAAQ,QAAQ;YACzC;QACD;QAIA,OAAQ,QAAQ,KAAA,EAAO;YACtB,KAAK;gBACJ,QAAQ,UAAA,CAAW,OAAA,CAAQ,OAAA,CAAQ,CAAC,WAAW;oBAC9C,qBAAqB,+NAAQ,MAAA,CAAI,GAAA,EAAK,eAAe;gBACtD,CAAC;gBACD;YACD,KAAK;gBACJ,qBAAqB,QAAQ,eAAA,CAAgB,OAAA,yNAAS,MAAA,CAAI,OAAA,EAAS,eAAe;gBAClF;QACF;IACD,CAAC;IAED,MAAM,yBAAyB,aAAA,GAAA,IAAI,IAAqC;IACxE,IAAI,uBAAuB,IAAA,GAAO,GAAG;QACpC,MAAM,SAAS,UAAU,OAAO;QAChC,MAAM,QAAQ,GAAA,CACb,CAAC;eAAG,sBAAsB;SAAA,CAAE,GAAA,CAAI,OAAO,iBAAiB;YACvD,MAAM,CAAC,WAAW,UAAU,UAAU,CAAA,GAAI,aAAa,KAAA,CAAM,IAAI;YACjE,MAAM,MAAM,MAAM,OAAO,yBAAA,CAA0B;gBAClD,SAAS;gBACT,QAAQ;gBACR,UAAU;YACX,CAAC;YAED,uBAAuB,GAAA,CACtB,cACA,IAAI,UAAA,CAAW,GAAA,CAAI,CAAC,iOAAU,oCAAA,EAAkC,KAAK,CAAC;QAExE,CAAC;IAEH;IAEA,IAAI,mBAAmB,MAAA,EAAQ;QAC9B,MAAM,QAAQ,GAAA,CACb,mBAAmB,GAAA,CAAI,OAAO,aAAa;YAC1C,MAAM,aAAa,uBAAuB,GAAA,CACzC,UAAG,SAAS,OAAO,EAAA,MAAyB,OAApB,SAAS,MAAM,EAAA,MAAsB,gBAAR,QAAQ;YAG9D,IAAI,CAAC,YAAY;gBAChB;YACD;YAKA,MAAM,eAAe,WAAW,MAAA,GAAS,8NAAK,cAAA,EAAY,WAAW,EAAA,CAAG,CAAA,CAAE,CAAE;YAC5E,MAAM,SAAS,eAAe,WAAW,KAAA,CAAM,GAAG,WAAW,MAAA,GAAS,CAAC,IAAI;YAE3E,SAAS,cAAA,GAAiB;QAC3B,CAAC;IAEH;IAEA,SAAS,OAAA,CAAQ,CAAC,YAAY;QAC7B,IAAI,CAAC,QAAQ,QAAA,EAAU;YACtB;QACD;QAEA,MAAM,WAAW,QAAQ,QAAA;QACzB,MAAM,SAAS,UAAG,SAAS,OAAO,EAAA,MAAyB,OAApB,SAAS,MAAM,EAAA,MAAsB,gBAAR,QAAQ;QAC5E,MAAM,SAAS,SAAS,cAAA;QAExB,IAAI,CAAC,QAAQ;YACZ;QACD;QAEA,IAAI,OAAO,MAAA,KAAW,QAAQ,QAAA,CAAS,SAAA,CAAU,MAAA,EAAQ;YACxD,MAAM,IAAI,MAAM,qCAA2C,CAAE,MAAR,MAAM;QAC5D;QAEA,OAAO,OAAA,CAAQ,CAAC,OAAO,MAAM;gBAUT,uBAA+B;YATlD,MAAM,MAAM,SAAS,SAAA,CAAU,CAAC,CAAA;YAChC,IAAI,IAAI,KAAA,KAAU,QAAS,CAAA;YAC3B,MAAM,QAAQ,MAAA,CAAO,IAAI,KAAK,CAAA;YAG9B,IAAI,CAAC,MAAM,cAAA,IAAkB,CAAC,MAAM,gBAAA,EAAkB;gBACrD;YACD;;YAEA,MAAM,2EAAmB,cAAA,gFAAgB,KAAA,sHAAe,gBAAA,oFAAkB,QAAA;YAE1E,MAAM,SAAS,4OAAA,EAAiB,MAAM,IAAI;YAC1C,IAAI,QAAQ;gBACX,IAAI,IAAA,GAAO;gBACX,MAAA,CAAO,OAAO,OAAA,CAAQ,KAAK,CAAC,CAAA,oNAAI,SAAA,CAAO,IAAA,CAAK,OAAO,SAAA,CAAU,UAAU,CAAC;gBACxE;YACD;YAEA,IAAI,OAAO,eAAe,UAAU;gBACnC,MAAM,IAAI,MACT,sDAIC,OAJqD,KAAK,SAAA,CAC1D,YACA,MACA;YAGH;YAEA,IAAI,IAAA,GAAO;YACX,MAAM,mBAAiC,MAAM,cAAA,GAC1C;gBACA,OAAO;gBACP,kBAAkB;oBACjB,UAAU;gBACX;YACD,IACC;YAEH,MAAA,CAAO,IAAI,KAAK,CAAA,GAAI;QACrB,CAAC;IACF,CAAC;AACF;AAEA,SAAS,SAAS,eAAA,EAAyC;IAC1D,gBAAgB,MAAA,CAAO,OAAA,CAAQ,CAAC,OAAO,UAAU;QAChD,IAAI,MAAM,KAAA,KAAU,YAAY,MAAM,KAAA,KAAU,QAAQ;YACvD,MAAM,IAAI,MACT,kBAA8F,OAA5E,KAAK,EAAA,wEAEtB,YAFkG,SAAA,CAClG;QAGH;IACD,CAAC;AACF;AAEA,SAAS,qBACR,GAAA,EACA,MAAA,EACA,eAAA,EACC;IACD,IAAI,IAAI,KAAA,KAAU,SAAS;QAC1B;IACD;IACA,MAAM,QAAQ,gBAAgB,MAAA,CAAO,IAAI,KAAK,CAAA;IAE9C,IAAI,MAAM,KAAA,KAAU,kBAAkB;QACrC;IACD;IAEA,gBAAgB,MAAA,CAAO,IAAI,KAAK,CAAA,oNAAI,SAAA,CAAO,IAAA,CAAK,OAAO,SAAA,CAAU,MAAM,cAAA,CAAe,KAAK,CAAC;AAC7F;AAEA,SAAS,gBAAgB,eAAA,EAAyC,KAAA,EAAe;IAChF,IAAI,gBAAgB;IAEpB,gBAAgB,YAAA,CAAa,OAAO,CAAC,KAAK,OAAO;QAChD,IAAI,GAAG,QAAA,IAAY,GAAG,QAAA,CAAS,cAAA,EAAgB;YAC9C,MAAM,WAAW,GAAG,QAAA,CAAS,SAAA,CAAU,OAAA,CAAQ,GAAG;YAClD,gBAAgB,GAAG,QAAA,CAAS,cAAA,CAAe,QAAQ,CAAA,CAAE,GAAA,KAAQ,OAAO;QACrE;QAEA,IAAI,GAAG,KAAA,KAAU,iBAAiB,GAAG,KAAA,KAAU,gBAAgB,GAAG,KAAA,KAAU,cAAc;YACzF,gBAAgB;QACjB;IACD,CAAC;IAED,OAAO;AACR;AAEA,SAAS,kBAAkB,eAAA,EAAyC,KAAA,EAAe;IAClF,IAAI,kBAAkB;IAEtB,gBAAgB,YAAA,CAAa,OAAO,CAAC,KAAK,OAAO;QAChD,IAAI,GAAG,QAAA,IAAY,GAAG,QAAA,CAAS,cAAA,EAAgB;YAC9C,MAAM,WAAW,GAAG,QAAA,CAAS,SAAA,CAAU,OAAA,CAAQ,GAAG;YAClD,kBAAkB,gBAAgB,GAAG,QAAA,CAAS,cAAA,CAAe,QAAQ,CAAC,KAAK;QAC5E;IACD,CAAC;IAED,OAAO;AACR;AAEA,SAAS,gBAAgB,IAAA,EAAsC;IAC9D,IAAI,OAAO,KAAK,IAAA,KAAS,YAAY,CAAA,CAAE,cAAc,KAAK,IAAA,GAAO;QAChE,OAAO;IACR;IAEA,OACC,KAAK,IAAA,CAAK,QAAA,CAAS,OAAA,KAAY,SAC/B,KAAK,IAAA,CAAK,QAAA,CAAS,MAAA,KAAW,cAC9B,KAAK,IAAA,CAAK,QAAA,CAAS,IAAA,KAAS;AAE9B;AAEO,SAAS,UAAU,OAAA,EAA6C;IACtE,IAAI,CAAC,QAAQ,MAAA,EAAQ;QACpB,MAAM,IAAI,MACT;IAEF;IAEA,OAAO,QAAQ,MAAA;AAChB","debugId":null}},
    {"offset": {"line": 2768, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/object.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Transaction, TransactionObjectInput } from './Transaction.js';\n\nexport function createObjectMethods<T>(makeObject: (value: TransactionObjectInput) => T) {\n\tfunction object(value: TransactionObjectInput) {\n\t\treturn makeObject(value);\n\t}\n\n\tobject.system = () => object('0x5');\n\tobject.clock = () => object('0x6');\n\tobject.random = () => object('0x8');\n\tobject.denyList = () => object('0x403');\n\tobject.option =\n\t\t({ type, value }: { type: string; value: TransactionObjectInput | null }) =>\n\t\t(tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\ttypeArguments: [type],\n\t\t\t\ttarget: `0x1::option::${value === null ? 'none' : 'some'}`,\n\t\t\t\targuments: value === null ? [] : [tx.object(value)],\n\t\t\t});\n\n\treturn object;\n}\n"],"names":[],"mappings":";;;AAKO,SAAS,oBAAuB,UAAA,EAAkD;IACxF,SAAS,OAAO,KAAA,EAA+B;QAC9C,OAAO,WAAW,KAAK;IACxB;IAEA,OAAO,MAAA,GAAS,IAAM,OAAO,KAAK;IAClC,OAAO,KAAA,GAAQ,IAAM,OAAO,KAAK;IACjC,OAAO,MAAA,GAAS,IAAM,OAAO,KAAK;IAClC,OAAO,QAAA,GAAW,IAAM,OAAO,OAAO;IACtC,OAAO,MAAA,GACN;YAAC,EAAE,IAAA,EAAM,KAAA,CAAM,CAAA;eACf,CAAC,KACA,GAAG,QAAA,CAAS;gBACX,eAAe;oBAAC,IAAI;iBAAA;gBACpB,QAAQ,gBAAgD,OAAhC,UAAU,OAAO,SAAS,MAAM;gBACxD,WAAW,UAAU,OAAO,CAAC,CAAA,GAAI;oBAAC,GAAG,MAAA,CAAO,KAAK,CAAC;iBAAA;YACnD,CAAC;;IAEH,OAAO;AACR","debugId":null}},
    {"offset": {"line": 2799, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/bcs/pure.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/bcs';\nimport type { BcsType } from '@mysten/bcs';\n\nimport { Address } from './bcs.js';\n\nexport type BasePureType =\n\t| 'u8'\n\t| 'u16'\n\t| 'u32'\n\t| 'u64'\n\t| 'u128'\n\t| 'u256'\n\t| 'bool'\n\t| 'id'\n\t| 'string'\n\t| 'address';\n\ninterface PureShapeByType {\n\tu8: number;\n\tu16: number;\n\tu32: number;\n\tu64: bigint | string | number;\n\tu128: bigint | string | number;\n\tu256: bigint | string | number;\n\tbool: boolean;\n\tstring: string;\n\tid: string | Uint8Array;\n\taddress: string | Uint8Array;\n}\n\nexport type PureTypeName = BasePureType | `vector<${string}>` | `option<${string}>`;\nexport type ValidPureTypeName<T extends string> = T extends BasePureType\n\t? PureTypeName\n\t: T extends `vector<${infer U}>`\n\t\t? ValidPureTypeName<U>\n\t\t: T extends `option<${infer U}>`\n\t\t\t? ValidPureTypeName<U>\n\t\t\t: PureTypeValidationError<T>;\n\nexport type ShapeFromPureTypeName<T extends PureTypeName> = T extends BasePureType\n\t? PureShapeByType[T]\n\t: T extends `vector<${infer U extends PureTypeName}>`\n\t\t? ShapeFromPureTypeName<U>[]\n\t\t: T extends `option<${infer U extends PureTypeName}>`\n\t\t\t? ShapeFromPureTypeName<U> | null\n\t\t\t: never;\n\ntype PureTypeValidationError<T extends string> = T & {\n\terror: `Invalid Pure type name: ${T}`;\n};\n\nexport function pureBcsSchemaFromTypeName<T extends PureTypeName>(\n\tname: T extends PureTypeName ? ValidPureTypeName<T> : T,\n): BcsType<ShapeFromPureTypeName<T>> {\n\tswitch (name) {\n\t\tcase 'u8':\n\t\t\treturn bcs.u8() as never;\n\t\tcase 'u16':\n\t\t\treturn bcs.u16() as never;\n\t\tcase 'u32':\n\t\t\treturn bcs.u32() as never;\n\t\tcase 'u64':\n\t\t\treturn bcs.u64() as never;\n\t\tcase 'u128':\n\t\t\treturn bcs.u128() as never;\n\t\tcase 'u256':\n\t\t\treturn bcs.u256() as never;\n\t\tcase 'bool':\n\t\t\treturn bcs.bool() as never;\n\t\tcase 'string':\n\t\t\treturn bcs.string() as never;\n\t\tcase 'id':\n\t\tcase 'address':\n\t\t\treturn Address as never;\n\t}\n\n\tconst generic = name.match(/^(vector|option)<(.+)>$/);\n\tif (generic) {\n\t\tconst [kind, inner] = generic.slice(1);\n\t\tif (kind === 'vector') {\n\t\t\treturn bcs.vector(pureBcsSchemaFromTypeName(inner as PureTypeName)) as never;\n\t\t} else {\n\t\t\treturn bcs.option(pureBcsSchemaFromTypeName(inner as PureTypeName)) as never;\n\t\t}\n\t}\n\n\tthrow new Error(`Invalid Pure type name: ${name}`);\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,WAAW;AAGpB,SAAS,eAAe;;;AAgDjB,SAAS,0BACf,IAAA,EACoC;IACpC,OAAQ,MAAM;QACb,KAAK;YACJ,qMAAO,MAAA,CAAI,EAAA,CAAG;QACf,KAAK;YACJ,OAAO,oMAAA,CAAI,GAAA,CAAI;QAChB,KAAK;YACJ,qMAAO,MAAA,CAAI,GAAA,CAAI;QAChB,KAAK;YACJ,qMAAO,MAAA,CAAI,GAAA,CAAI;QAChB,KAAK;YACJ,OAAO,oMAAA,CAAI,IAAA,CAAK;QACjB,KAAK;YACJ,qMAAO,MAAA,CAAI,IAAA,CAAK;QACjB,KAAK;YACJ,qMAAO,MAAA,CAAI,IAAA,CAAK;QACjB,KAAK;YACJ,qMAAO,MAAA,CAAI,MAAA,CAAO;QACnB,KAAK;QACL,KAAK;YACJ,4MAAO,UAAA;IACT;IAEA,MAAM,UAAU,KAAK,KAAA,CAAM,yBAAyB;IACpD,IAAI,SAAS;QACZ,MAAM,CAAC,MAAM,KAAK,CAAA,GAAI,QAAQ,KAAA,CAAM,CAAC;QACrC,IAAI,SAAS,UAAU;YACtB,qMAAO,MAAA,CAAI,MAAA,CAAO,0BAA0B,KAAqB,CAAC;QACnE,OAAO;YACN,OAAO,oMAAA,CAAI,MAAA,CAAO,0BAA0B,KAAqB,CAAC;QACnE;IACD;IAEA,MAAM,IAAI,MAAM,2BAA+B,CAAE,MAAN,IAAI;AAChD","debugId":null}},
    {"offset": {"line": 2845, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/pure.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isSerializedBcs } from '@mysten/bcs';\nimport type { SerializedBcs } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport { pureBcsSchemaFromTypeName } from '../bcs/pure.js';\nimport type { PureTypeName, ShapeFromPureTypeName, ValidPureTypeName } from '../bcs/pure.js';\n\nexport function createPure<T>(makePure: (value: SerializedBcs<any, any> | Uint8Array) => T) {\n\tfunction pure<T extends PureTypeName>(\n\t\ttype: T extends PureTypeName ? ValidPureTypeName<T> : T,\n\t\tvalue: ShapeFromPureTypeName<T>,\n\t): T;\n\n\tfunction pure(\n\t\t/**\n\t\t * The pure value, serialized to BCS. If this is a Uint8Array, then the value\n\t\t * is assumed to be raw bytes, and will be used directly.\n\t\t */\n\t\tvalue: SerializedBcs<any, any> | Uint8Array,\n\t): T;\n\n\tfunction pure(\n\t\ttypeOrSerializedValue?: PureTypeName | SerializedBcs<any, any> | Uint8Array,\n\t\tvalue?: unknown,\n\t): T {\n\t\tif (typeof typeOrSerializedValue === 'string') {\n\t\t\treturn makePure(pureBcsSchemaFromTypeName(typeOrSerializedValue).serialize(value as never));\n\t\t}\n\n\t\tif (typeOrSerializedValue instanceof Uint8Array || isSerializedBcs(typeOrSerializedValue)) {\n\t\t\treturn makePure(typeOrSerializedValue);\n\t\t}\n\n\t\tthrow new Error('tx.pure must be called either a bcs type name, or a serialized bcs value');\n\t}\n\n\tpure.u8 = (value: number) => makePure(bcs.U8.serialize(value));\n\tpure.u16 = (value: number) => makePure(bcs.U16.serialize(value));\n\tpure.u32 = (value: number) => makePure(bcs.U32.serialize(value));\n\tpure.u64 = (value: bigint | number | string) => makePure(bcs.U64.serialize(value));\n\tpure.u128 = (value: bigint | number | string) => makePure(bcs.U128.serialize(value));\n\tpure.u256 = (value: bigint | number | string) => makePure(bcs.U256.serialize(value));\n\tpure.bool = (value: boolean) => makePure(bcs.Bool.serialize(value));\n\tpure.string = (value: string) => makePure(bcs.String.serialize(value));\n\tpure.address = (value: string) => makePure(bcs.Address.serialize(value));\n\tpure.id = pure.address;\n\tpure.vector = <Type extends PureTypeName>(\n\t\ttype: T extends PureTypeName ? ValidPureTypeName<Type> : Type,\n\t\tvalue: Iterable<ShapeFromPureTypeName<Type>> & { length: number },\n\t) => {\n\t\treturn makePure(\n\t\t\tbcs.vector(pureBcsSchemaFromTypeName(type as PureTypeName)).serialize(value as never),\n\t\t);\n\t};\n\tpure.option = <Type extends PureTypeName>(\n\t\ttype: T extends PureTypeName ? ValidPureTypeName<Type> : Type,\n\t\tvalue: ShapeFromPureTypeName<Type> | null | undefined,\n\t) => {\n\t\treturn makePure(bcs.option(pureBcsSchemaFromTypeName(type)).serialize(value as never));\n\t};\n\n\treturn pure;\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,uBAAuB;AAGhC,SAAS,WAAW;AACpB,SAAS,iCAAiC;;;;AAGnC,SAAS,WAAc,QAAA,EAA8D;IAc3F,SAAS,KACR,qBAAA,EACA,KAAA,EACI;QACJ,IAAI,OAAO,0BAA0B,UAAU;YAC9C,OAAO,SAAS,sOAAA,EAA0B,qBAAqB,EAAE,SAAA,CAAU,KAAc,CAAC;QAC3F;QAEA,IAAI,iCAAiC,wNAAc,kBAAA,EAAgB,qBAAqB,GAAG;YAC1F,OAAO,SAAS,qBAAqB;QACtC;QAEA,MAAM,IAAI,MAAM,0EAA0E;IAC3F;IAEA,KAAK,EAAA,GAAK,CAAC,QAAkB,gOAAS,MAAA,CAAI,EAAA,CAAG,SAAA,CAAU,KAAK,CAAC;IAC7D,KAAK,GAAA,GAAM,CAAC,QAAkB,SAAS,6NAAA,CAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAC;IAC/D,KAAK,GAAA,GAAM,CAAC,QAAkB,gOAAS,MAAA,CAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAC;IAC/D,KAAK,GAAA,GAAM,CAAC,QAAoC,SAAS,6NAAA,CAAI,GAAA,CAAI,SAAA,CAAU,KAAK,CAAC;IACjF,KAAK,IAAA,GAAO,CAAC,QAAoC,gOAAS,MAAA,CAAI,IAAA,CAAK,SAAA,CAAU,KAAK,CAAC;IACnF,KAAK,IAAA,GAAO,CAAC,QAAoC,+NAAS,OAAA,CAAI,IAAA,CAAK,SAAA,CAAU,KAAK,CAAC;IACnF,KAAK,IAAA,GAAO,CAAC,QAAmB,gOAAS,MAAA,CAAI,IAAA,CAAK,SAAA,CAAU,KAAK,CAAC;IAClE,KAAK,MAAA,GAAS,CAAC,QAAkB,+NAAS,OAAA,CAAI,MAAA,CAAO,SAAA,CAAU,KAAK,CAAC;IACrE,KAAK,OAAA,GAAU,CAAC,QAAkB,gOAAS,MAAA,CAAI,OAAA,CAAQ,SAAA,CAAU,KAAK,CAAC;IACvE,KAAK,EAAA,GAAK,KAAK,OAAA;IACf,KAAK,MAAA,GAAS,CACb,MACA,UACI;QACJ,OAAO,gOACN,MAAA,CAAI,MAAA,2MAAO,4BAAA,EAA0B,IAAoB,CAAC,EAAE,SAAA,CAAU,KAAc;IAEtF;IACA,KAAK,MAAA,GAAS,CACb,MACA,UACI;QACJ,OAAO,gOAAS,MAAA,CAAI,MAAA,2MAAO,4BAAA,EAA0B,IAAI,CAAC,EAAE,SAAA,CAAU,KAAc,CAAC;IACtF;IAEA,OAAO;AACR","debugId":null}},
    {"offset": {"line": 2888, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/hash.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\n\n/**\n * Generates a Blake2b hash of typed data as a base64 string.\n *\n * @param typeTag type tag (e.g. TransactionData, SenderSignedData)\n * @param data data to hash\n */\nexport function hashTypedData(typeTag: string, data: Uint8Array): Uint8Array {\n\tconst typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n\n\tconst dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n\tdataWithTag.set(typeTagBytes);\n\tdataWithTag.set(data, typeTagBytes.length);\n\n\treturn blake2b(dataWithTag, { dkLen: 32 });\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,eAAe;;AAQjB,SAAS,cAAc,OAAA,EAAiB,IAAA,EAA8B;IAC5E,MAAM,eAAe,MAAM,IAAA,CAAK,GAAU,OAAP,OAAO,EAAA,GAAI,IAAE,GAAA,CAAI,CAAC,IAAM,EAAE,UAAA,CAAW,CAAC,CAAC;IAE1E,MAAM,cAAc,IAAI,WAAW,aAAa,MAAA,GAAS,KAAK,MAAM;IACpE,YAAY,GAAA,CAAI,YAAY;IAC5B,YAAY,GAAA,CAAI,MAAM,aAAa,MAAM;IAEzC,2JAAO,UAAA,EAAQ,aAAa;QAAE,OAAO;IAAG,CAAC;AAC1C","debugId":null}},
    {"offset": {"line": 2908, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/TransactionData.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toBase58 } from '@mysten/bcs';\nimport type { InferInput } from 'valibot';\nimport { parse } from 'valibot';\n\nimport { bcs } from '../bcs/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type {\n\tArgument,\n\tCallArg,\n\tCommand,\n\tGasData,\n\tTransactionExpiration,\n} from './data/internal.js';\nimport { TransactionData } from './data/internal.js';\nimport { transactionDataFromV1 } from './data/v1.js';\nimport type { SerializedTransactionDataV1 } from './data/v1.js';\nimport type { SerializedTransactionDataV2 } from './data/v2.js';\nimport { hashTypedData } from './hash.js';\n\nfunction prepareSuiAddress(address: string) {\n\treturn normalizeSuiAddress(address).replace('0x', '');\n}\n\nexport class TransactionDataBuilder implements TransactionData {\n\tstatic fromKindBytes(bytes: Uint8Array) {\n\t\tconst kind = bcs.TransactionKind.parse(bytes);\n\n\t\tconst programmableTx = kind.ProgrammableTransaction;\n\t\tif (!programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\treturn TransactionDataBuilder.restore({\n\t\t\tversion: 2,\n\t\t\tsender: null,\n\t\t\texpiration: null,\n\t\t\tgasData: {\n\t\t\t\tbudget: null,\n\t\t\t\towner: null,\n\t\t\t\tpayment: null,\n\t\t\t\tprice: null,\n\t\t\t},\n\t\t\tinputs: programmableTx.inputs,\n\t\t\tcommands: programmableTx.commands,\n\t\t});\n\t}\n\n\tstatic fromBytes(bytes: Uint8Array) {\n\t\tconst rawData = bcs.TransactionData.parse(bytes);\n\t\tconst data = rawData?.V1;\n\t\tconst programmableTx = data.kind.ProgrammableTransaction;\n\n\t\tif (!data || !programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\treturn TransactionDataBuilder.restore({\n\t\t\tversion: 2,\n\t\t\tsender: data.sender,\n\t\t\texpiration: data.expiration,\n\t\t\tgasData: data.gasData,\n\t\t\tinputs: programmableTx.inputs,\n\t\t\tcommands: programmableTx.commands,\n\t\t});\n\t}\n\n\tstatic restore(\n\t\tdata:\n\t\t\t| InferInput<typeof SerializedTransactionDataV2>\n\t\t\t| InferInput<typeof SerializedTransactionDataV1>,\n\t) {\n\t\tif (data.version === 2) {\n\t\t\treturn new TransactionDataBuilder(parse(TransactionData, data));\n\t\t} else {\n\t\t\treturn new TransactionDataBuilder(parse(TransactionData, transactionDataFromV1(data)));\n\t\t}\n\t}\n\n\t/**\n\t * Generate transaction digest.\n\t *\n\t * @param bytes BCS serialized transaction data\n\t * @returns transaction digest.\n\t */\n\tstatic getDigestFromBytes(bytes: Uint8Array) {\n\t\tconst hash = hashTypedData('TransactionData', bytes);\n\t\treturn toBase58(hash);\n\t}\n\n\t// @deprecated use gasData instead\n\tget gasConfig() {\n\t\treturn this.gasData;\n\t}\n\t// @deprecated use gasData instead\n\tset gasConfig(value) {\n\t\tthis.gasData = value;\n\t}\n\n\tversion = 2 as const;\n\tsender: string | null;\n\texpiration: TransactionExpiration | null;\n\tgasData: GasData;\n\tinputs: CallArg[];\n\tcommands: Command[];\n\n\tconstructor(clone?: TransactionData) {\n\t\tthis.sender = clone?.sender ?? null;\n\t\tthis.expiration = clone?.expiration ?? null;\n\t\tthis.inputs = clone?.inputs ?? [];\n\t\tthis.commands = clone?.commands ?? [];\n\t\tthis.gasData = clone?.gasData ?? {\n\t\t\tbudget: null,\n\t\t\tprice: null,\n\t\t\towner: null,\n\t\t\tpayment: null,\n\t\t};\n\t}\n\n\tbuild({\n\t\tmaxSizeBytes = Infinity,\n\t\toverrides,\n\t\tonlyTransactionKind,\n\t}: {\n\t\tmaxSizeBytes?: number;\n\t\toverrides?: {\n\t\t\texpiration?: TransactionExpiration;\n\t\t\tsender?: string;\n\t\t\t// @deprecated use gasData instead\n\t\t\tgasConfig?: Partial<GasData>;\n\t\t\tgasData?: Partial<GasData>;\n\t\t};\n\t\tonlyTransactionKind?: boolean;\n\t} = {}) {\n\t\t// TODO validate that inputs and intents are actually resolved\n\t\tconst inputs = this.inputs as (typeof bcs.CallArg.$inferInput)[];\n\t\tconst commands = this.commands as Extract<\n\t\t\tCommand<Exclude<Argument, { IntentResult: unknown } | { NestedIntentResult: unknown }>>,\n\t\t\t{ Upgrade: unknown }\n\t\t>[];\n\n\t\tconst kind = {\n\t\t\tProgrammableTransaction: {\n\t\t\t\tinputs,\n\t\t\t\tcommands,\n\t\t\t},\n\t\t};\n\n\t\tif (onlyTransactionKind) {\n\t\t\treturn bcs.TransactionKind.serialize(kind, { maxSize: maxSizeBytes }).toBytes();\n\t\t}\n\n\t\tconst expiration = overrides?.expiration ?? this.expiration;\n\t\tconst sender = overrides?.sender ?? this.sender;\n\t\tconst gasData = { ...this.gasData, ...overrides?.gasConfig, ...overrides?.gasData };\n\n\t\tif (!sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tif (!gasData.budget) {\n\t\t\tthrow new Error('Missing gas budget');\n\t\t}\n\n\t\tif (!gasData.payment) {\n\t\t\tthrow new Error('Missing gas payment');\n\t\t}\n\n\t\tif (!gasData.price) {\n\t\t\tthrow new Error('Missing gas price');\n\t\t}\n\n\t\tconst transactionData = {\n\t\t\tsender: prepareSuiAddress(sender),\n\t\t\texpiration: expiration ? expiration : { None: true },\n\t\t\tgasData: {\n\t\t\t\tpayment: gasData.payment,\n\t\t\t\towner: prepareSuiAddress(this.gasData.owner ?? sender),\n\t\t\t\tprice: BigInt(gasData.price),\n\t\t\t\tbudget: BigInt(gasData.budget),\n\t\t\t},\n\t\t\tkind: {\n\t\t\t\tProgrammableTransaction: {\n\t\t\t\t\tinputs,\n\t\t\t\t\tcommands,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn bcs.TransactionData.serialize(\n\t\t\t{ V1: transactionData },\n\t\t\t{ maxSize: maxSizeBytes },\n\t\t).toBytes();\n\t}\n\n\taddInput<T extends 'object' | 'pure'>(type: T, arg: CallArg) {\n\t\tconst index = this.inputs.length;\n\t\tthis.inputs.push(arg);\n\t\treturn { Input: index, type, $kind: 'Input' as const };\n\t}\n\n\tgetInputUses(index: number, fn: (arg: Argument, command: Command) => void) {\n\t\tthis.mapArguments((arg, command) => {\n\t\t\tif (arg.$kind === 'Input' && arg.Input === index) {\n\t\t\t\tfn(arg, command);\n\t\t\t}\n\n\t\t\treturn arg;\n\t\t});\n\t}\n\n\tmapArguments(fn: (arg: Argument, command: Command) => Argument) {\n\t\tfor (const command of this.commands) {\n\t\t\tswitch (command.$kind) {\n\t\t\t\tcase 'MoveCall':\n\t\t\t\t\tcommand.MoveCall.arguments = command.MoveCall.arguments.map((arg) => fn(arg, command));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'TransferObjects':\n\t\t\t\t\tcommand.TransferObjects.objects = command.TransferObjects.objects.map((arg) =>\n\t\t\t\t\t\tfn(arg, command),\n\t\t\t\t\t);\n\t\t\t\t\tcommand.TransferObjects.address = fn(command.TransferObjects.address, command);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SplitCoins':\n\t\t\t\t\tcommand.SplitCoins.coin = fn(command.SplitCoins.coin, command);\n\t\t\t\t\tcommand.SplitCoins.amounts = command.SplitCoins.amounts.map((arg) => fn(arg, command));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'MergeCoins':\n\t\t\t\t\tcommand.MergeCoins.destination = fn(command.MergeCoins.destination, command);\n\t\t\t\t\tcommand.MergeCoins.sources = command.MergeCoins.sources.map((arg) => fn(arg, command));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'MakeMoveVec':\n\t\t\t\t\tcommand.MakeMoveVec.elements = command.MakeMoveVec.elements.map((arg) =>\n\t\t\t\t\t\tfn(arg, command),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Upgrade':\n\t\t\t\t\tcommand.Upgrade.ticket = fn(command.Upgrade.ticket, command);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '$Intent':\n\t\t\t\t\tconst inputs = command.$Intent.inputs;\n\t\t\t\t\tcommand.$Intent.inputs = {};\n\n\t\t\t\t\tfor (const [key, value] of Object.entries(inputs)) {\n\t\t\t\t\t\tcommand.$Intent.inputs[key] = Array.isArray(value)\n\t\t\t\t\t\t\t? value.map((arg) => fn(arg, command))\n\t\t\t\t\t\t\t: fn(value, command);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Publish':\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unexpected transaction kind: ${(command as { $kind: unknown }).$kind}`);\n\t\t\t}\n\t\t}\n\t}\n\n\treplaceCommand(index: number, replacement: Command | Command[]) {\n\t\tif (!Array.isArray(replacement)) {\n\t\t\tthis.commands[index] = replacement;\n\t\t\treturn;\n\t\t}\n\n\t\tconst sizeDiff = replacement.length - 1;\n\t\tthis.commands.splice(index, 1, ...replacement);\n\n\t\tif (sizeDiff !== 0) {\n\t\t\tthis.mapArguments((arg) => {\n\t\t\t\tswitch (arg.$kind) {\n\t\t\t\t\tcase 'Result':\n\t\t\t\t\t\tif (arg.Result > index) {\n\t\t\t\t\t\t\targ.Result += sizeDiff;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'NestedResult':\n\t\t\t\t\t\tif (arg.NestedResult[0] > index) {\n\t\t\t\t\t\t\targ.NestedResult[0] += sizeDiff;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn arg;\n\t\t\t});\n\t\t}\n\t}\n\n\tgetDigest() {\n\t\tconst bytes = this.build({ onlyTransactionKind: false });\n\t\treturn TransactionDataBuilder.getDigestFromBytes(bytes);\n\t}\n\n\tsnapshot(): TransactionData {\n\t\treturn parse(TransactionData, this);\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3164, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/utils.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { is } from 'valibot';\n\nimport type { SuiMoveNormalizedType } from '../client/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport { Argument } from './data/internal.js';\nimport type { CallArg } from './data/internal.js';\n\nexport function extractMutableReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'MutableReference' in normalizedType\n\t\t? normalizedType.MutableReference\n\t\t: undefined;\n}\n\nexport function extractReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'Reference' in normalizedType\n\t\t? normalizedType.Reference\n\t\t: undefined;\n}\n\nexport function extractStructTag(\n\tnormalizedType: SuiMoveNormalizedType,\n): Extract<SuiMoveNormalizedType, { Struct: unknown }> | undefined {\n\tif (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n\t\treturn normalizedType;\n\t}\n\n\tconst ref = extractReference(normalizedType);\n\tconst mutRef = extractMutableReference(normalizedType);\n\n\tif (typeof ref === 'object' && 'Struct' in ref) {\n\t\treturn ref;\n\t}\n\n\tif (typeof mutRef === 'object' && 'Struct' in mutRef) {\n\t\treturn mutRef;\n\t}\n\treturn undefined;\n}\n\nexport function getIdFromCallArg(arg: string | CallArg) {\n\tif (typeof arg === 'string') {\n\t\treturn normalizeSuiAddress(arg);\n\t}\n\n\tif (arg.Object) {\n\t\tif (arg.Object.ImmOrOwnedObject) {\n\t\t\treturn normalizeSuiAddress(arg.Object.ImmOrOwnedObject.objectId);\n\t\t}\n\n\t\tif (arg.Object.Receiving) {\n\t\t\treturn normalizeSuiAddress(arg.Object.Receiving.objectId);\n\t\t}\n\n\t\treturn normalizeSuiAddress(arg.Object.SharedObject.objectId);\n\t}\n\n\tif (arg.UnresolvedObject) {\n\t\treturn normalizeSuiAddress(arg.UnresolvedObject.objectId);\n\t}\n\n\treturn undefined;\n}\n\nexport function isArgument(value: unknown): value is Argument {\n\treturn is(Argument, value);\n}\n"],"names":[],"mappings":";;;;;;;AAGA,SAAS,UAAU;AAGnB,SAAS,2BAA2B;AACpC,SAAS,gBAAgB;;;;AAGlB,SAAS,wBACf,cAAA,EACoC;IACpC,OAAO,OAAO,mBAAmB,YAAY,sBAAsB,iBAChE,eAAe,gBAAA,GACf,KAAA;AACJ;AAEO,SAAS,iBACf,cAAA,EACoC;IACpC,OAAO,OAAO,mBAAmB,YAAY,eAAe,iBACzD,eAAe,SAAA,GACf,KAAA;AACJ;AAEO,SAAS,iBACf,cAAA,EACkE;IAClE,IAAI,OAAO,mBAAmB,YAAY,YAAY,gBAAgB;QACrE,OAAO;IACR;IAEA,MAAM,MAAM,iBAAiB,cAAc;IAC3C,MAAM,SAAS,wBAAwB,cAAc;IAErD,IAAI,OAAO,QAAQ,YAAY,YAAY,KAAK;QAC/C,OAAO;IACR;IAEA,IAAI,OAAO,WAAW,YAAY,YAAY,QAAQ;QACrD,OAAO;IACR;IACA,OAAO,KAAA;AACR;AAEO,SAAS,iBAAiB,GAAA,EAAuB;IACvD,IAAI,OAAO,QAAQ,UAAU;QAC5B,2NAAO,sBAAA,EAAoB,GAAG;IAC/B;IAEA,IAAI,IAAI,MAAA,EAAQ;QACf,IAAI,IAAI,MAAA,CAAO,gBAAA,EAAkB;YAChC,QAAO,yOAAA,EAAoB,IAAI,MAAA,CAAO,gBAAA,CAAiB,QAAQ;QAChE;QAEA,IAAI,IAAI,MAAA,CAAO,SAAA,EAAW;YACzB,QAAO,yOAAA,EAAoB,IAAI,MAAA,CAAO,SAAA,CAAU,QAAQ;QACzD;QAEA,2NAAO,sBAAA,EAAoB,IAAI,MAAA,CAAO,YAAA,CAAa,QAAQ;IAC5D;IAEA,IAAI,IAAI,gBAAA,EAAkB;QACzB,2NAAO,sBAAA,EAAoB,IAAI,gBAAA,CAAiB,QAAQ;IACzD;IAEA,OAAO,KAAA;AACR;AAEO,SAAS,WAAW,KAAA,EAAmC;IAC7D,gJAAO,KAAA,6NAAG,WAAA,EAAU,KAAK;AAC1B","debugId":null}},
    {"offset": {"line": 3224, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/transactions/Transaction.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SerializedBcs } from '@mysten/bcs';\nimport { fromBase64, isSerializedBcs } from '@mysten/bcs';\nimport type { InferInput } from 'valibot';\nimport { is, parse } from 'valibot';\n\nimport type { SuiClient } from '../client/index.js';\nimport type { SignatureWithBytes, Signer } from '../cryptography/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { TransactionArgument } from './Commands.js';\nimport { Commands } from './Commands.js';\nimport type { CallArg, Command } from './data/internal.js';\nimport { Argument, NormalizedCallArg, ObjectRef, TransactionExpiration } from './data/internal.js';\nimport { serializeV1TransactionData } from './data/v1.js';\nimport { SerializedTransactionDataV2 } from './data/v2.js';\nimport { Inputs } from './Inputs.js';\nimport type {\n\tBuildTransactionOptions,\n\tSerializeTransactionOptions,\n\tTransactionPlugin,\n} from './json-rpc-resolver.js';\nimport { resolveTransactionData } from './json-rpc-resolver.js';\nimport { createObjectMethods } from './object.js';\nimport { createPure } from './pure.js';\nimport { TransactionDataBuilder } from './TransactionData.js';\nimport { getIdFromCallArg } from './utils.js';\n\nexport type TransactionObjectArgument =\n\t| Exclude<InferInput<typeof Argument>, { Input: unknown; type?: 'pure' }>\n\t| ((tx: Transaction) => Exclude<InferInput<typeof Argument>, { Input: unknown; type?: 'pure' }>);\n\nexport type TransactionResult = Extract<Argument, { Result: unknown }> &\n\tExtract<Argument, { NestedResult: unknown }>[];\n\nfunction createTransactionResult(index: number, length = Infinity): TransactionResult {\n\tconst baseResult = { $kind: 'Result' as const, Result: index };\n\n\tconst nestedResults: {\n\t\t$kind: 'NestedResult';\n\t\tNestedResult: [number, number];\n\t}[] = [];\n\tconst nestedResultFor = (\n\t\tresultIndex: number,\n\t): {\n\t\t$kind: 'NestedResult';\n\t\tNestedResult: [number, number];\n\t} =>\n\t\t(nestedResults[resultIndex] ??= {\n\t\t\t$kind: 'NestedResult' as const,\n\t\t\tNestedResult: [index, resultIndex],\n\t\t});\n\n\treturn new Proxy(baseResult, {\n\t\tset() {\n\t\t\tthrow new Error(\n\t\t\t\t'The transaction result is a proxy, and does not support setting properties directly',\n\t\t\t);\n\t\t},\n\t\t// TODO: Instead of making this return a concrete argument, we should ideally\n\t\t// make it reference-based (so that this gets resolved at build-time), which\n\t\t// allows re-ordering transactions.\n\t\tget(target, property) {\n\t\t\t// This allows this transaction argument to be used in the singular form:\n\t\t\tif (property in target) {\n\t\t\t\treturn Reflect.get(target, property);\n\t\t\t}\n\n\t\t\t// Support destructuring:\n\t\t\tif (property === Symbol.iterator) {\n\t\t\t\treturn function* () {\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\twhile (i < length) {\n\t\t\t\t\t\tyield nestedResultFor(i);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (typeof property === 'symbol') return;\n\n\t\t\tconst resultIndex = parseInt(property, 10);\n\t\t\tif (Number.isNaN(resultIndex) || resultIndex < 0) return;\n\t\t\treturn nestedResultFor(resultIndex);\n\t\t},\n\t}) as TransactionResult;\n}\n\nconst TRANSACTION_BRAND = Symbol.for('@mysten/transaction') as never;\n\ninterface SignOptions extends BuildTransactionOptions {\n\tsigner: Signer;\n}\n\nexport function isTransaction(obj: unknown): obj is Transaction {\n\treturn !!obj && typeof obj === 'object' && (obj as any)[TRANSACTION_BRAND] === true;\n}\n\nexport type TransactionObjectInput = string | CallArg | TransactionObjectArgument;\n\ninterface TransactionPluginRegistry {\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tbuildPlugins: Map<string | Function, TransactionPlugin>;\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tserializationPlugins: Map<string | Function, TransactionPlugin>;\n}\n\nconst modulePluginRegistry: TransactionPluginRegistry = {\n\tbuildPlugins: new Map(),\n\tserializationPlugins: new Map(),\n};\n\nconst TRANSACTION_REGISTRY_KEY = Symbol.for('@mysten/transaction/registry');\nfunction getGlobalPluginRegistry() {\n\ttry {\n\t\tconst target = globalThis as {\n\t\t\t[TRANSACTION_REGISTRY_KEY]?: TransactionPluginRegistry;\n\t\t};\n\n\t\tif (!target[TRANSACTION_REGISTRY_KEY]) {\n\t\t\ttarget[TRANSACTION_REGISTRY_KEY] = modulePluginRegistry;\n\t\t}\n\n\t\treturn target[TRANSACTION_REGISTRY_KEY];\n\t} catch (e) {\n\t\treturn modulePluginRegistry;\n\t}\n}\n\n/**\n * Transaction Builder\n */\nexport class Transaction {\n\t#serializationPlugins: TransactionPlugin[];\n\t#buildPlugins: TransactionPlugin[];\n\t#intentResolvers = new Map<string, TransactionPlugin>();\n\n\t/**\n\t * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.\n\t * Supports either a byte array, or base64-encoded bytes.\n\t */\n\tstatic fromKind(serialized: string | Uint8Array) {\n\t\tconst tx = new Transaction();\n\n\t\ttx.#data = TransactionDataBuilder.fromKindBytes(\n\t\t\ttypeof serialized === 'string' ? fromBase64(serialized) : serialized,\n\t\t);\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Converts from a serialized transaction format to a `Transaction` class.\n\t * There are two supported serialized formats:\n\t * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.\n\t * - A byte array (or base64-encoded bytes) containing BCS transaction data.\n\t */\n\tstatic from(transaction: string | Uint8Array | Transaction) {\n\t\tconst newTransaction = new Transaction();\n\n\t\tif (isTransaction(transaction)) {\n\t\t\tnewTransaction.#data = new TransactionDataBuilder(transaction.getData());\n\t\t} else if (typeof transaction !== 'string' || !transaction.startsWith('{')) {\n\t\t\tnewTransaction.#data = TransactionDataBuilder.fromBytes(\n\t\t\t\ttypeof transaction === 'string' ? fromBase64(transaction) : transaction,\n\t\t\t);\n\t\t} else {\n\t\t\tnewTransaction.#data = TransactionDataBuilder.restore(JSON.parse(transaction));\n\t\t}\n\n\t\treturn newTransaction;\n\t}\n\n\t/** @deprecated global plugins should be registered with a name */\n\tstatic registerGlobalSerializationPlugin(step: TransactionPlugin): void;\n\tstatic registerGlobalSerializationPlugin(name: string, step: TransactionPlugin): void;\n\tstatic registerGlobalSerializationPlugin(\n\t\tstepOrStep: TransactionPlugin | string,\n\t\tstep?: TransactionPlugin,\n\t) {\n\t\tgetGlobalPluginRegistry().serializationPlugins.set(\n\t\t\tstepOrStep,\n\t\t\tstep ?? (stepOrStep as TransactionPlugin),\n\t\t);\n\t}\n\n\tstatic unregisterGlobalSerializationPlugin(name: string) {\n\t\tgetGlobalPluginRegistry().serializationPlugins.delete(name);\n\t}\n\n\t/** @deprecated global plugins should be registered with a name */\n\tstatic registerGlobalBuildPlugin(step: TransactionPlugin): void;\n\tstatic registerGlobalBuildPlugin(name: string, step: TransactionPlugin): void;\n\tstatic registerGlobalBuildPlugin(\n\t\tstepOrStep: TransactionPlugin | string,\n\t\tstep?: TransactionPlugin,\n\t) {\n\t\tgetGlobalPluginRegistry().buildPlugins.set(\n\t\t\tstepOrStep,\n\t\t\tstep ?? (stepOrStep as TransactionPlugin),\n\t\t);\n\t}\n\n\tstatic unregisterGlobalBuildPlugin(name: string) {\n\t\tgetGlobalPluginRegistry().buildPlugins.delete(name);\n\t}\n\n\taddSerializationPlugin(step: TransactionPlugin) {\n\t\tthis.#serializationPlugins.push(step);\n\t}\n\n\taddBuildPlugin(step: TransactionPlugin) {\n\t\tthis.#buildPlugins.push(step);\n\t}\n\n\taddIntentResolver(intent: string, resolver: TransactionPlugin) {\n\t\tif (this.#intentResolvers.has(intent) && this.#intentResolvers.get(intent) !== resolver) {\n\t\t\tthrow new Error(`Intent resolver for ${intent} already exists`);\n\t\t}\n\n\t\tthis.#intentResolvers.set(intent, resolver);\n\t}\n\n\tsetSender(sender: string) {\n\t\tthis.#data.sender = sender;\n\t}\n\t/**\n\t * Sets the sender only if it has not already been set.\n\t * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.\n\t */\n\tsetSenderIfNotSet(sender: string) {\n\t\tif (!this.#data.sender) {\n\t\t\tthis.#data.sender = sender;\n\t\t}\n\t}\n\tsetExpiration(expiration?: InferInput<typeof TransactionExpiration> | null) {\n\t\tthis.#data.expiration = expiration ? parse(TransactionExpiration, expiration) : null;\n\t}\n\tsetGasPrice(price: number | bigint) {\n\t\tthis.#data.gasConfig.price = String(price);\n\t}\n\tsetGasBudget(budget: number | bigint) {\n\t\tthis.#data.gasConfig.budget = String(budget);\n\t}\n\n\tsetGasBudgetIfNotSet(budget: number | bigint) {\n\t\tif (this.#data.gasData.budget == null) {\n\t\t\tthis.#data.gasConfig.budget = String(budget);\n\t\t}\n\t}\n\n\tsetGasOwner(owner: string) {\n\t\tthis.#data.gasConfig.owner = owner;\n\t}\n\tsetGasPayment(payments: ObjectRef[]) {\n\t\tthis.#data.gasConfig.payment = payments.map((payment) => parse(ObjectRef, payment));\n\t}\n\n\t#data: TransactionDataBuilder;\n\n\t/** @deprecated Use `getData()` instead. */\n\tget blockData() {\n\t\treturn serializeV1TransactionData(this.#data.snapshot());\n\t}\n\n\t/** Get a snapshot of the transaction data, in JSON form: */\n\tgetData() {\n\t\treturn this.#data.snapshot();\n\t}\n\n\t// Used to brand transaction classes so that they can be identified, even between multiple copies\n\t// of the builder.\n\tget [TRANSACTION_BRAND]() {\n\t\treturn true;\n\t}\n\n\t// Temporary workaround for the wallet interface accidentally serializing transactions via postMessage\n\tget pure(): ReturnType<typeof createPure<Argument>> {\n\t\tObject.defineProperty(this, 'pure', {\n\t\t\tenumerable: false,\n\t\t\tvalue: createPure<Argument>((value): Argument => {\n\t\t\t\tif (isSerializedBcs(value)) {\n\t\t\t\t\treturn this.#data.addInput('pure', {\n\t\t\t\t\t\t$kind: 'Pure',\n\t\t\t\t\t\tPure: {\n\t\t\t\t\t\t\tbytes: value.toBase64(),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// TODO: we can also do some deduplication here\n\t\t\t\treturn this.#data.addInput(\n\t\t\t\t\t'pure',\n\t\t\t\t\tis(NormalizedCallArg, value)\n\t\t\t\t\t\t? parse(NormalizedCallArg, value)\n\t\t\t\t\t\t: value instanceof Uint8Array\n\t\t\t\t\t\t\t? Inputs.Pure(value)\n\t\t\t\t\t\t\t: { $kind: 'UnresolvedPure', UnresolvedPure: { value } },\n\t\t\t\t);\n\t\t\t}),\n\t\t});\n\n\t\treturn this.pure;\n\t}\n\n\tconstructor() {\n\t\tconst globalPlugins = getGlobalPluginRegistry();\n\t\tthis.#data = new TransactionDataBuilder();\n\t\tthis.#buildPlugins = [...globalPlugins.buildPlugins.values()];\n\t\tthis.#serializationPlugins = [...globalPlugins.serializationPlugins.values()];\n\t}\n\n\t/** Returns an argument for the gas coin, to be used in a transaction. */\n\tget gas() {\n\t\treturn { $kind: 'GasCoin' as const, GasCoin: true as const };\n\t}\n\n\t/**\n\t * Add a new object input to the transaction.\n\t */\n\tobject: ReturnType<\n\t\ttypeof createObjectMethods<{ $kind: 'Input'; Input: number; type?: 'object' }>\n\t> = createObjectMethods(\n\t\t(value: TransactionObjectInput): { $kind: 'Input'; Input: number; type?: 'object' } => {\n\t\t\tif (typeof value === 'function') {\n\t\t\t\treturn this.object(value(this));\n\t\t\t}\n\n\t\t\tif (typeof value === 'object' && is(Argument, value)) {\n\t\t\t\treturn value as { $kind: 'Input'; Input: number; type?: 'object' };\n\t\t\t}\n\n\t\t\tconst id = getIdFromCallArg(value);\n\n\t\t\tconst inserted = this.#data.inputs.find((i) => id === getIdFromCallArg(i));\n\n\t\t\t// Upgrade shared object inputs to mutable if needed:\n\t\t\tif (\n\t\t\t\tinserted?.Object?.SharedObject &&\n\t\t\t\ttypeof value === 'object' &&\n\t\t\t\tvalue.Object?.SharedObject\n\t\t\t) {\n\t\t\t\tinserted.Object.SharedObject.mutable =\n\t\t\t\t\tinserted.Object.SharedObject.mutable || value.Object.SharedObject.mutable;\n\t\t\t}\n\n\t\t\treturn inserted\n\t\t\t\t? { $kind: 'Input', Input: this.#data.inputs.indexOf(inserted), type: 'object' }\n\t\t\t\t: this.#data.addInput(\n\t\t\t\t\t\t'object',\n\t\t\t\t\t\ttypeof value === 'string'\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t$kind: 'UnresolvedObject',\n\t\t\t\t\t\t\t\t\tUnresolvedObject: { objectId: normalizeSuiAddress(value) },\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: value,\n\t\t\t\t\t);\n\t\t},\n\t);\n\n\t/**\n\t * Add a new object input to the transaction using the fully-resolved object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tobjectRef(...args: Parameters<(typeof Inputs)['ObjectRef']>) {\n\t\treturn this.object(Inputs.ObjectRef(...args));\n\t}\n\n\t/**\n\t * Add a new receiving input to the transaction using the fully-resolved object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\treceivingRef(...args: Parameters<(typeof Inputs)['ReceivingRef']>) {\n\t\treturn this.object(Inputs.ReceivingRef(...args));\n\t}\n\n\t/**\n\t * Add a new shared object input to the transaction using the fully-resolved shared object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tsharedObjectRef(...args: Parameters<(typeof Inputs)['SharedObjectRef']>) {\n\t\treturn this.object(Inputs.SharedObjectRef(...args));\n\t}\n\n\t/** Add a transaction to the transaction */\n\tadd<T = TransactionResult>(command: Command | ((tx: Transaction) => T)): T {\n\t\tif (typeof command === 'function') {\n\t\t\treturn command(this);\n\t\t}\n\n\t\tconst index = this.#data.commands.push(command);\n\n\t\treturn createTransactionResult(index - 1) as T;\n\t}\n\n\t#normalizeTransactionArgument(arg: TransactionArgument | SerializedBcs<any>) {\n\t\tif (isSerializedBcs(arg)) {\n\t\t\treturn this.pure(arg);\n\t\t}\n\n\t\treturn this.#resolveArgument(arg as TransactionArgument);\n\t}\n\n\t#resolveArgument(arg: TransactionArgument): Argument {\n\t\tif (typeof arg === 'function') {\n\t\t\treturn parse(Argument, arg(this));\n\t\t}\n\n\t\treturn parse(Argument, arg);\n\t}\n\n\t// Method shorthands:\n\n\tsplitCoins<\n\t\tconst Amounts extends (TransactionArgument | SerializedBcs<any> | number | string | bigint)[],\n\t>(coin: TransactionObjectArgument | string, amounts: Amounts) {\n\t\tconst command = Commands.SplitCoins(\n\t\t\ttypeof coin === 'string' ? this.object(coin) : this.#resolveArgument(coin),\n\t\t\tamounts.map((amount) =>\n\t\t\t\ttypeof amount === 'number' || typeof amount === 'bigint' || typeof amount === 'string'\n\t\t\t\t\t? this.pure.u64(amount)\n\t\t\t\t\t: this.#normalizeTransactionArgument(amount),\n\t\t\t),\n\t\t);\n\t\tconst index = this.#data.commands.push(command);\n\t\treturn createTransactionResult(index - 1, amounts.length) as Extract<\n\t\t\tArgument,\n\t\t\t{ Result: unknown }\n\t\t> & {\n\t\t\t[K in keyof Amounts]: Extract<Argument, { NestedResult: unknown }>;\n\t\t};\n\t}\n\tmergeCoins(\n\t\tdestination: TransactionObjectArgument | string,\n\t\tsources: (TransactionObjectArgument | string)[],\n\t) {\n\t\treturn this.add(\n\t\t\tCommands.MergeCoins(\n\t\t\t\tthis.object(destination),\n\t\t\t\tsources.map((src) => this.object(src)),\n\t\t\t),\n\t\t);\n\t}\n\tpublish({ modules, dependencies }: { modules: number[][] | string[]; dependencies: string[] }) {\n\t\treturn this.add(\n\t\t\tCommands.Publish({\n\t\t\t\tmodules,\n\t\t\t\tdependencies,\n\t\t\t}),\n\t\t);\n\t}\n\tupgrade({\n\t\tmodules,\n\t\tdependencies,\n\t\tpackage: packageId,\n\t\tticket,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t\tpackage: string;\n\t\tticket: TransactionObjectArgument | string;\n\t}) {\n\t\treturn this.add(\n\t\t\tCommands.Upgrade({\n\t\t\t\tmodules,\n\t\t\t\tdependencies,\n\t\t\t\tpackage: packageId,\n\t\t\t\tticket: this.object(ticket),\n\t\t\t}),\n\t\t);\n\t}\n\tmoveCall({\n\t\targuments: args,\n\t\t...input\n\t}:\n\t\t| {\n\t\t\t\tpackage: string;\n\t\t\t\tmodule: string;\n\t\t\t\tfunction: string;\n\t\t\t\targuments?: (TransactionArgument | SerializedBcs<any>)[];\n\t\t\t\ttypeArguments?: string[];\n\t\t  }\n\t\t| {\n\t\t\t\ttarget: string;\n\t\t\t\targuments?: (TransactionArgument | SerializedBcs<any>)[];\n\t\t\t\ttypeArguments?: string[];\n\t\t  }) {\n\t\treturn this.add(\n\t\t\tCommands.MoveCall({\n\t\t\t\t...input,\n\t\t\t\targuments: args?.map((arg) => this.#normalizeTransactionArgument(arg)),\n\t\t\t} as Parameters<typeof Commands.MoveCall>[0]),\n\t\t);\n\t}\n\ttransferObjects(\n\t\tobjects: (TransactionObjectArgument | string)[],\n\t\taddress: TransactionArgument | SerializedBcs<any> | string,\n\t) {\n\t\treturn this.add(\n\t\t\tCommands.TransferObjects(\n\t\t\t\tobjects.map((obj) => this.object(obj)),\n\t\t\t\ttypeof address === 'string'\n\t\t\t\t\t? this.pure.address(address)\n\t\t\t\t\t: this.#normalizeTransactionArgument(address),\n\t\t\t),\n\t\t);\n\t}\n\tmakeMoveVec({\n\t\ttype,\n\t\telements,\n\t}: {\n\t\telements: (TransactionObjectArgument | string)[];\n\t\ttype?: string;\n\t}) {\n\t\treturn this.add(\n\t\t\tCommands.MakeMoveVec({\n\t\t\t\ttype,\n\t\t\t\telements: elements.map((obj) => this.object(obj)),\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * @deprecated Use toJSON instead.\n\t * For synchronous serialization, you can use `getData()`\n\t * */\n\tserialize() {\n\t\treturn JSON.stringify(serializeV1TransactionData(this.#data.snapshot()));\n\t}\n\n\tasync toJSON(options: SerializeTransactionOptions = {}): Promise<string> {\n\t\tawait this.prepareForSerialization(options);\n\t\treturn JSON.stringify(\n\t\t\tparse(SerializedTransactionDataV2, this.#data.snapshot()),\n\t\t\t(_key, value) => (typeof value === 'bigint' ? value.toString() : value),\n\t\t\t2,\n\t\t);\n\t}\n\n\t/** Build the transaction to BCS bytes, and sign it with the provided keypair. */\n\tasync sign(options: SignOptions): Promise<SignatureWithBytes> {\n\t\tconst { signer, ...buildOptions } = options;\n\t\tconst bytes = await this.build(buildOptions);\n\t\treturn signer.signTransaction(bytes);\n\t}\n\n\t/** Build the transaction to BCS bytes. */\n\tasync build(options: BuildTransactionOptions = {}): Promise<Uint8Array> {\n\t\tawait this.prepareForSerialization(options);\n\t\tawait this.#prepareBuild(options);\n\t\treturn this.#data.build({\n\t\t\tonlyTransactionKind: options.onlyTransactionKind,\n\t\t});\n\t}\n\n\t/** Derive transaction digest */\n\tasync getDigest(\n\t\toptions: {\n\t\t\tclient?: SuiClient;\n\t\t} = {},\n\t): Promise<string> {\n\t\tawait this.#prepareBuild(options);\n\t\treturn this.#data.getDigest();\n\t}\n\n\t/**\n\t * Prepare the transaction by validating the transaction data and resolving all inputs\n\t * so that it can be built into bytes.\n\t */\n\tasync #prepareBuild(options: BuildTransactionOptions) {\n\t\tif (!options.onlyTransactionKind && !this.#data.sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tawait this.#runPlugins([...this.#buildPlugins, resolveTransactionData], options);\n\t}\n\n\tasync #runPlugins(plugins: TransactionPlugin[], options: SerializeTransactionOptions) {\n\t\tconst createNext = (i: number) => {\n\t\t\tif (i >= plugins.length) {\n\t\t\t\treturn () => {};\n\t\t\t}\n\t\t\tconst plugin = plugins[i];\n\n\t\t\treturn async () => {\n\t\t\t\tconst next = createNext(i + 1);\n\t\t\t\tlet calledNext = false;\n\t\t\t\tlet nextResolved = false;\n\n\t\t\t\tawait plugin(this.#data, options, async () => {\n\t\t\t\t\tif (calledNext) {\n\t\t\t\t\t\tthrow new Error(`next() was call multiple times in TransactionPlugin ${i}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tcalledNext = true;\n\n\t\t\t\t\tawait next();\n\n\t\t\t\t\tnextResolved = true;\n\t\t\t\t});\n\n\t\t\t\tif (!calledNext) {\n\t\t\t\t\tthrow new Error(`next() was not called in TransactionPlugin ${i}`);\n\t\t\t\t}\n\n\t\t\t\tif (!nextResolved) {\n\t\t\t\t\tthrow new Error(`next() was not awaited in TransactionPlugin ${i}`);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\tawait createNext(0)();\n\t}\n\n\tasync prepareForSerialization(options: SerializeTransactionOptions) {\n\t\tconst intents = new Set<string>();\n\t\tfor (const command of this.#data.commands) {\n\t\t\tif (command.$Intent) {\n\t\t\t\tintents.add(command.$Intent.name);\n\t\t\t}\n\t\t}\n\n\t\tconst steps = [...this.#serializationPlugins];\n\n\t\tfor (const intent of intents) {\n\t\t\tif (options.supportedIntents?.includes(intent)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this.#intentResolvers.has(intent)) {\n\t\t\t\tthrow new Error(`Missing intent resolver for ${intent}`);\n\t\t\t}\n\n\t\t\tsteps.push(this.#intentResolvers.get(intent)!);\n\t\t}\n\n\t\tawait this.#runPlugins(steps, options);\n\t}\n}\n"],"names":[],"mappings":";;;;AAIA,SAAS,YAAY,uBAAuB;;AAE5C,SAAS,IAAI,aAAa;AAI1B,SAAS,2BAA2B;AAEpC,SAAS,gBAAgB;AAEzB,SAAS,UAAU,mBAAmB,WAAW,6BAA6B;AAC9E,SAAS,kCAAkC;AAC3C,SAAS,mCAAmC;AAC5C,SAAS,cAAc;AAMvB,SAAS,8BAA8B;AACvC,SAAS,2BAA2B;AACpC,SAAS,kBAAkB;AAC3B,SAAS,8BAA8B;AACvC,SAAS,wBAAwB;;;;;;;;;AA3BjC,IAAA,uBAAA,eAAA,kBAAA,OAAA,wBAAA,iCAAA,oBAAA,iBAAA;;;;;;;;;;;;;;AAoCA,SAAS,wBAAwB,KAAA;iBAAe,iEAAS,UAA6B;IACrF,MAAM,aAAa;QAAE,OAAO;QAAmB,QAAQ;IAAM;IAE7D,MAAM,gBAGA,CAAC,CAAA;IACP,MAAM,kBAAkB,CACvB;;6CAKC,aAAA,CAAA,YAAA,mFAAA,aAAA,CAAA,YAAA,GAA+B;YAC/B,OAAO;YACP,cAAc;gBAAC;gBAAO,WAAW;aAAA;QAClC;;IAED,OAAO,IAAI,MAAM,YAAY;QAC5B,MAAM;YACL,MAAM,IAAI,MACT;QAEF;QAAA,6EAAA;QAAA,4EAAA;QAAA,mCAAA;QAIA,KAAI,MAAA,EAAQ,QAAA,EAAU;YAErB,IAAI,YAAY,QAAQ;gBACvB,OAAO,QAAQ,GAAA,CAAI,QAAQ,QAAQ;YACpC;YAGA,IAAI,aAAa,OAAO,QAAA,EAAU;gBACjC,OAAO,aAAa;oBACnB,IAAI,IAAI;oBACR,MAAO,IAAI,OAAQ;wBAClB,MAAM,gBAAgB,CAAC;wBACvB;oBACD;gBACD;YACD;YAEA,IAAI,OAAO,aAAa,SAAU,CAAA;YAElC,MAAM,cAAc,SAAS,UAAU,EAAE;YACzC,IAAI,OAAO,KAAA,CAAM,WAAW,KAAK,cAAc,EAAG,CAAA;YAClD,OAAO,gBAAgB,WAAW;QACnC;IACD,CAAC;AACF;AAEA,MAAM,oBAAoB,OAAO,GAAA,CAAI,qBAAqB;AAMnD,SAAS,cAAc,GAAA,EAAkC;IAC/D,OAAO,CAAC,CAAC,OAAO,OAAO,QAAQ,YAAa,GAAA,CAAY,iBAAiB,CAAA,KAAM;AAChF;AAWA,MAAM,uBAAkD;IACvD,cAAc,aAAA,GAAA,IAAI,IAAI;IACtB,sBAAsB,aAAA,GAAA,IAAI,IAAI;AAC/B;AAEA,MAAM,2BAA2B,OAAO,GAAA,CAAI,8BAA8B;AAC1E,SAAS,0BAA0B;IAClC,IAAI;QACH,MAAM,SAAS;QAIf,IAAI,CAAC,MAAA,CAAO,wBAAwB,CAAA,EAAG;YACtC,MAAA,CAAO,wBAAwB,CAAA,GAAI;QACpC;QAEA,OAAO,MAAA,CAAO,wBAAwB,CAAA;IACvC,EAAA,OAAS,GAAG;QACX,OAAO;IACR;AACD;AAKO,MAAM,eAAN,MAAM,aAAY;IAkLxB;;;GAAA,GAzKA,OAAO,SAAS,UAAA,EAAiC;QAChD,MAAM,KAAK,IAAI,aAAY;QAE3B,aAAA,IAAG,iOAAQ,yBAAA,CAAuB,aAAA,CACjC,OAAO,eAAe,6MAAW,aAAA,EAAW,UAAU,IAAI;QAG3D,OAAO;IACR;IAAA;;;;;GAAA,GAQA,OAAO,KAAK,WAAA,EAAgD;QAC3D,MAAM,iBAAiB,IAAI,aAAY;QAEvC,IAAI,cAAc,WAAW,GAAG;YAC/B,aAAA,gBAAe,OAAQ,8NAAI,yBAAA,CAAuB,YAAY,OAAA,CAAQ,CAAC;QACxE,OAAA,IAAW,OAAO,gBAAgB,YAAY,CAAC,YAAY,UAAA,CAAW,GAAG,GAAG;YAC3E,aAAA,gBAAe,iOAAQ,yBAAA,CAAuB,SAAA,CAC7C,OAAO,gBAAgB,6MAAW,aAAA,EAAW,WAAW,IAAI;QAE9D,OAAO;YACN,aAAA,gBAAe,gOAAQ,0BAAA,CAAuB,OAAA,CAAQ,KAAK,KAAA,CAAM,WAAW,CAAC;QAC9E;QAEA,OAAO;IACR;IAKA,OAAO,kCACN,UAAA,EACA,IAAA,EACC;QACD,wBAAwB,EAAE,oBAAA,CAAqB,GAAA,CAC9C,+CACA,OAAS;IAEX;IAEA,OAAO,oCAAoC,IAAA,EAAc;QACxD,wBAAwB,EAAE,oBAAA,CAAqB,MAAA,CAAO,IAAI;IAC3D;IAKA,OAAO,0BACN,UAAA,EACA,IAAA,EACC;QACD,wBAAwB,EAAE,YAAA,CAAa,GAAA,CACtC,+CACA,OAAS;IAEX;IAEA,OAAO,4BAA4B,IAAA,EAAc;QAChD,wBAAwB,EAAE,YAAA,CAAa,MAAA,CAAO,IAAI;IACnD;IAEA,uBAAuB,IAAA,EAAyB;QAC/C,aAAA,IAAA,EAAK,uBAAsB,IAAA,CAAK,IAAI;IACrC;IAEA,eAAe,IAAA,EAAyB;QACvC,aAAA,IAAA,EAAK,eAAc,IAAA,CAAK,IAAI;IAC7B;IAEA,kBAAkB,MAAA,EAAgB,QAAA,EAA6B;QAC9D,IAAI,aAAA,IAAA,EAAK,kBAAiB,GAAA,CAAI,MAAM,KAAK,aAAA,IAAA,EAAK,kBAAiB,GAAA,CAAI,MAAM,MAAM,UAAU;YACxF,MAAM,IAAI,MAAM,uBAA6B,OAAN,MAAM,EAAA,gBAAiB;QAC/D;QAEA,aAAA,IAAA,EAAK,kBAAiB,GAAA,CAAI,QAAQ,QAAQ;IAC3C;IAEA,UAAU,MAAA,EAAgB;QACzB,aAAA,IAAA,EAAK,OAAM,MAAA,GAAS;IACrB;IAAA;;;GAAA,GAKA,kBAAkB,MAAA,EAAgB;QACjC,IAAI,CAAC,aAAA,IAAA,EAAK,OAAM,MAAA,EAAQ;YACvB,aAAA,IAAA,EAAK,OAAM,MAAA,GAAS;QACrB;IACD;IACA,cAAc,UAAA,EAA8D;QAC3E,aAAA,IAAA,EAAK,OAAM,UAAA,GAAa,sJAAa,QAAA,6NAAM,wBAAA,EAAuB,UAAU,IAAI;IACjF;IACA,YAAY,KAAA,EAAwB;QACnC,aAAA,IAAA,EAAK,OAAM,SAAA,CAAU,KAAA,GAAQ,OAAO,KAAK;IAC1C;IACA,aAAa,MAAA,EAAyB;QACrC,aAAA,IAAA,EAAK,OAAM,SAAA,CAAU,MAAA,GAAS,OAAO,MAAM;IAC5C;IAEA,qBAAqB,MAAA,EAAyB;QAC7C,IAAI,aAAA,IAAA,EAAK,OAAM,OAAA,CAAQ,MAAA,IAAU,MAAM;YACtC,aAAA,IAAA,EAAK,OAAM,SAAA,CAAU,MAAA,GAAS,OAAO,MAAM;QAC5C;IACD;IAEA,YAAY,KAAA,EAAe;QAC1B,aAAA,IAAA,EAAK,OAAM,SAAA,CAAU,KAAA,GAAQ;IAC9B;IACA,cAAc,QAAA,EAAuB;QACpC,aAAA,IAAA,EAAK,OAAM,SAAA,CAAU,OAAA,GAAU,SAAS,GAAA,CAAI,CAAC,mJAAY,QAAA,6NAAM,YAAA,EAAW,OAAO,CAAC;IACnF;IAAA,yCAAA,GAKA,IAAI,YAAY;QACf,gOAAO,6BAAA,EAA2B,aAAA,IAAA,EAAK,OAAM,QAAA,CAAS,CAAC;IACxD;IAAA,0DAAA,GAGA,UAAU;QACT,OAAO,aAAA,IAAA,EAAK,OAAM,QAAA,CAAS;IAC5B;IAAA,iGAAA;IAAA,kBAAA;IAIA,IAAA,CAAK,iBAAiB,CAAA,GAAI;QACzB,OAAO;IACR;IAAA,sGAAA;IAGA,IAAI,OAAgD;QACnD,OAAO,cAAA,CAAe,IAAA,EAAM,QAAQ;YACnC,YAAY;YACZ,0NAAO,aAAA,EAAqB,CAAC,UAAoB;gBAChD,6MAAI,mBAAA,EAAgB,KAAK,GAAG;oBAC3B,OAAO,aAAA,IAAA,EAAK,OAAM,QAAA,CAAS,QAAQ;wBAClC,OAAO;wBACP,MAAM;4BACL,OAAO,MAAM,QAAA,CAAS;wBACvB;oBACD,CAAC;gBACF;gBAGA,OAAO,aAAA,IAAA,EAAK,OAAM,QAAA,CACjB,iJACA,KAAA,6NAAG,oBAAA,EAAmB,KAAK,6IACxB,QAAA,EAAM,+OAAA,EAAmB,KAAK,IAC9B,iBAAiB,8NAChB,SAAA,CAAO,IAAA,CAAK,KAAK,IACjB;oBAAE,OAAO;oBAAkB,gBAAgB;wBAAE;oBAAM;gBAAE;YAE3D,CAAC;QACF,CAAC;QAED,OAAO,IAAA,CAAK,IAAA;IACb;IAAA,uEAAA,GAUA,IAAI,MAAM;QACT,OAAO;YAAE,OAAO;YAAoB,SAAS;QAAc;IAC5D;IAAA;;;GAAA,GAiDA,YAA6D;QAA7D,IAAA,IAAA,OAAA,UAAA,QAAA,AAAa,OAAb,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;iBAAA,QAAA,SAAA,CAAA,KAAa;;QACZ,OAAO,IAAA,CAAK,MAAA,kNAAO,SAAA,CAAO,SAAA,CAAU,GAAG,IAAI,CAAC;IAC7C;IAAA;;;GAAA,GAMA,eAAmE;QAAnE,IAAA,IAAA,OAAA,UAAA,QAAA,OAAA,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;YAAgB,KAAhB,QAAA,SAAA,CAAA,KAAgB;;QACf,OAAO,IAAA,CAAK,MAAA,kNAAO,SAAA,CAAO,YAAA,CAAa,GAAG,IAAI,CAAC;IAChD;IAAA;;;GAAA,GAMA,kBAAyE;QAAzE,IAAA,IAAA,OAAA,UAAA,QAAA,OAAA,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;YAAmB,KAAnB,QAAA,SAAA,CAAA,KAAmB;;QAClB,OAAO,IAAA,CAAK,MAAA,iNAAO,UAAA,CAAO,eAAA,CAAgB,GAAG,IAAI,CAAC;IACnD;IAAA,yCAAA,GAGA,IAA2B,OAAA,EAAgD;QAC1E,IAAI,OAAO,YAAY,YAAY;YAClC,OAAO,QAAQ,IAAI;QACpB;QAEA,MAAM,QAAQ,aAAA,IAAA,EAAK,OAAM,QAAA,CAAS,IAAA,CAAK,OAAO;QAE9C,OAAO,wBAAwB,QAAQ,CAAC;IACzC;IAAA,qBAAA;IAoBA,WAEE,IAAA,EAA0C,OAAA,EAAkB;QAC7D,MAAM,6NAAU,WAAA,CAAS,UAAA,CACxB,OAAO,SAAS,WAAW,IAAA,CAAK,MAAA,CAAO,IAAI,IAAI,gBAAA,IAAA,EAAK,wBAAA,oBAAL,IAAA,CAAA,IAAA,EAAsB,OACrE,QAAQ,GAAA,CAAI,CAAC,SACZ,OAAO,WAAW,YAAY,OAAO,WAAW,YAAY,OAAO,WAAW,WAC3E,IAAA,CAAK,IAAA,CAAK,GAAA,CAAI,MAAM,IACpB,gBAAA,IAAA,EAAK,wBAAA,iCAAL,IAAA,CAAA,IAAA,EAAmC;QAGxC,MAAM,QAAQ,aAAA,IAAA,EAAK,OAAM,QAAA,CAAS,IAAA,CAAK,OAAO;QAC9C,OAAO,wBAAwB,QAAQ,GAAG,QAAQ,MAAM;IAMzD;IACA,WACC,WAAA,EACA,OAAA,EACC;QACD,OAAO,IAAA,CAAK,GAAA,mNACX,YAAA,CAAS,UAAA,CACR,IAAA,CAAK,MAAA,CAAO,WAAW,GACvB,QAAQ,GAAA,CAAI,CAAC,MAAQ,IAAA,CAAK,MAAA,CAAO,GAAG,CAAC;IAGxC;IACA,aAAgC,EAA+D;cAArF,OAAA,EAAS,YAAA,CAAa,CAAA,GAAxB;QACP,OAAO,IAAA,CAAK,GAAA,oNACX,WAAA,CAAS,OAAA,CAAQ;YAChB;YACA;QACD,CAAC;IAEH;IACA,QAAQ,KAKR,EAKG;cATF,OAAA,EACA,YAAA,EACA,SAAS,SAAA,EACT,MAAA,EACD;QAMC,OAAO,IAAA,CAAK,GAAA,oNACX,WAAA,CAAS,OAAA,CAAQ;YAChB;YACA;YACA,SAAS;YACT,QAAQ,IAAA,CAAK,MAAA,CAAO,MAAM;QAC3B,CAAC;IAEH;IACA,cAGA,EAYM;cAdL,WAAW,IAAA,EACX,GAAG,OACJ,GAHS;QAgBR,OAAO,IAAA,CAAK,GAAA,oNACX,WAAA,CAAS,QAAA,CAAS;YACjB,GAAG,KAAA;YACH,SAAA,8CAAW,KAAM,GAAA,CAAI,CAAC,MAAQ,gBAAA,IAAA,EAAK,wBAAA,iCAAL,IAAA,CAAA,IAAA,EAAmC,IAAI;QACtE,CAA4C;IAE9C;IACA,gBACC,OAAA,EACA,OAAA,EACC;QACD,OAAO,IAAA,CAAK,GAAA,oNACX,WAAA,CAAS,eAAA,CACR,QAAQ,GAAA,CAAI,CAAC,MAAQ,IAAA,CAAK,MAAA,CAAO,GAAG,CAAC,GACrC,OAAO,YAAY,WAChB,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,OAAO,IACzB,gBAAA,IAAA,EAAK,wBAAA,iCAAL,IAAA,CAAA,IAAA,EAAmC;IAGzC;IACA,iBAGA,EAGG;cALF,IAAA,EACA,QAAA,EACD,GAHY;QAOX,OAAO,IAAA,CAAK,GAAA,oNACX,WAAA,CAAS,WAAA,CAAY;YACpB;YACA,UAAU,SAAS,GAAA,CAAI,CAAC,MAAQ,IAAA,CAAK,MAAA,CAAO,GAAG,CAAC;QACjD,CAAC;IAEH;IAAA;;;KAAA,GAMA,YAAY;QACX,OAAO,KAAK,SAAA,0NAAU,6BAAA,EAA2B,aAAA,IAAA,EAAK,OAAM,QAAA,CAAS,CAAC,CAAC;IACxE;IAEA,MAAM,SAAmE;sBAA5D,iEAAuC,CAAC;QACpD,MAAM,IAAA,CAAK,uBAAA,CAAwB,OAAO;QAC1C,OAAO,KAAK,SAAA,0IACX,QAAA,uNAAM,8BAAA,EAA6B,aAAA,IAAA,EAAK,OAAM,QAAA,CAAS,CAAC,GACxD,CAAC,MAAM,QAAW,OAAO,UAAU,WAAW,MAAM,QAAA,CAAS,IAAI,OACjE;IAEF;IAAA,+EAAA,GAGA,MAAM,KAAK,OAAA,EAAmD;QAC7D,MAAM,EAAE,MAAA,EAAQ,GAAG,aAAa,CAAA,GAAI;QACpC,MAAM,QAAQ,MAAM,IAAA,CAAK,KAAA,CAAM,YAAY;QAC3C,OAAO,OAAO,eAAA,CAAgB,KAAK;IACpC;IAAA,wCAAA,GAGA,MAAM,QAAkE;sBAA5D,iEAAmC,CAAC;QAC/C,MAAM,IAAA,CAAK,uBAAA,CAAwB,OAAO;QAC1C,MAAM,gBAAA,IAAA,EAAK,wBAAA,iBAAL,IAAA,CAAA,IAAA,EAAmB;QACzB,OAAO,aAAA,IAAA,EAAK,OAAM,KAAA,CAAM;YACvB,qBAAqB,QAAQ,mBAAA;QAC9B,CAAC;IACF;IAAA,8BAAA,GAGA,MAAM,YAIa;sBAHlB,iEAEI,CAAC;QAEL,MAAM,gBAAA,IAAA,EAAK,wBAAA,iBAAL,IAAA,CAAA,IAAA,EAAmB;QACzB,OAAO,aAAA,IAAA,EAAK,OAAM,SAAA,CAAU;IAC7B;IAmDA,MAAM,wBAAwB,OAAA,EAAsC;QACnE,MAAM,UAAU,aAAA,GAAA,IAAI,IAAY;QAChC,KAAA,MAAW,WAAW,aAAA,IAAA,EAAK,OAAM,QAAA,CAAU;YAC1C,IAAI,QAAQ,OAAA,EAAS;gBACpB,QAAQ,GAAA,CAAI,QAAQ,OAAA,CAAQ,IAAI;YACjC;QACD;QAEA,MAAM,QAAQ,CAAC;eAAG,aAAA,IAAA,EAAK,sBAAqB;SAAA;QAE5C,KAAA,MAAW,UAAU,QAAS;;YAC7B,iCAAI,QAAQ,gBAAA,wFAAkB,QAAA,CAAS,MAAM,GAAG;gBAC/C;YACD;YAEA,IAAI,CAAC,aAAA,IAAA,EAAK,kBAAiB,GAAA,CAAI,MAAM,GAAG;gBACvC,MAAM,IAAI,MAAM,+BAAqC,CAAE,MAAR,MAAM;YACtD;YAEA,MAAM,IAAA,CAAK,aAAA,IAAA,EAAK,kBAAiB,GAAA,CAAI,MAAM,CAAE;QAC9C;QAEA,MAAM,gBAAA,IAAA,EAAK,wBAAA,eAAL,IAAA,CAAA,IAAA,EAAiB,OAAO;IAC/B;IA5UA,aAAc;QA7KR,aAAA,IAAA,EAAA;QACN,aAAA,IAAA,EAAA;QACA,aAAA,IAAA,EAAA;QACA,aAAA,IAAA,EAAA,kBAAmB,aAAA,GAAA,IAAI,IAA+B;QA2HtD,aAAA,IAAA,EAAA;QA8DA;;KAAA,GAAA,IAAA,CAAA,MAAA,wNAEI,sBAAA,EACH,CAAC,UAAsF;gBAerF,kBAEA;YAhBD,IAAI,OAAO,UAAU,YAAY;gBAChC,OAAO,IAAA,CAAK,MAAA,CAAO,MAAM,IAAI,CAAC;YAC/B;YAEA,IAAI,OAAO,UAAU,qJAAY,KAAA,6NAAG,WAAA,EAAU,KAAK,GAAG;gBACrD,OAAO;YACR;YAEA,MAAM,yNAAK,mBAAA,EAAiB,KAAK;YAEjC,MAAM,WAAW,aAAA,IAAA,EAAK,OAAM,MAAA,CAAO,IAAA,CAAK,CAAC,IAAM,2NAAO,mBAAA,EAAiB,CAAC,CAAC;YAGzE,sFACW,MAAA,sEAAQ,YAAA,KAClB,OAAO,UAAU,oCACX,MAAA,gEAAQ,YAAA,GACb;gBACD,SAAS,MAAA,CAAO,YAAA,CAAa,OAAA,GAC5B,SAAS,MAAA,CAAO,YAAA,CAAa,OAAA,IAAW,MAAM,MAAA,CAAO,YAAA,CAAa,OAAA;YACpE;YAEA,OAAO,WACJ;gBAAE,OAAO;gBAAS,OAAO,aAAA,IAAA,EAAK,OAAM,MAAA,CAAO,OAAA,CAAQ,QAAQ;gBAAG,MAAM;YAAS,IAC7E,aAAA,IAAA,EAAK,OAAM,QAAA,CACX,UACA,OAAO,UAAU,WACd;gBACA,OAAO;gBACP,kBAAkB;oBAAE,UAAU,0OAAA,EAAoB,KAAK;gBAAE;YAC1D,IACC;QAEP;QAnDA,MAAM,gBAAgB,wBAAwB;QAC9C,aAAA,IAAA,EAAK,OAAQ,8NAAI,yBAAA,CAAuB;QACxC,aAAA,IAAA,EAAK,eAAgB,CAAC;eAAG,cAAc,YAAA,CAAa,MAAA,CAAO,CAAC;SAAA;QAC5D,aAAA,IAAA,EAAK,uBAAwB,CAAC;eAAG,cAAc,oBAAA,CAAqB,MAAA,CAAO,CAAC;SAAA;IAC7E;AAwUD;AAzfC,wBAAA,IAAA;AACA,gBAAA,IAAA;AACA,mBAAA,IAAA;AA2HA,QAAA,IAAA;AA9HM,yBAAA,IAAA;AAuQN,kCAA6B,SAAC,GAAA,EAA+C;IAC5E,8MAAI,kBAAA,EAAgB,GAAG,GAAG;QACzB,OAAO,IAAA,CAAK,IAAA,CAAK,GAAG;IACrB;IAEA,OAAO,gBAAA,IAAA,EAAK,wBAAA,oBAAL,IAAA,CAAA,IAAA,EAAsB;AAC9B;AAEA,qBAAgB,SAAC,GAAA,EAAoC;IACpD,IAAI,OAAO,QAAQ,YAAY;QAC9B,QAAO,gJAAA,6NAAM,WAAA,EAAU,IAAI,IAAI,CAAC;IACjC;IAEA,gJAAO,QAAA,6NAAM,WAAA,EAAU,GAAG;AAC3B;AAgKM,kBAAa,eAAC,OAAA,EAAkC;IACrD,IAAI,CAAC,QAAQ,mBAAA,IAAuB,CAAC,aAAA,IAAA,EAAK,OAAM,MAAA,EAAQ;QACvD,MAAM,IAAI,MAAM,4BAA4B;IAC7C;IAEA,MAAM,gBAAA,IAAA,EAAK,wBAAA,eAAL,IAAA,CAAA,IAAA,EAAiB,CAAC;WAAG,aAAA,IAAA,EAAK;0OAAe,yBAAsB;KAAA,EAAG;AACzE;AAEM,gBAAW,eAAC,OAAA,EAA8B,OAAA,EAAsC;IACrF,MAAM,aAAa,CAAC,MAAc;QACjC,IAAI,KAAK,QAAQ,MAAA,EAAQ;YACxB,OAAO,KAAO,CAAD;QACd;QACA,MAAM,SAAS,OAAA,CAAQ,CAAC,CAAA;QAExB,OAAO,YAAY;YAClB,MAAM,OAAO,WAAW,IAAI,CAAC;YAC7B,IAAI,aAAa;YACjB,IAAI,eAAe;YAEnB,MAAM,OAAO,aAAA,IAAA,EAAK,QAAO,SAAS,YAAY;gBAC7C,IAAI,YAAY;oBACf,MAAM,IAAI,MAAM,uDAAwD,CAAE,MAAH,CAAC;gBACzE;gBAEA,aAAa;gBAEb,MAAM,KAAK;gBAEX,eAAe;YAChB,CAAC;YAED,IAAI,CAAC,YAAY;gBAChB,MAAM,IAAI,MAAM,8CAA+C,CAAE,MAAH,CAAC;YAChE;YAEA,IAAI,CAAC,cAAc;gBAClB,MAAM,IAAI,MAAM,+CAAgD,CAAE,MAAH,CAAC;YACjE;QACD;IACD;IAEA,MAAM,WAAW,CAAC,EAAE;AACrB;AAheM,IAAM,cAAN","debugId":null}},
    {"offset": {"line": 3678, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/utils/dynamic-fields.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toHex } from '@mysten/bcs';\nimport { blake2b } from '@noble/hashes/blake2b';\n\nimport type { TypeTag } from '../bcs/bcs.js';\nimport { bcs } from '../bcs/index.js';\n\nexport function deriveDynamicFieldID(\n\tparentId: string,\n\ttypeTag: typeof TypeTag.$inferInput,\n\tkey: Uint8Array,\n) {\n\tconst address = bcs.Address.serialize(parentId).toBytes();\n\tconst tag = bcs.TypeTag.serialize(typeTag).toBytes();\n\tconst keyLength = bcs.u64().serialize(key.length).toBytes();\n\n\tconst hash = blake2b.create({\n\t\tdkLen: 32,\n\t});\n\n\thash.update(new Uint8Array([0xf0]));\n\thash.update(address);\n\thash.update(keyLength);\n\thash.update(key);\n\thash.update(tag);\n\n\treturn `0x${toHex(hash.digest().slice(0, 32))}`;\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,aAAa;AACtB,SAAS,eAAe;AAGxB,SAAS,WAAW;;;;AAEb,SAAS,qBACf,QAAA,EACA,OAAA,EACA,GAAA,EACC;IACD,MAAM,iOAAU,MAAA,CAAI,OAAA,CAAQ,SAAA,CAAU,QAAQ,EAAE,OAAA,CAAQ;IACxD,MAAM,MAAM,6NAAA,CAAI,OAAA,CAAQ,SAAA,CAAU,OAAO,EAAE,OAAA,CAAQ;IACnD,MAAM,mOAAY,MAAA,CAAI,GAAA,CAAI,EAAE,SAAA,CAAU,IAAI,MAAM,EAAE,OAAA,CAAQ;IAE1D,MAAM,sJAAO,WAAA,CAAQ,MAAA,CAAO;QAC3B,OAAO;IACR,CAAC;IAED,KAAK,MAAA,CAAO,IAAI,WAAW;QAAC,GAAI;KAAC,CAAC;IAClC,KAAK,MAAA,CAAO,OAAO;IACnB,KAAK,MAAA,CAAO,SAAS;IACrB,KAAK,MAAA,CAAO,GAAG;IACf,KAAK,MAAA,CAAO,GAAG;IAEf,OAAO,KAAsC,yMAAjC,QAAA,EAAM,KAAK,MAAA,CAAO,EAAE,KAAA,CAAM,GAAG,EAAE,CAAC,CAAC;AAC9C","debugId":null}},
    {"offset": {"line": 3709, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/experimental/core.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TypeTagSerializer } from '../bcs/type-tag-serializer.js';\nimport { deriveDynamicFieldID } from '../utils/dynamic-fields.js';\nimport { normalizeStructTag, parseStructTag, SUI_ADDRESS_LENGTH } from '../utils/sui-types.js';\nimport { Experimental_BaseClient } from './client.js';\nimport type { Experimental_SuiClientTypes } from './types.js';\n\nexport abstract class Experimental_CoreClient\n\textends Experimental_BaseClient\n\timplements Experimental_SuiClientTypes.TransportMethods\n{\n\tcore = this;\n\n\tabstract getObjects(\n\t\toptions: Experimental_SuiClientTypes.GetObjectsOptions,\n\t): Promise<Experimental_SuiClientTypes.GetObjectsResponse>;\n\n\tasync getObject(\n\t\toptions: Experimental_SuiClientTypes.GetObjectOptions,\n\t): Promise<Experimental_SuiClientTypes.GetObjectResponse> {\n\t\tconst { objectId } = options;\n\t\tconst {\n\t\t\tobjects: [result],\n\t\t} = await this.getObjects({ objectIds: [objectId] });\n\t\tif (result instanceof Error) {\n\t\t\tthrow result;\n\t\t}\n\t\treturn { object: result };\n\t}\n\n\tabstract getCoins(\n\t\toptions: Experimental_SuiClientTypes.GetCoinsOptions,\n\t): Promise<Experimental_SuiClientTypes.GetCoinsResponse>;\n\n\tabstract getOwnedObjects(\n\t\toptions: Experimental_SuiClientTypes.GetOwnedObjectsOptions,\n\t): Promise<Experimental_SuiClientTypes.GetOwnedObjectsResponse>;\n\n\tabstract getBalance(\n\t\toptions: Experimental_SuiClientTypes.GetBalanceOptions,\n\t): Promise<Experimental_SuiClientTypes.GetBalanceResponse>;\n\n\tabstract getAllBalances(\n\t\toptions: Experimental_SuiClientTypes.GetAllBalancesOptions,\n\t): Promise<Experimental_SuiClientTypes.GetAllBalancesResponse>;\n\n\tabstract getTransaction(\n\t\toptions: Experimental_SuiClientTypes.GetTransactionOptions,\n\t): Promise<Experimental_SuiClientTypes.GetTransactionResponse>;\n\n\tabstract executeTransaction(\n\t\toptions: Experimental_SuiClientTypes.ExecuteTransactionOptions,\n\t): Promise<Experimental_SuiClientTypes.ExecuteTransactionResponse>;\n\n\tabstract dryRunTransaction(\n\t\toptions: Experimental_SuiClientTypes.DryRunTransactionOptions,\n\t): Promise<Experimental_SuiClientTypes.DryRunTransactionResponse>;\n\n\tabstract getReferenceGasPrice(): Promise<Experimental_SuiClientTypes.GetReferenceGasPriceResponse>;\n\n\tabstract getDynamicFields(\n\t\toptions: Experimental_SuiClientTypes.GetDynamicFieldsOptions,\n\t): Promise<Experimental_SuiClientTypes.GetDynamicFieldsResponse>;\n\n\tasync getDynamicField(\n\t\toptions: Experimental_SuiClientTypes.GetDynamicFieldOptions,\n\t): Promise<Experimental_SuiClientTypes.GetDynamicFieldResponse> {\n\t\tconst fieldId = deriveDynamicFieldID(\n\t\t\toptions.parentId,\n\t\t\tTypeTagSerializer.parseFromStr(options.name.type),\n\t\t\toptions.name.bcs,\n\t\t);\n\t\tconst {\n\t\t\tobjects: [fieldObject],\n\t\t} = await this.getObjects({\n\t\t\tobjectIds: [fieldId],\n\t\t});\n\n\t\tif (fieldObject instanceof Error) {\n\t\t\tthrow fieldObject;\n\t\t}\n\n\t\tconst fieldType = parseStructTag(fieldObject.type);\n\n\t\treturn {\n\t\t\tdynamicField: {\n\t\t\t\tid: fieldObject.id,\n\t\t\t\tdigest: fieldObject.digest,\n\t\t\t\tversion: fieldObject.version,\n\t\t\t\ttype: fieldObject.type,\n\t\t\t\tname: {\n\t\t\t\t\ttype:\n\t\t\t\t\t\ttypeof fieldType.typeParams[0] === 'string'\n\t\t\t\t\t\t\t? fieldType.typeParams[0]\n\t\t\t\t\t\t\t: normalizeStructTag(fieldType.typeParams[0]),\n\t\t\t\t\tbcs: options.name.bcs,\n\t\t\t\t},\n\t\t\t\tvalue: {\n\t\t\t\t\ttype:\n\t\t\t\t\t\ttypeof fieldType.typeParams[1] === 'string'\n\t\t\t\t\t\t\t? fieldType.typeParams[1]\n\t\t\t\t\t\t\t: normalizeStructTag(fieldType.typeParams[1]),\n\t\t\t\t\tbcs: fieldObject.content.slice(SUI_ADDRESS_LENGTH + options.name.bcs.length),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t}\n\n\tasync waitForTransaction({\n\t\tsignal,\n\t\ttimeout = 60 * 1000,\n\t\t...input\n\t}: {\n\t\t/** An optional abort signal that can be used to cancel the wait. */\n\t\tsignal?: AbortSignal;\n\t\t/** The amount of time to wait for transaction. Defaults to one minute. */\n\t\ttimeout?: number;\n\t} & Experimental_SuiClientTypes.GetTransactionOptions): Promise<Experimental_SuiClientTypes.GetTransactionResponse> {\n\t\tconst abortSignal = signal\n\t\t\t? AbortSignal.any([AbortSignal.timeout(timeout), signal])\n\t\t\t: AbortSignal.timeout(timeout);\n\n\t\tconst abortPromise = new Promise((_, reject) => {\n\t\t\tabortSignal.addEventListener('abort', () => reject(abortSignal.reason));\n\t\t});\n\n\t\tabortPromise.catch(() => {\n\t\t\t// Swallow unhandled rejections that might be thrown after early return\n\t\t});\n\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\tabortSignal.throwIfAborted();\n\t\t\ttry {\n\t\t\t\treturn await this.getTransaction({\n\t\t\t\t\t...input,\n\t\t\t\t\tsignal: abortSignal,\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tawait Promise.race([new Promise((resolve) => setTimeout(resolve, 2_000)), abortPromise]);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,yBAAyB;AAClC,SAAS,4BAA4B;AACrC,SAAS,oBAAoB,gBAAgB,0BAA0B;AACvE,SAAS,+BAA+B;;;;;AAGjC,MAAe,iPACb,0BAAA,CAET;IAOC,MAAM,UACL,OAAA,EACyD;QACzD,MAAM,EAAE,QAAA,CAAS,CAAA,GAAI;QACrB,MAAM,EACL,SAAS,CAAC,MAAM,CAAA,EACjB,GAAI,MAAM,IAAA,CAAK,UAAA,CAAW;YAAE,WAAW;gBAAC,QAAQ;aAAA;QAAE,CAAC;QACnD,IAAI,kBAAkB,OAAO;YAC5B,MAAM;QACP;QACA,OAAO;YAAE,QAAQ;QAAO;IACzB;IAoCA,MAAM,gBACL,OAAA,EAC+D;QAC/D,MAAM,mOAAU,uBAAA,EACf,QAAQ,QAAA,6NACR,oBAAA,CAAkB,YAAA,CAAa,QAAQ,IAAA,CAAK,IAAI,GAChD,QAAQ,IAAA,CAAK,GAAA;QAEd,MAAM,EACL,SAAS,CAAC,WAAW,CAAA,EACtB,GAAI,MAAM,IAAA,CAAK,UAAA,CAAW;YACzB,WAAW;gBAAC,OAAO;aAAA;QACpB,CAAC;QAED,IAAI,uBAAuB,OAAO;YACjC,MAAM;QACP;QAEA,MAAM,gOAAY,iBAAA,EAAe,YAAY,IAAI;QAEjD,OAAO;YACN,cAAc;gBACb,IAAI,YAAY,EAAA;gBAChB,QAAQ,YAAY,MAAA;gBACpB,SAAS,YAAY,OAAA;gBACrB,MAAM,YAAY,IAAA;gBAClB,MAAM;oBACL,MACC,OAAO,UAAU,UAAA,CAAW,CAAC,CAAA,KAAM,WAChC,UAAU,UAAA,CAAW,CAAC,CAAA,uNACtB,qBAAA,EAAmB,UAAU,UAAA,CAAW,CAAC,CAAC;oBAC9C,KAAK,QAAQ,IAAA,CAAK,GAAA;gBACnB;gBACA,OAAO;oBACN,MACC,OAAO,UAAU,UAAA,CAAW,CAAC,CAAA,KAAM,WAChC,UAAU,UAAA,CAAW,CAAC,CAAA,uNACtB,qBAAA,EAAmB,UAAU,UAAA,CAAW,CAAC,CAAC;oBAC9C,KAAK,YAAY,OAAA,CAAQ,KAAA,iNAAM,qBAAA,GAAqB,QAAQ,IAAA,CAAK,GAAA,CAAI,MAAM;gBAC5E;YACD;QACD;IACD;IAEA,MAAM,mBAAmB,KAIzB,EAKoH;cARnH,MAAA,EACA,UAAU,KAAK,GAAA,EACf,GAAG,OACJ;QAMC,MAAM,cAAc,SACjB,YAAY,GAAA,CAAI;YAAC,YAAY,OAAA,CAAQ,OAAO;YAAG,MAAM;SAAC,IACtD,YAAY,OAAA,CAAQ,OAAO;QAE9B,MAAM,eAAe,IAAI,QAAQ,CAAC,GAAG,WAAW;YAC/C,YAAY,gBAAA,CAAiB,SAAS,IAAM,OAAO,YAAY,MAAM,CAAC;QACvE,CAAC;QAED,aAAa,KAAA,CAAM,KAEnB,CAFyB,AAExB;QAGD,MAAO,KAAM;YACZ,YAAY,cAAA,CAAe;YAC3B,IAAI;gBACH,OAAO,MAAM,IAAA,CAAK,cAAA,CAAe;oBAChC,GAAG,KAAA;oBACH,QAAQ;gBACT,CAAC;YACF,EAAA,OAAS,GAAG;gBACX,MAAM,QAAQ,IAAA,CAAK;oBAAC,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS,GAAK,CAAC;oBAAG,YAAY;iBAAC;YACxF;QACD;IACD;IAvIM,aAAA;QAAA,KAAA,IAAA;QAIN,IAAA,CAAA,IAAA,GAAO,IAAA;IAAA;AAoIR","debugId":null}},
    {"offset": {"line": 3799, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/experimental/errors.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { ObjectResponseError } from '../client/index.js';\n\nexport class SuiClientError extends Error {}\n\nexport class ObjectError extends SuiClientError {\n\tcode: string;\n\n\tconstructor(code: string, message: string) {\n\t\tsuper(message);\n\t\tthis.code = code;\n\t}\n\n\tstatic fromResponse(response: ObjectResponseError, objectId?: string): ObjectError {\n\t\tswitch (response.code) {\n\t\t\tcase 'notExists':\n\t\t\t\treturn new ObjectError(response.code, `Object ${response.object_id} does not exist`);\n\t\t\tcase 'dynamicFieldNotFound':\n\t\t\t\treturn new ObjectError(\n\t\t\t\t\tresponse.code,\n\t\t\t\t\t`Dynamic field not found for object ${response.parent_object_id}`,\n\t\t\t\t);\n\t\t\tcase 'deleted':\n\t\t\t\treturn new ObjectError(response.code, `Object ${response.object_id} has been deleted`);\n\t\t\tcase 'displayError':\n\t\t\t\treturn new ObjectError(response.code, `Display error: ${response.error}`);\n\t\t\tcase 'unknown':\n\t\t\tdefault:\n\t\t\t\treturn new ObjectError(\n\t\t\t\t\tresponse.code,\n\t\t\t\t\t`Unknown error while loading object${objectId ? ` ${objectId}` : ''}`,\n\t\t\t\t);\n\t\t}\n\t}\n}\n"],"names":[],"mappings":";;;;AAKO,MAAM,uBAAuB,MAAM;AAAC;AAEpC,MAAM,oBAAoB,eAAe;IAQ/C,OAAO,aAAa,QAAA,EAA+B,QAAA,EAAgC;QAClF,OAAQ,SAAS,IAAA,EAAM;YACtB,KAAK;gBACJ,OAAO,IAAI,YAAY,SAAS,IAAA,EAAM,UAA4B,OAAlB,SAAS,SAAS,EAAA,gBAAiB;YACpF,KAAK;gBACJ,OAAO,IAAI,YACV,SAAS,IAAA,EACT,sCAA+D,OAAzB,SAAS,gBAAgB;YAEjE,KAAK;gBACJ,OAAO,IAAI,YAAY,SAAS,IAAA,EAAM,UAA4B,OAAlB,SAAS,SAAS,EAAA,kBAAmB;YACtF,KAAK;gBACJ,OAAO,IAAI,YAAY,SAAS,IAAA,EAAM,kBAAgC,CAAE,MAAhB,SAAS,KAAK;YACvE,KAAK;YACL;gBACC,OAAO,IAAI,YACV,SAAS,IAAA,EACT,qCAAmE,OAA9B,WAAW,IAAY,OAAR,QAAQ,IAAK,EAAE;QAEtE;IACD;IAzBA,YAAY,IAAA,EAAc,OAAA,CAAiB;QAC1C,KAAA,CAAM,OAAO;QACb,IAAA,CAAK,IAAA,GAAO;IACb;AAuBD","debugId":null}},
    {"offset": {"line": 3832, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/experimental/transports/jsonRPC.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64 } from '@mysten/bcs';\n\nimport { bcs } from '../../bcs/index.js';\nimport type {\n\tObjectOwner,\n\tSuiClient,\n\tSuiObjectChange,\n\tSuiObjectData,\n\tSuiTransactionBlockResponse,\n\tTransactionEffects,\n} from '../../client/index.js';\nimport { batch } from '../../transactions/plugins/utils.js';\nimport { Transaction } from '../../transactions/Transaction.js';\nimport { normalizeStructTag } from '../../utils/sui-types.js';\nimport { Experimental_CoreClient } from '../core.js';\nimport { ObjectError } from '../errors.js';\nimport type { Experimental_SuiClientTypes } from '../types.js';\n\nexport class JSONRpcTransport extends Experimental_CoreClient {\n\t#jsonRpcClient: SuiClient;\n\n\tconstructor(jsonRpcClient: SuiClient) {\n\t\tsuper({ network: jsonRpcClient.network });\n\t\tthis.#jsonRpcClient = jsonRpcClient;\n\t}\n\n\tasync getObjects(options: Experimental_SuiClientTypes.GetObjectsOptions) {\n\t\tconst batches = batch(options.objectIds, 50);\n\t\tconst results: Experimental_SuiClientTypes.GetObjectsResponse['objects'] = [];\n\n\t\tfor (const batch of batches) {\n\t\t\tconst objects = await this.#jsonRpcClient.multiGetObjects({\n\t\t\t\tids: batch,\n\t\t\t\toptions: {\n\t\t\t\t\tshowOwner: true,\n\t\t\t\t\tshowType: true,\n\t\t\t\t\tshowBcs: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tfor (const [idx, object] of objects.entries()) {\n\t\t\t\tif (object.error) {\n\t\t\t\t\tresults.push(ObjectError.fromResponse(object.error, batch[idx]));\n\t\t\t\t} else {\n\t\t\t\t\tresults.push(parseObject(object.data!));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tobjects: results,\n\t\t};\n\t}\n\tasync getOwnedObjects(options: Experimental_SuiClientTypes.GetOwnedObjectsOptions) {\n\t\tconst objects = await this.#jsonRpcClient.getOwnedObjects({\n\t\t\towner: options.address,\n\t\t\tlimit: options.limit,\n\t\t\tcursor: options.cursor,\n\t\t\toptions: {\n\t\t\t\tshowOwner: true,\n\t\t\t\tshowType: true,\n\t\t\t\tshowBcs: true,\n\t\t\t},\n\t\t});\n\n\t\treturn {\n\t\t\tobjects: objects.data.map((result) => {\n\t\t\t\tif (result.error) {\n\t\t\t\t\tthrow ObjectError.fromResponse(result.error);\n\t\t\t\t}\n\n\t\t\t\treturn parseObject(result.data!);\n\t\t\t}),\n\t\t\thasNextPage: objects.hasNextPage,\n\t\t\tcursor: objects.nextCursor ?? null,\n\t\t};\n\t}\n\n\tasync getCoins(options: Experimental_SuiClientTypes.GetCoinsOptions) {\n\t\tconst coins = await this.#jsonRpcClient.getCoins({\n\t\t\towner: options.address,\n\t\t\tcoinType: options.coinType,\n\t\t});\n\n\t\treturn {\n\t\t\tobjects: coins.data.map((coin) => {\n\t\t\t\treturn {\n\t\t\t\t\tid: coin.coinObjectId,\n\t\t\t\t\tversion: coin.version,\n\t\t\t\t\tdigest: coin.digest,\n\t\t\t\t\tbalance: coin.balance,\n\t\t\t\t\ttype: `0x2::coin::Coin<${coin.coinType}>`,\n\t\t\t\t\tcontent: Coin.serialize({\n\t\t\t\t\t\tid: coin.coinObjectId,\n\t\t\t\t\t\tbalance: {\n\t\t\t\t\t\t\tvalue: coin.balance,\n\t\t\t\t\t\t},\n\t\t\t\t\t}).toBytes(),\n\t\t\t\t\towner: {\n\t\t\t\t\t\t$kind: 'ObjectOwner' as const,\n\t\t\t\t\t\tObjectOwner: options.address,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}),\n\t\t\thasNextPage: coins.hasNextPage,\n\t\t\tcursor: coins.nextCursor ?? null,\n\t\t};\n\t}\n\n\tasync getBalance(options: Experimental_SuiClientTypes.GetBalanceOptions) {\n\t\tconst balance = await this.#jsonRpcClient.getBalance({\n\t\t\towner: options.address,\n\t\t\tcoinType: options.coinType,\n\t\t});\n\n\t\treturn {\n\t\t\tbalance: {\n\t\t\t\tcoinType: balance.coinType,\n\t\t\t\tbalance: balance.totalBalance,\n\t\t\t},\n\t\t};\n\t}\n\tasync getAllBalances(options: Experimental_SuiClientTypes.GetAllBalancesOptions) {\n\t\tconst balances = await this.#jsonRpcClient.getAllBalances({\n\t\t\towner: options.address,\n\t\t});\n\n\t\treturn {\n\t\t\tbalances: balances.map((balance) => ({\n\t\t\t\tcoinType: balance.coinType,\n\t\t\t\tbalance: balance.totalBalance,\n\t\t\t})),\n\t\t\thasNextPage: false,\n\t\t\tcursor: null,\n\t\t};\n\t}\n\tasync getTransaction(options: Experimental_SuiClientTypes.GetTransactionOptions) {\n\t\tconst transaction = await this.#jsonRpcClient.getTransactionBlock({\n\t\t\tdigest: options.digest,\n\t\t\toptions: {\n\t\t\t\tshowRawInput: true,\n\t\t\t\tshowObjectChanges: true,\n\t\t\t\tshowRawEffects: true,\n\t\t\t\tshowEvents: true,\n\t\t\t},\n\t\t});\n\n\t\treturn {\n\t\t\ttransaction: parseTransaction(transaction),\n\t\t};\n\t}\n\tasync executeTransaction(options: Experimental_SuiClientTypes.ExecuteTransactionOptions) {\n\t\tconst transaction = await this.#jsonRpcClient.executeTransactionBlock({\n\t\t\ttransactionBlock: options.transaction,\n\t\t\tsignature: options.signatures,\n\t\t\toptions: {\n\t\t\t\tshowRawEffects: true,\n\t\t\t\tshowEvents: true,\n\t\t\t\tshowObjectChanges: true,\n\t\t\t\tshowRawInput: true,\n\t\t\t},\n\t\t});\n\n\t\treturn {\n\t\t\ttransaction: parseTransaction(transaction),\n\t\t};\n\t}\n\tasync dryRunTransaction(options: Experimental_SuiClientTypes.DryRunTransactionOptions) {\n\t\tconst tx = Transaction.from(options.transaction);\n\t\tconst result = await this.#jsonRpcClient.dryRunTransactionBlock({\n\t\t\ttransactionBlock: options.transaction,\n\t\t});\n\n\t\treturn {\n\t\t\ttransaction: {\n\t\t\t\tdigest: await tx.getDigest(),\n\t\t\t\teffects: parseTransactionEffectsJson({\n\t\t\t\t\teffects: result.effects,\n\t\t\t\t\tobjectChanges: result.objectChanges,\n\t\t\t\t}),\n\t\t\t\tsignatures: [],\n\t\t\t\tbcs: options.transaction,\n\t\t\t},\n\t\t};\n\t}\n\tasync getReferenceGasPrice() {\n\t\tconst referenceGasPrice = await this.#jsonRpcClient.getReferenceGasPrice();\n\t\treturn {\n\t\t\treferenceGasPrice: String(referenceGasPrice),\n\t\t};\n\t}\n\n\tasync getDynamicFields(options: Experimental_SuiClientTypes.GetDynamicFieldsOptions) {\n\t\tconst dynamicFields = await this.#jsonRpcClient.getDynamicFields({\n\t\t\tparentId: options.parentId,\n\t\t\tlimit: options.limit,\n\t\t\tcursor: options.cursor,\n\t\t});\n\n\t\treturn {\n\t\t\tdynamicFields: dynamicFields.data.map((dynamicField) => ({\n\t\t\t\tid: dynamicField.objectId,\n\t\t\t\tversion: dynamicField.version,\n\t\t\t\tdigest: dynamicField.digest,\n\t\t\t\ttype: dynamicField.objectType,\n\t\t\t\tname: {\n\t\t\t\t\ttype: dynamicField.name.type,\n\t\t\t\t\tbcs: fromBase64(dynamicField.bcsName),\n\t\t\t\t},\n\t\t\t})),\n\t\t\thasNextPage: dynamicFields.hasNextPage,\n\t\t\tcursor: dynamicFields.nextCursor,\n\t\t};\n\t}\n}\n\nfunction parseObject(object: SuiObjectData): Experimental_SuiClientTypes.ObjectResponse {\n\treturn {\n\t\tid: object.objectId,\n\t\tversion: object.version,\n\t\tdigest: object.digest,\n\t\ttype: object.type!,\n\t\tcontent:\n\t\t\tobject.bcs?.dataType === 'moveObject' ? fromBase64(object.bcs.bcsBytes) : new Uint8Array(),\n\t\towner: parseOwner(object.owner!),\n\t};\n}\n\nfunction parseOwner(owner: ObjectOwner): Experimental_SuiClientTypes.ObjectOwner {\n\tif (owner === 'Immutable') {\n\t\treturn {\n\t\t\t$kind: 'Immutable',\n\t\t\tImmutable: true,\n\t\t};\n\t}\n\n\tif ('ConsensusV2' in owner) {\n\t\treturn {\n\t\t\t$kind: 'ConsensusV2',\n\t\t\tConsensusV2: {\n\t\t\t\tauthenticator: {\n\t\t\t\t\t$kind: 'SingleOwner',\n\t\t\t\t\tSingleOwner: owner.ConsensusV2.authenticator.SingleOwner,\n\t\t\t\t},\n\t\t\t\tstartVersion: owner.ConsensusV2.start_version,\n\t\t\t},\n\t\t};\n\t}\n\n\tif ('AddressOwner' in owner) {\n\t\treturn {\n\t\t\t$kind: 'AddressOwner',\n\t\t\tAddressOwner: owner.AddressOwner,\n\t\t};\n\t}\n\n\tif ('ObjectOwner' in owner) {\n\t\treturn {\n\t\t\t$kind: 'ObjectOwner',\n\t\t\tObjectOwner: owner.ObjectOwner,\n\t\t};\n\t}\n\n\tif ('Shared' in owner) {\n\t\treturn {\n\t\t\t$kind: 'Shared',\n\t\t\tShared: {\n\t\t\t\tinitialSharedVersion: owner.Shared.initial_shared_version,\n\t\t\t},\n\t\t};\n\t}\n\n\tthrow new Error(`Unknown owner type: ${JSON.stringify(owner)}`);\n}\n\nfunction parseTransaction(\n\ttransaction: SuiTransactionBlockResponse,\n): Experimental_SuiClientTypes.TransactionResponse {\n\tconst parsedTx = bcs.SenderSignedData.parse(fromBase64(transaction.rawTransaction!))[0];\n\n\treturn {\n\t\tdigest: transaction.digest,\n\t\teffects: parseTransactionEffects({\n\t\t\teffects: new Uint8Array(transaction.rawEffects!),\n\t\t\tobjectChanges: transaction.objectChanges ?? null,\n\t\t}),\n\t\tbcs: bcs.TransactionData.serialize(parsedTx.intentMessage.value).toBytes(),\n\t\tsignatures: parsedTx.txSignatures,\n\t};\n}\n\nfunction parseTransactionEffects({\n\teffects,\n\tepoch,\n\tobjectChanges,\n}: {\n\teffects: Uint8Array;\n\tobjectChanges: SuiObjectChange[] | null;\n\tepoch?: string | null;\n}): Experimental_SuiClientTypes.TransactionEffects {\n\tconst parsed = bcs.TransactionEffects.parse(effects);\n\tconst objectTypes: Record<string, string> = {};\n\n\tobjectChanges?.forEach((change) => {\n\t\tif (change.type !== 'published') {\n\t\t\tobjectTypes[change.objectId] = change.objectType;\n\t\t}\n\t});\n\n\tswitch (parsed.$kind) {\n\t\tcase 'V1':\n\t\t\treturn parseTransactionEffectsV1({ bytes: effects, effects: parsed.V1, epoch, objectTypes });\n\t\tcase 'V2':\n\t\t\treturn parseTransactionEffectsV2({ bytes: effects, effects: parsed.V2, epoch, objectTypes });\n\t\tdefault:\n\t\t\tthrow new Error(\n\t\t\t\t`Unknown transaction effects version: ${(parsed as { $kind: string }).$kind}`,\n\t\t\t);\n\t}\n}\n\nfunction parseTransactionEffectsV1(_: {\n\tbytes: Uint8Array;\n\teffects: NonNullable<(typeof bcs.TransactionEffects.$inferType)['V1']>;\n\tepoch?: string | null;\n\tobjectTypes: Record<string, string>;\n}): Experimental_SuiClientTypes.TransactionEffects {\n\tthrow new Error('V1 effects are not supported yet');\n}\n\nfunction parseTransactionEffectsV2({\n\tbytes,\n\teffects,\n\tepoch,\n\tobjectTypes,\n}: {\n\tbytes: Uint8Array;\n\teffects: NonNullable<(typeof bcs.TransactionEffects.$inferType)['V2']>;\n\tepoch?: string | null;\n\tobjectTypes: Record<string, string>;\n}): Experimental_SuiClientTypes.TransactionEffects {\n\tconst changedObjects = effects.changedObjects.map(\n\t\t([id, change]): Experimental_SuiClientTypes.ChangedObject => {\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tinputState: change.inputState.$kind === 'Exist' ? 'Exists' : 'DoesNotExist',\n\t\t\t\tinputVersion: change.inputState.Exist?.[0][0] ?? null,\n\t\t\t\tinputDigest: change.inputState.Exist?.[0][1] ?? null,\n\t\t\t\tinputOwner: change.inputState.Exist?.[1] ?? null,\n\t\t\t\toutputState:\n\t\t\t\t\tchange.outputState.$kind === 'NotExist' ? 'DoesNotExist' : change.outputState.$kind,\n\t\t\t\toutputVersion:\n\t\t\t\t\tchange.outputState.$kind === 'PackageWrite'\n\t\t\t\t\t\t? change.outputState.PackageWrite?.[0]\n\t\t\t\t\t\t: change.outputState.ObjectWrite\n\t\t\t\t\t\t\t? effects.lamportVersion\n\t\t\t\t\t\t\t: null,\n\t\t\t\toutputDigest:\n\t\t\t\t\tchange.outputState.$kind === 'PackageWrite'\n\t\t\t\t\t\t? change.outputState.PackageWrite?.[1]\n\t\t\t\t\t\t: (change.outputState.ObjectWrite?.[0] ?? null),\n\t\t\t\toutputOwner: change.outputState.ObjectWrite ? change.outputState.ObjectWrite[1] : null,\n\t\t\t\tidOperation: change.idOperation.$kind,\n\t\t\t\tobjectType: objectTypes[id] ?? null,\n\t\t\t};\n\t\t},\n\t);\n\n\treturn {\n\t\tbcs: bytes,\n\t\tdigest: effects.transactionDigest,\n\t\tversion: 2,\n\t\tstatus:\n\t\t\teffects.status.$kind === 'Success'\n\t\t\t\t? {\n\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\terror: null,\n\t\t\t\t\t}\n\t\t\t\t: {\n\t\t\t\t\t\tsuccess: false,\n\t\t\t\t\t\t// TODO: add command\n\t\t\t\t\t\terror: effects.status.Failed.error.$kind,\n\t\t\t\t\t},\n\t\tepoch: epoch ?? null,\n\t\tgasUsed: effects.gasUsed,\n\t\ttransactionDigest: effects.transactionDigest,\n\t\tgasObject:\n\t\t\teffects.gasObjectIndex === null ? null : (changedObjects[effects.gasObjectIndex] ?? null),\n\t\teventsDigest: effects.eventsDigest,\n\t\tdependencies: effects.dependencies,\n\t\tlamportVersion: effects.lamportVersion,\n\t\tchangedObjects,\n\t\tunchangedSharedObjects: effects.unchangedSharedObjects.map(\n\t\t\t([objectId, object]): Experimental_SuiClientTypes.UnchangedSharedObject => {\n\t\t\t\treturn {\n\t\t\t\t\tkind: object.$kind,\n\t\t\t\t\tobjectId: objectId,\n\t\t\t\t\tversion:\n\t\t\t\t\t\tobject.$kind === 'ReadOnlyRoot'\n\t\t\t\t\t\t\t? object.ReadOnlyRoot[0]\n\t\t\t\t\t\t\t: (object[object.$kind] as string | null),\n\t\t\t\t\tdigest: object.$kind === 'ReadOnlyRoot' ? object.ReadOnlyRoot[1] : null,\n\t\t\t\t\tobjectType: objectTypes[objectId] ?? null,\n\t\t\t\t};\n\t\t\t},\n\t\t),\n\t\tauxiliaryDataDigest: effects.auxDataDigest,\n\t};\n}\n\nfunction parseTransactionEffectsJson({\n\tbytes,\n\teffects,\n\tepoch,\n\tobjectChanges,\n}: {\n\tbytes?: Uint8Array;\n\teffects: TransactionEffects;\n\tepoch?: string | null;\n\tobjectChanges: SuiObjectChange[] | null;\n}): Experimental_SuiClientTypes.TransactionEffects {\n\tconst changedObjects: Experimental_SuiClientTypes.ChangedObject[] = [];\n\tconst unchangedSharedObjects: Experimental_SuiClientTypes.UnchangedSharedObject[] = [];\n\n\tobjectChanges?.forEach((change) => {\n\t\tswitch (change.type) {\n\t\t\tcase 'published':\n\t\t\t\tchangedObjects.push({\n\t\t\t\t\tid: change.packageId,\n\t\t\t\t\tinputState: 'DoesNotExist',\n\t\t\t\t\tinputVersion: null,\n\t\t\t\t\tinputDigest: null,\n\t\t\t\t\tinputOwner: null,\n\t\t\t\t\toutputState: 'PackageWrite',\n\t\t\t\t\toutputVersion: change.version,\n\t\t\t\t\toutputDigest: change.digest,\n\t\t\t\t\toutputOwner: null,\n\t\t\t\t\tidOperation: 'Created',\n\t\t\t\t\tobjectType: null,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'transferred':\n\t\t\t\tchangedObjects.push({\n\t\t\t\t\tid: change.objectId,\n\t\t\t\t\tinputState: 'Exists',\n\t\t\t\t\tinputVersion: change.version,\n\t\t\t\t\tinputDigest: change.digest,\n\t\t\t\t\tinputOwner: {\n\t\t\t\t\t\t$kind: 'AddressOwner' as const,\n\t\t\t\t\t\tAddressOwner: change.sender,\n\t\t\t\t\t},\n\t\t\t\t\toutputState: 'ObjectWrite',\n\t\t\t\t\toutputVersion: change.version,\n\t\t\t\t\toutputDigest: change.digest,\n\t\t\t\t\toutputOwner: parseOwner(change.recipient),\n\t\t\t\t\tidOperation: 'None',\n\t\t\t\t\tobjectType: change.objectType,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'mutated':\n\t\t\t\tchangedObjects.push({\n\t\t\t\t\tid: change.objectId,\n\t\t\t\t\tinputState: 'Exists',\n\t\t\t\t\tinputVersion: change.previousVersion,\n\t\t\t\t\tinputDigest: null,\n\t\t\t\t\tinputOwner: parseOwner(change.owner),\n\t\t\t\t\toutputState: 'ObjectWrite',\n\t\t\t\t\toutputVersion: change.version,\n\t\t\t\t\toutputDigest: change.digest,\n\t\t\t\t\toutputOwner: parseOwner(change.owner),\n\t\t\t\t\tidOperation: 'None',\n\t\t\t\t\tobjectType: change.objectType,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'deleted':\n\t\t\t\tchangedObjects.push({\n\t\t\t\t\tid: change.objectId,\n\t\t\t\t\tinputState: 'Exists',\n\t\t\t\t\tinputVersion: change.version,\n\t\t\t\t\tinputDigest: effects.deleted?.find((d) => d.objectId === change.objectId)?.digest ?? null,\n\t\t\t\t\tinputOwner: null,\n\t\t\t\t\toutputState: 'DoesNotExist',\n\t\t\t\t\toutputVersion: null,\n\t\t\t\t\toutputDigest: null,\n\t\t\t\t\toutputOwner: null,\n\t\t\t\t\tidOperation: 'Deleted',\n\t\t\t\t\tobjectType: change.objectType,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'wrapped':\n\t\t\t\tchangedObjects.push({\n\t\t\t\t\tid: change.objectId,\n\t\t\t\t\tinputState: 'Exists',\n\t\t\t\t\tinputVersion: change.version,\n\t\t\t\t\tinputDigest: null,\n\t\t\t\t\tinputOwner: {\n\t\t\t\t\t\t$kind: 'AddressOwner' as const,\n\t\t\t\t\t\tAddressOwner: change.sender,\n\t\t\t\t\t},\n\t\t\t\t\toutputState: 'ObjectWrite',\n\t\t\t\t\toutputVersion: change.version,\n\t\t\t\t\toutputDigest:\n\t\t\t\t\t\teffects.wrapped?.find((w) => w.objectId === change.objectId)?.digest ?? null,\n\t\t\t\t\toutputOwner: {\n\t\t\t\t\t\t$kind: 'ObjectOwner' as const,\n\t\t\t\t\t\tObjectOwner: change.sender,\n\t\t\t\t\t},\n\t\t\t\t\tidOperation: 'None',\n\t\t\t\t\tobjectType: change.objectType,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'created':\n\t\t\t\tchangedObjects.push({\n\t\t\t\t\tid: change.objectId,\n\t\t\t\t\tinputState: 'DoesNotExist',\n\t\t\t\t\tinputVersion: null,\n\t\t\t\t\tinputDigest: null,\n\t\t\t\t\tinputOwner: null,\n\t\t\t\t\toutputState: 'ObjectWrite',\n\t\t\t\t\toutputVersion: change.version,\n\t\t\t\t\toutputDigest: change.digest,\n\t\t\t\t\toutputOwner: parseOwner(change.owner),\n\t\t\t\t\tidOperation: 'Created',\n\t\t\t\t\tobjectType: change.objectType,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\treturn {\n\t\tbcs: bytes ?? null,\n\t\tdigest: effects.transactionDigest,\n\t\tversion: 2,\n\t\tstatus:\n\t\t\teffects.status.status === 'success'\n\t\t\t\t? { success: true, error: null }\n\t\t\t\t: { success: false, error: effects.status.error! },\n\t\tepoch: epoch ?? null,\n\t\tgasUsed: effects.gasUsed,\n\t\ttransactionDigest: effects.transactionDigest,\n\t\tgasObject: {\n\t\t\tid: effects.gasObject?.reference.objectId,\n\t\t\tinputState: 'Exists',\n\t\t\tinputVersion: null,\n\t\t\tinputDigest: null,\n\t\t\tinputOwner: null,\n\t\t\toutputState: 'ObjectWrite',\n\t\t\toutputVersion: effects.gasObject.reference.version,\n\t\t\toutputDigest: effects.gasObject.reference.digest,\n\t\t\toutputOwner: parseOwner(effects.gasObject.owner),\n\t\t\tidOperation: 'None',\n\t\t\tobjectType: normalizeStructTag('0x2::coin::Coin<0x2::sui::SUI>'),\n\t\t},\n\t\teventsDigest: effects.eventsDigest ?? null,\n\t\tdependencies: effects.dependencies ?? [],\n\t\tlamportVersion: effects.gasObject.reference.version,\n\t\tchangedObjects,\n\t\tunchangedSharedObjects,\n\t\tauxiliaryDataDigest: null,\n\t};\n}\n\nconst Balance = bcs.struct('Balance', {\n\tvalue: bcs.u64(),\n});\n\nconst Coin = bcs.struct('Coin', {\n\tid: bcs.Address,\n\tbalance: Balance,\n});\n"],"names":["batch"],"mappings":"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","debugId":null}},
    {"offset": {"line": 4354, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/version.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// This file is generated by genversion.mjs. Do not edit it directly.\n\nexport const PACKAGE_VERSION = '1.28.2';\nexport const TARGETED_RPC_VERSION = '1.48.0';\n"],"names":[],"mappings":";;;;AAKO,MAAM,kBAAkB;AACxB,MAAM,uBAAuB","debugId":null}},
    {"offset": {"line": 4366, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/client/errors.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nconst CODE_TO_ERROR_TYPE: Record<number, string> = {\n\t'-32700': 'ParseError',\n\t'-32701': 'OversizedRequest',\n\t'-32702': 'OversizedResponse',\n\t'-32600': 'InvalidRequest',\n\t'-32601': 'MethodNotFound',\n\t'-32602': 'InvalidParams',\n\t'-32603': 'InternalError',\n\t'-32604': 'ServerBusy',\n\t'-32000': 'CallExecutionFailed',\n\t'-32001': 'UnknownError',\n\t'-32003': 'SubscriptionClosed',\n\t'-32004': 'SubscriptionClosedWithError',\n\t'-32005': 'BatchesNotSupported',\n\t'-32006': 'TooManySubscriptions',\n\t'-32050': 'TransientError',\n\t'-32002': 'TransactionExecutionClientError',\n};\n\nexport class SuiHTTPTransportError extends Error {}\n\nexport class JsonRpcError extends SuiHTTPTransportError {\n\tcode: number;\n\ttype: string;\n\n\tconstructor(message: string, code: number) {\n\t\tsuper(message);\n\t\tthis.code = code;\n\t\tthis.type = CODE_TO_ERROR_TYPE[code] ?? 'ServerError';\n\t}\n}\n\nexport class SuiHTTPStatusError extends SuiHTTPTransportError {\n\tstatus: number;\n\tstatusText: string;\n\n\tconstructor(message: string, status: number, statusText: string) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.statusText = statusText;\n\t}\n}\n"],"names":[],"mappings":";;;;;AAGA,MAAM,qBAA6C;IAClD,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;AACX;AAEO,MAAM,8BAA8B,MAAM;AAAC;AAE3C,MAAM,qBAAqB,sBAAsB;IAIvD,YAAY,OAAA,EAAiB,IAAA,CAAc;QAC1C,KAAA,CAAM,OAAO;QACb,IAAA,CAAK,IAAA,GAAO;;QACZ,IAAA,CAAK,IAAA,iDAAO,CAAmB,IAAI,CAAA,oDAAvB,2BAA4B;IACzC;AACD;AAEO,MAAM,2BAA2B,sBAAsB;IAI7D,YAAY,OAAA,EAAiB,MAAA,EAAgB,UAAA,CAAoB;QAChE,KAAA,CAAM,OAAO;QACb,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,UAAA,GAAa;IACnB;AACD","debugId":null}},
    {"offset": {"line": 4412, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/client/rpc-websocket-client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { JsonRpcError } from './errors.js';\n\nfunction getWebsocketUrl(httpUrl: string): string {\n\tconst url = new URL(httpUrl);\n\turl.protocol = url.protocol.replace('http', 'ws');\n\treturn url.toString();\n}\n\ntype JsonRpcMessage =\n\t| {\n\t\t\tid: number;\n\t\t\tresult: never;\n\t\t\terror: {\n\t\t\t\tcode: number;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t  }\n\t| {\n\t\t\tid: number;\n\t\t\tresult: unknown;\n\t\t\terror: never;\n\t  }\n\t| {\n\t\t\tmethod: string;\n\t\t\tparams: NotificationMessageParams;\n\t  };\n\ntype NotificationMessageParams = {\n\tsubscription?: number;\n\tresult: object;\n};\n\ntype SubscriptionRequest<T = any> = {\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: any[];\n\tonMessage: (event: T) => void;\n\tsignal?: AbortSignal;\n};\n\n/**\n * Configuration options for the websocket connection\n */\nexport type WebsocketClientOptions = {\n\t/**\n\t * Custom WebSocket class to use. Defaults to the global WebSocket class, if available.\n\t */\n\tWebSocketConstructor?: typeof WebSocket;\n\t/**\n\t * Milliseconds before timing out while calling an RPC method\n\t */\n\tcallTimeout?: number;\n\t/**\n\t * Milliseconds between attempts to connect\n\t */\n\treconnectTimeout?: number;\n\t/**\n\t * Maximum number of times to try connecting before giving up\n\t */\n\tmaxReconnects?: number;\n};\n\nexport const DEFAULT_CLIENT_OPTIONS = {\n\t// We fudge the typing because we also check for undefined in the constructor:\n\tWebSocketConstructor: (typeof WebSocket !== 'undefined'\n\t\t? WebSocket\n\t\t: undefined) as typeof WebSocket,\n\tcallTimeout: 30000,\n\treconnectTimeout: 3000,\n\tmaxReconnects: 5,\n} satisfies WebsocketClientOptions;\n\nexport class WebsocketClient {\n\tendpoint: string;\n\toptions: Required<WebsocketClientOptions>;\n\t#requestId = 0;\n\t#disconnects = 0;\n\t#webSocket: WebSocket | null = null;\n\t#connectionPromise: Promise<WebSocket> | null = null;\n\t#subscriptions = new Set<RpcSubscription>();\n\t#pendingRequests = new Map<\n\t\tnumber,\n\t\t{\n\t\t\tresolve: (result: Extract<JsonRpcMessage, { id: number }>) => void;\n\t\t\treject: (reason: unknown) => void;\n\t\t\ttimeout: ReturnType<typeof setTimeout>;\n\t\t}\n\t>();\n\n\tconstructor(endpoint: string, options: WebsocketClientOptions = {}) {\n\t\tthis.endpoint = endpoint;\n\t\tthis.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n\n\t\tif (!this.options.WebSocketConstructor) {\n\t\t\tthrow new Error('Missing WebSocket constructor');\n\t\t}\n\n\t\tif (this.endpoint.startsWith('http')) {\n\t\t\tthis.endpoint = getWebsocketUrl(this.endpoint);\n\t\t}\n\t}\n\n\tasync makeRequest<T>(method: string, params: any[], signal?: AbortSignal): Promise<T> {\n\t\tconst webSocket = await this.#setupWebSocket();\n\n\t\treturn new Promise<Extract<JsonRpcMessage, { id: number }>>((resolve, reject) => {\n\t\t\tthis.#requestId += 1;\n\t\t\tthis.#pendingRequests.set(this.#requestId, {\n\t\t\t\tresolve: resolve,\n\t\t\t\treject,\n\t\t\t\ttimeout: setTimeout(() => {\n\t\t\t\t\tthis.#pendingRequests.delete(this.#requestId);\n\t\t\t\t\treject(new Error(`Request timeout: ${method}`));\n\t\t\t\t}, this.options.callTimeout),\n\t\t\t});\n\n\t\t\tsignal?.addEventListener('abort', () => {\n\t\t\t\tthis.#pendingRequests.delete(this.#requestId);\n\t\t\t\treject(signal.reason);\n\t\t\t});\n\n\t\t\twebSocket.send(JSON.stringify({ jsonrpc: '2.0', id: this.#requestId, method, params }));\n\t\t}).then(({ error, result }) => {\n\t\t\tif (error) {\n\t\t\t\tthrow new JsonRpcError(error.message, error.code);\n\t\t\t}\n\n\t\t\treturn result as T;\n\t\t});\n\t}\n\n\t#setupWebSocket() {\n\t\tif (this.#connectionPromise) {\n\t\t\treturn this.#connectionPromise;\n\t\t}\n\n\t\tthis.#connectionPromise = new Promise<WebSocket>((resolve) => {\n\t\t\tthis.#webSocket?.close();\n\t\t\tthis.#webSocket = new this.options.WebSocketConstructor(this.endpoint);\n\n\t\t\tthis.#webSocket.addEventListener('open', () => {\n\t\t\t\tthis.#disconnects = 0;\n\t\t\t\tresolve(this.#webSocket!);\n\t\t\t});\n\n\t\t\tthis.#webSocket.addEventListener('close', () => {\n\t\t\t\tthis.#disconnects++;\n\t\t\t\tif (this.#disconnects <= this.options.maxReconnects) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.#reconnect();\n\t\t\t\t\t}, this.options.reconnectTimeout);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.#webSocket.addEventListener('message', ({ data }: { data: string }) => {\n\t\t\t\tlet json: JsonRpcMessage;\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(data) as JsonRpcMessage;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ('id' in json && json.id != null && this.#pendingRequests.has(json.id)) {\n\t\t\t\t\tconst { resolve, timeout } = this.#pendingRequests.get(json.id)!;\n\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tresolve(json);\n\t\t\t\t} else if ('params' in json) {\n\t\t\t\t\tconst { params } = json;\n\t\t\t\t\tthis.#subscriptions.forEach((subscription) => {\n\t\t\t\t\t\tif (subscription.subscriptionId === params.subscription)\n\t\t\t\t\t\t\tif (params.subscription === subscription.subscriptionId) {\n\t\t\t\t\t\t\t\tsubscription.onMessage(params.result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this.#connectionPromise;\n\t}\n\n\tasync #reconnect() {\n\t\tthis.#webSocket?.close();\n\t\tthis.#connectionPromise = null;\n\n\t\treturn Promise.allSettled(\n\t\t\t[...this.#subscriptions].map((subscription) => subscription.subscribe(this)),\n\t\t);\n\t}\n\n\tasync subscribe<T>(input: SubscriptionRequest<T>) {\n\t\tconst subscription = new RpcSubscription(input);\n\t\tthis.#subscriptions.add(subscription);\n\t\tawait subscription.subscribe(this);\n\t\treturn () => subscription.unsubscribe(this);\n\t}\n}\n\nclass RpcSubscription {\n\tsubscriptionId: number | null = null;\n\tinput: SubscriptionRequest<any>;\n\tsubscribed = false;\n\n\tconstructor(input: SubscriptionRequest) {\n\t\tthis.input = input;\n\t}\n\n\tonMessage(message: unknown) {\n\t\tif (this.subscribed) {\n\t\t\tthis.input.onMessage(message);\n\t\t}\n\t}\n\n\tasync unsubscribe(client: WebsocketClient) {\n\t\tconst { subscriptionId } = this;\n\t\tthis.subscribed = false;\n\t\tif (subscriptionId == null) return false;\n\t\tthis.subscriptionId = null;\n\n\t\treturn client.makeRequest(this.input.unsubscribe, [subscriptionId]);\n\t}\n\n\tasync subscribe(client: WebsocketClient) {\n\t\tthis.subscriptionId = null;\n\t\tthis.subscribed = true;\n\t\tconst newSubscriptionId = await client.makeRequest<number>(\n\t\t\tthis.input.method,\n\t\t\tthis.input.params,\n\t\t\tthis.input.signal,\n\t\t);\n\n\t\tif (this.subscribed) {\n\t\t\tthis.subscriptionId = newSubscriptionId;\n\t\t}\n\t}\n}\n"],"names":["resolve"],"mappings":"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","debugId":null}},
    {"offset": {"line": 4604, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/client/http-transport.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from '../version.js';\nimport { JsonRpcError, SuiHTTPStatusError } from './errors.js';\nimport type { WebsocketClientOptions } from './rpc-websocket-client.js';\nimport { WebsocketClient } from './rpc-websocket-client.js';\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = { [header: string]: string };\n\nexport interface SuiHTTPTransportOptions {\n\tfetch?: typeof fetch;\n\tWebSocketConstructor?: typeof WebSocket;\n\turl: string;\n\trpc?: {\n\t\theaders?: HttpHeaders;\n\t\turl?: string;\n\t};\n\twebsocket?: WebsocketClientOptions & {\n\t\turl?: string;\n\t};\n}\n\nexport interface SuiTransportRequestOptions {\n\tmethod: string;\n\tparams: unknown[];\n\tsignal?: AbortSignal;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport interface SuiTransportSubscribeOptions<T> {\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: unknown[];\n\tonMessage: (event: T) => void;\n\tsignal?: AbortSignal;\n}\n\nexport interface SuiTransport {\n\trequest<T = unknown>(input: SuiTransportRequestOptions): Promise<T>;\n\tsubscribe<T = unknown>(input: SuiTransportSubscribeOptions<T>): Promise<() => Promise<boolean>>;\n}\n\nexport class SuiHTTPTransport implements SuiTransport {\n\t#requestId = 0;\n\t#options: SuiHTTPTransportOptions;\n\t#websocketClient?: WebsocketClient;\n\n\tconstructor(options: SuiHTTPTransportOptions) {\n\t\tthis.#options = options;\n\t}\n\n\tfetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\n\t\tconst fetchFn = this.#options.fetch ?? fetch;\n\n\t\tif (!fetchFn) {\n\t\t\tthrow new Error(\n\t\t\t\t'The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport.',\n\t\t\t);\n\t\t}\n\n\t\treturn fetchFn(input, init);\n\t}\n\n\t#getWebsocketClient(): WebsocketClient {\n\t\tif (!this.#websocketClient) {\n\t\t\tconst WebSocketConstructor = this.#options.WebSocketConstructor ?? WebSocket;\n\t\t\tif (!WebSocketConstructor) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport.',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.#websocketClient = new WebsocketClient(\n\t\t\t\tthis.#options.websocket?.url ?? this.#options.url,\n\t\t\t\t{\n\t\t\t\t\tWebSocketConstructor,\n\t\t\t\t\t...this.#options.websocket,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn this.#websocketClient;\n\t}\n\n\tasync request<T>(input: SuiTransportRequestOptions): Promise<T> {\n\t\tthis.#requestId += 1;\n\n\t\tconst res = await this.fetch(this.#options.rpc?.url ?? this.#options.url, {\n\t\t\tmethod: 'POST',\n\t\t\tsignal: input.signal,\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Client-Sdk-Type': 'typescript',\n\t\t\t\t'Client-Sdk-Version': PACKAGE_VERSION,\n\t\t\t\t'Client-Target-Api-Version': TARGETED_RPC_VERSION,\n\t\t\t\t'Client-Request-Method': input.method,\n\t\t\t\t...this.#options.rpc?.headers,\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tid: this.#requestId,\n\t\t\t\tmethod: input.method,\n\t\t\t\tparams: input.params,\n\t\t\t}),\n\t\t});\n\n\t\tif (!res.ok) {\n\t\t\tthrow new SuiHTTPStatusError(\n\t\t\t\t`Unexpected status code: ${res.status}`,\n\t\t\t\tres.status,\n\t\t\t\tres.statusText,\n\t\t\t);\n\t\t}\n\n\t\tconst data = await res.json();\n\n\t\tif ('error' in data && data.error != null) {\n\t\t\tthrow new JsonRpcError(data.error.message, data.error.code);\n\t\t}\n\n\t\treturn data.result;\n\t}\n\n\tasync subscribe<T>(input: SuiTransportSubscribeOptions<T>): Promise<() => Promise<boolean>> {\n\t\tconst unsubscribe = await this.#getWebsocketClient().subscribe(input);\n\n\t\tif (input.signal) {\n\t\t\tinput.signal.throwIfAborted();\n\t\t\tinput.signal.addEventListener('abort', () => {\n\t\t\t\tunsubscribe();\n\t\t\t});\n\t\t}\n\n\t\treturn async () => !!(await unsubscribe());\n\t}\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,iBAAiB,4BAA4B;AACtD,SAAS,cAAc,0BAA0B;AAEjD,SAAS,uBAAuB;;;;;;;;;AANhC,IAAA,YAAA,UAAA,kBAAA,6BAAA;;;;AA+CO,MAAM,iBAAyC;IASrD,MAAM,KAAA,EAAoB,IAAA,EAAuC;;QAChE,MAAM,6CAAU,IAAA,EAAK,UAAS,KAAA,8CAAd,qBAAuB;QAEvC,IAAI,CAAC,SAAS;YACb,MAAM,IAAI,MACT;QAEF;QAEA,OAAO,QAAQ,OAAO,IAAI;IAC3B;IAuBA,MAAM,QAAW,KAAA,EAA+C;;QAC/D,aAAA,IAAA,EAAK,YAAL,aAAA,IAAA,EAAK,cAAc;YAEU;QAA7B,MAAM,MAAM,MAAM,IAAA,CAAK,KAAA,0DAAM,IAAA,EAAK,UAAS,GAAA,sEAAK,GAAA,uEAAO,aAAA,IAAA,EAAK,UAAS,GAAA,EAAK;YACzE,QAAQ;YACR,QAAQ,MAAM,MAAA;YACd,SAAS;gBACR,gBAAgB;gBAChB,mBAAmB;gBACnB,wNAAsB,kBAAA;gBACtB,+NAA6B,uBAAA;gBAC7B,yBAAyB,MAAM,MAAA;qDAC5B,IAAA,EAAK,UAAS,GAAA,sDAAd,kBAAmB,OAAA,AAAtB;YACD;YACA,MAAM,KAAK,SAAA,CAAU;gBACpB,SAAS;gBACT,IAAI,aAAA,IAAA,EAAK;gBACT,QAAQ,MAAM,MAAA;gBACd,QAAQ,MAAM,MAAA;YACf,CAAC;QACF,CAAC;QAED,IAAI,CAAC,IAAI,EAAA,EAAI;YACZ,MAAM,IAAI,gOAAA,CACT,2BAAqC,OAAV,IAAI,MAAM,GACrC,IAAI,MAAA,EACJ,IAAI,UAAA;QAEN;QAEA,MAAM,OAAO,MAAM,IAAI,IAAA,CAAK;QAE5B,IAAI,WAAW,QAAQ,KAAK,KAAA,IAAS,MAAM;YAC1C,MAAM,IAAI,0NAAA,CAAa,KAAK,KAAA,CAAM,OAAA,EAAS,KAAK,KAAA,CAAM,IAAI;QAC3D;QAEA,OAAO,KAAK,MAAA;IACb;IAEA,MAAM,UAAa,KAAA,EAAyE;QAC3F,MAAM,cAAc,MAAM,gBAAA,IAAA,EAAK,6BAAA,uBAAL,IAAA,CAAA,IAAA,EAA2B,SAAA,CAAU,KAAK;QAEpE,IAAI,MAAM,MAAA,EAAQ;YACjB,MAAM,MAAA,CAAO,cAAA,CAAe;YAC5B,MAAM,MAAA,CAAO,gBAAA,CAAiB,SAAS,MAAM;gBAC5C,YAAY;YACb,CAAC;QACF;QAEA,OAAO,UAAY,CAAC,CAAE,MAAM,YAAY;IACzC;IAvFA,YAAY,OAAA,CAAkC;QALxC,aAAA,IAAA,EAAA;QACN,aAAA,IAAA,EAAA,YAAa;QACb,aAAA,IAAA,EAAA;QACA,aAAA,IAAA,EAAA;QAGC,aAAA,IAAA,EAAK,UAAW;IACjB;AAsFD;AA5FC,aAAA,IAAA;AACA,WAAA,IAAA;AACA,mBAAA,IAAA;AAHM,8BAAA,IAAA;AAqBN,wBAAmB,WAAoB;IACtC,IAAI,CAAC,aAAA,IAAA,EAAK,mBAAkB;;;QAC3B,MAAM,yEAAuB,IAAA,EAAK,UAAS,oBAAA,6DAAd,oCAAsC;QACnE,IAAI,CAAC,sBAAsB;YAC1B,MAAM,IAAI,MACT;QAEF;YAGC;QADD,aAAA,IAAA,EAAK,kBAAmB,mOAAI,kBAAA,sEAC3B,IAAA,EAAK,UAAS,SAAA,kFAAW,GAAA,mFAAO,aAAA,IAAA,EAAK,UAAS,GAAA,EAC9C;YACC;YACA,GAAG,aAAA,IAAA,EAAK,UAAS,SAAA;QAClB;IAEF;IAEA,OAAO,aAAA,IAAA,EAAK;AACb","debugId":null}},
    {"offset": {"line": 4706, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/client/client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { fromBase58, toBase64, toHex } from '@mysten/bcs';\n\nimport type { Signer } from '../cryptography/index.js';\nimport { Experimental_BaseClient } from '../experimental/client.js';\nimport { JSONRpcTransport } from '../experimental/transports/jsonRPC.js';\nimport type {\n\tExperimental_SuiClientTypes,\n\tSelfRegisteringClientExtension,\n} from '../experimental/types.js';\nimport type { Transaction } from '../transactions/index.js';\nimport { isTransaction } from '../transactions/index.js';\nimport {\n\tisValidSuiAddress,\n\tisValidSuiObjectId,\n\tisValidTransactionDigest,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n} from '../utils/sui-types.js';\nimport { normalizeSuiNSName } from '../utils/suins.js';\nimport { SuiHTTPTransport } from './http-transport.js';\nimport type { SuiTransport } from './http-transport.js';\nimport type {\n\tAddressMetrics,\n\tAllEpochsAddressMetrics,\n\tCheckpoint,\n\tCheckpointPage,\n\tCoinBalance,\n\tCoinMetadata,\n\tCoinSupply,\n\tCommitteeInfo,\n\tDelegatedStake,\n\tDevInspectResults,\n\tDevInspectTransactionBlockParams,\n\tDryRunTransactionBlockParams,\n\tDryRunTransactionBlockResponse,\n\tDynamicFieldPage,\n\tEpochInfo,\n\tEpochMetricsPage,\n\tEpochPage,\n\tExecuteTransactionBlockParams,\n\tGetAllBalancesParams,\n\tGetAllCoinsParams,\n\tGetBalanceParams,\n\tGetCheckpointParams,\n\tGetCheckpointsParams,\n\tGetCoinMetadataParams,\n\tGetCoinsParams,\n\tGetCommitteeInfoParams,\n\tGetDynamicFieldObjectParams,\n\tGetDynamicFieldsParams,\n\tGetLatestCheckpointSequenceNumberParams,\n\tGetLatestSuiSystemStateParams,\n\tGetMoveFunctionArgTypesParams,\n\tGetNormalizedMoveFunctionParams,\n\tGetNormalizedMoveModuleParams,\n\tGetNormalizedMoveModulesByPackageParams,\n\tGetNormalizedMoveStructParams,\n\tGetObjectParams,\n\tGetOwnedObjectsParams,\n\tGetProtocolConfigParams,\n\tGetReferenceGasPriceParams,\n\tGetStakesByIdsParams,\n\tGetStakesParams,\n\tGetTotalSupplyParams,\n\tGetTransactionBlockParams,\n\tMoveCallMetrics,\n\tMultiGetObjectsParams,\n\tMultiGetTransactionBlocksParams,\n\tNetworkMetrics,\n\tObjectRead,\n\tOrder,\n\tPaginatedCoins,\n\tPaginatedEvents,\n\tPaginatedObjectsResponse,\n\tPaginatedTransactionResponse,\n\tProtocolConfig,\n\tQueryEventsParams,\n\tQueryTransactionBlocksParams,\n\tResolvedNameServiceNames,\n\tResolveNameServiceAddressParams,\n\tResolveNameServiceNamesParams,\n\tSubscribeEventParams,\n\tSubscribeTransactionParams,\n\tSuiEvent,\n\tSuiMoveFunctionArgType,\n\tSuiMoveNormalizedFunction,\n\tSuiMoveNormalizedModule,\n\tSuiMoveNormalizedModules,\n\tSuiMoveNormalizedStruct,\n\tSuiObjectResponse,\n\tSuiObjectResponseQuery,\n\tSuiSystemStateSummary,\n\tSuiTransactionBlockResponse,\n\tSuiTransactionBlockResponseQuery,\n\tTransactionEffects,\n\tTryGetPastObjectParams,\n\tUnsubscribe,\n\tValidatorsApy,\n} from './types/index.js';\n\nexport interface PaginationArguments<Cursor> {\n\t/** Optional paging cursor */\n\tcursor?: Cursor;\n\t/** Maximum item returned per page */\n\tlimit?: number | null;\n}\n\nexport interface OrderArguments {\n\torder?: Order | null;\n}\n\n/**\n * Configuration options for the SuiClient\n * You must provide either a `url` or a `transport`\n */\nexport type SuiClientOptions = NetworkOrTransport & {\n\tnetwork?: Experimental_SuiClientTypes.Network;\n};\n\ntype NetworkOrTransport =\n\t| {\n\t\t\turl: string;\n\t\t\ttransport?: never;\n\t  }\n\t| {\n\t\t\ttransport: SuiTransport;\n\t\t\turl?: never;\n\t  };\n\nconst SUI_CLIENT_BRAND = Symbol.for('@mysten/SuiClient') as never;\n\nexport function isSuiClient(client: unknown): client is SuiClient {\n\treturn (\n\t\ttypeof client === 'object' && client !== null && (client as any)[SUI_CLIENT_BRAND] === true\n\t);\n}\n\nexport class SuiClient extends Experimental_BaseClient implements SelfRegisteringClientExtension {\n\tcore: JSONRpcTransport = new JSONRpcTransport(this);\n\tjsonRpc = this;\n\tprotected transport: SuiTransport;\n\n\tget [SUI_CLIENT_BRAND]() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Establish a connection to a Sui RPC endpoint\n\t *\n\t * @param options configuration options for the API Client\n\t */\n\tconstructor(options: SuiClientOptions) {\n\t\tsuper({ network: options.network ?? 'unknown' });\n\t\tthis.transport = options.transport ?? new SuiHTTPTransport({ url: options.url });\n\t}\n\n\tasync getRpcApiVersion({ signal }: { signal?: AbortSignal } = {}): Promise<string | undefined> {\n\t\tconst resp = await this.transport.request<{ info: { version: string } }>({\n\t\t\tmethod: 'rpc.discover',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\n\t\treturn resp.info.version;\n\t}\n\n\t/**\n\t * Get all Coin<`coin_type`> objects owned by an address.\n\t */\n\tasync getCoins(input: GetCoinsParams): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCoins',\n\t\t\tparams: [input.owner, input.coinType, input.cursor, input.limit],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get all Coin objects owned by an address.\n\t */\n\tasync getAllCoins(input: GetAllCoinsParams): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getAllCoins',\n\t\t\tparams: [input.owner, input.cursor, input.limit],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get the total coin balance for one coin type, owned by the address owner.\n\t */\n\tasync getBalance(input: GetBalanceParams): Promise<CoinBalance> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getBalance',\n\t\t\tparams: [input.owner, input.coinType],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get the total coin balance for all coin types, owned by the address owner.\n\t */\n\tasync getAllBalances(input: GetAllBalancesParams): Promise<CoinBalance[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getAllBalances',\n\t\t\tparams: [input.owner],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Fetch CoinMetadata for a given coin type\n\t */\n\tasync getCoinMetadata(input: GetCoinMetadataParams): Promise<CoinMetadata | null> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCoinMetadata',\n\t\t\tparams: [input.coinType],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t *  Fetch total supply for a coin\n\t */\n\tasync getTotalSupply(input: GetTotalSupplyParams): Promise<CoinSupply> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getTotalSupply',\n\t\t\tparams: [input.coinType],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Invoke any RPC method\n\t * @param method the method to be invoked\n\t * @param args the arguments to be passed to the RPC request\n\t */\n\tasync call<T = unknown>(\n\t\tmethod: string,\n\t\tparams: unknown[],\n\t\t{ signal }: { signal?: AbortSignal } = {},\n\t): Promise<T> {\n\t\treturn await this.transport.request({ method, params, signal });\n\t}\n\n\t/**\n\t * Get Move function argument types like read, write and full access\n\t */\n\tasync getMoveFunctionArgTypes(\n\t\tinput: GetMoveFunctionArgTypesParams,\n\t): Promise<SuiMoveFunctionArgType[]> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getMoveFunctionArgTypes',\n\t\t\tparams: [input.package, input.module, input.function],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get a map from module name to\n\t * structured representations of Move modules\n\t */\n\tasync getNormalizedMoveModulesByPackage(\n\t\tinput: GetNormalizedMoveModulesByPackageParams,\n\t): Promise<SuiMoveNormalizedModules> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveModulesByPackage',\n\t\t\tparams: [input.package],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move module\n\t */\n\tasync getNormalizedMoveModule(\n\t\tinput: GetNormalizedMoveModuleParams,\n\t): Promise<SuiMoveNormalizedModule> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveModule',\n\t\t\tparams: [input.package, input.module],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move function\n\t */\n\tasync getNormalizedMoveFunction(\n\t\tinput: GetNormalizedMoveFunctionParams,\n\t): Promise<SuiMoveNormalizedFunction> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveFunction',\n\t\t\tparams: [input.package, input.module, input.function],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move struct\n\t */\n\tasync getNormalizedMoveStruct(\n\t\tinput: GetNormalizedMoveStructParams,\n\t): Promise<SuiMoveNormalizedStruct> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveStruct',\n\t\t\tparams: [input.package, input.module, input.struct],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get all objects owned by an address\n\t */\n\tasync getOwnedObjects(input: GetOwnedObjectsParams): Promise<PaginatedObjectsResponse> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getOwnedObjects',\n\t\t\tparams: [\n\t\t\t\tinput.owner,\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiObjectResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get details about an object\n\t */\n\tasync getObject(input: GetObjectParams): Promise<SuiObjectResponse> {\n\t\tif (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getObject',\n\t\t\tparams: [input.id, input.options],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\tasync tryGetPastObject(input: TryGetPastObjectParams): Promise<ObjectRead> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_tryGetPastObject',\n\t\t\tparams: [input.id, input.version, input.options],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n\t */\n\tasync multiGetObjects(input: MultiGetObjectsParams): Promise<SuiObjectResponse[]> {\n\t\tinput.ids.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Object id ${id}`);\n\t\t\t}\n\t\t});\n\t\tconst hasDuplicates = input.ids.length !== new Set(input.ids).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate object ids in batch call ${input.ids}`);\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_multiGetObjects',\n\t\t\tparams: [input.ids, input.options],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get transaction blocks for a given query criteria\n\t */\n\tasync queryTransactionBlocks(\n\t\tinput: QueryTransactionBlocksParams,\n\t): Promise<PaginatedTransactionResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_queryTransactionBlocks',\n\t\t\tparams: [\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiTransactionBlockResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\tasync getTransactionBlock(\n\t\tinput: GetTransactionBlockParams,\n\t): Promise<SuiTransactionBlockResponse> {\n\t\tif (!isValidTransactionDigest(input.digest)) {\n\t\t\tthrow new Error('Invalid Transaction digest');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getTransactionBlock',\n\t\t\tparams: [input.digest, input.options],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\tasync multiGetTransactionBlocks(\n\t\tinput: MultiGetTransactionBlocksParams,\n\t): Promise<SuiTransactionBlockResponse[]> {\n\t\tinput.digests.forEach((d) => {\n\t\t\tif (!isValidTransactionDigest(d)) {\n\t\t\t\tthrow new Error(`Invalid Transaction digest ${d}`);\n\t\t\t}\n\t\t});\n\n\t\tconst hasDuplicates = input.digests.length !== new Set(input.digests).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate digests in batch call ${input.digests}`);\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_multiGetTransactionBlocks',\n\t\t\tparams: [input.digests, input.options],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\tasync executeTransactionBlock({\n\t\ttransactionBlock,\n\t\tsignature,\n\t\toptions,\n\t\trequestType,\n\t\tsignal,\n\t}: ExecuteTransactionBlockParams): Promise<SuiTransactionBlockResponse> {\n\t\tconst result: SuiTransactionBlockResponse = await this.transport.request({\n\t\t\tmethod: 'sui_executeTransactionBlock',\n\t\t\tparams: [\n\t\t\t\ttypeof transactionBlock === 'string' ? transactionBlock : toBase64(transactionBlock),\n\t\t\t\tArray.isArray(signature) ? signature : [signature],\n\t\t\t\toptions,\n\t\t\t],\n\t\t\tsignal,\n\t\t});\n\n\t\tif (requestType === 'WaitForLocalExecution') {\n\t\t\ttry {\n\t\t\t\tawait this.waitForTransaction({\n\t\t\t\t\tdigest: result.digest,\n\t\t\t\t});\n\t\t\t} catch (_) {\n\t\t\t\t// Ignore error while waiting for transaction\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync signAndExecuteTransaction({\n\t\ttransaction,\n\t\tsigner,\n\t\t...input\n\t}: {\n\t\ttransaction: Uint8Array | Transaction;\n\t\tsigner: Signer;\n\t} & Omit<\n\t\tExecuteTransactionBlockParams,\n\t\t'transactionBlock' | 'signature'\n\t>): Promise<SuiTransactionBlockResponse> {\n\t\tlet transactionBytes;\n\n\t\tif (transaction instanceof Uint8Array) {\n\t\t\ttransactionBytes = transaction;\n\t\t} else {\n\t\t\ttransaction.setSenderIfNotSet(signer.toSuiAddress());\n\t\t\ttransactionBytes = await transaction.build({ client: this });\n\t\t}\n\n\t\tconst { signature, bytes } = await signer.signTransaction(transactionBytes);\n\n\t\treturn this.executeTransactionBlock({\n\t\t\ttransactionBlock: bytes,\n\t\t\tsignature,\n\t\t\t...input,\n\t\t});\n\t}\n\n\t/**\n\t * Get total number of transactions\n\t */\n\n\tasync getTotalTransactionBlocks({ signal }: { signal?: AbortSignal } = {}): Promise<bigint> {\n\t\tconst resp = await this.transport.request<string>({\n\t\t\tmethod: 'sui_getTotalTransactionBlocks',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Getting the reference gas price for the network\n\t */\n\tasync getReferenceGasPrice({ signal }: GetReferenceGasPriceParams = {}): Promise<bigint> {\n\t\tconst resp = await this.transport.request<string>({\n\t\t\tmethod: 'suix_getReferenceGasPrice',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Return the delegated stakes for an address\n\t */\n\tasync getStakes(input: GetStakesParams): Promise<DelegatedStake[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getStakes',\n\t\t\tparams: [input.owner],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Return the delegated stakes queried by id.\n\t */\n\tasync getStakesByIds(input: GetStakesByIdsParams): Promise<DelegatedStake[]> {\n\t\tinput.stakedSuiIds.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Stake id ${id}`);\n\t\t\t}\n\t\t});\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getStakesByIds',\n\t\t\tparams: [input.stakedSuiIds],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Return the latest system state content.\n\t */\n\tasync getLatestSuiSystemState({\n\t\tsignal,\n\t}: GetLatestSuiSystemStateParams = {}): Promise<SuiSystemStateSummary> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getLatestSuiSystemState',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Get events for a given query criteria\n\t */\n\tasync queryEvents(input: QueryEventsParams): Promise<PaginatedEvents> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_queryEvents',\n\t\t\tparams: [\n\t\t\t\tinput.query,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Subscribe to get notifications whenever an event matching the filter occurs\n\t *\n\t * @deprecated\n\t */\n\tasync subscribeEvent(\n\t\tinput: SubscribeEventParams & {\n\t\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\t\tonMessage: (event: SuiEvent) => void;\n\t\t},\n\t): Promise<Unsubscribe> {\n\t\treturn this.transport.subscribe({\n\t\t\tmethod: 'suix_subscribeEvent',\n\t\t\tunsubscribe: 'suix_unsubscribeEvent',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tasync subscribeTransaction(\n\t\tinput: SubscribeTransactionParams & {\n\t\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\t\tonMessage: (event: TransactionEffects) => void;\n\t\t},\n\t): Promise<Unsubscribe> {\n\t\treturn this.transport.subscribe({\n\t\t\tmethod: 'suix_subscribeTransaction',\n\t\t\tunsubscribe: 'suix_unsubscribeTransaction',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n\t * transaction (or Move call) with any arguments. Detailed results are\n\t * provided, including both the transaction effects and any return values.\n\t */\n\tasync devInspectTransactionBlock(\n\t\tinput: DevInspectTransactionBlockParams,\n\t): Promise<DevInspectResults> {\n\t\tlet devInspectTxBytes;\n\t\tif (isTransaction(input.transactionBlock)) {\n\t\t\tinput.transactionBlock.setSenderIfNotSet(input.sender);\n\t\t\tdevInspectTxBytes = toBase64(\n\t\t\t\tawait input.transactionBlock.build({\n\t\t\t\t\tclient: this,\n\t\t\t\t\tonlyTransactionKind: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else if (typeof input.transactionBlock === 'string') {\n\t\t\tdevInspectTxBytes = input.transactionBlock;\n\t\t} else if (input.transactionBlock instanceof Uint8Array) {\n\t\t\tdevInspectTxBytes = toBase64(input.transactionBlock);\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction block format.');\n\t\t}\n\n\t\tinput.signal?.throwIfAborted();\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_devInspectTransactionBlock',\n\t\t\tparams: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Dry run a transaction block and return the result.\n\t */\n\tasync dryRunTransactionBlock(\n\t\tinput: DryRunTransactionBlockParams,\n\t): Promise<DryRunTransactionBlockResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_dryRunTransactionBlock',\n\t\t\tparams: [\n\t\t\t\ttypeof input.transactionBlock === 'string'\n\t\t\t\t\t? input.transactionBlock\n\t\t\t\t\t: toBase64(input.transactionBlock),\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Return the list of dynamic field objects owned by an object\n\t */\n\tasync getDynamicFields(input: GetDynamicFieldsParams): Promise<DynamicFieldPage> {\n\t\tif (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getDynamicFields',\n\t\t\tparams: [input.parentId, input.cursor, input.limit],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Return the dynamic field object information for a specified object\n\t */\n\tasync getDynamicFieldObject(input: GetDynamicFieldObjectParams): Promise<SuiObjectResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getDynamicFieldObject',\n\t\t\tparams: [input.parentId, input.name],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Get the sequence number of the latest checkpoint that has been executed\n\t */\n\tasync getLatestCheckpointSequenceNumber({\n\t\tsignal,\n\t}: GetLatestCheckpointSequenceNumberParams = {}): Promise<string> {\n\t\tconst resp = await this.transport.request({\n\t\t\tmethod: 'sui_getLatestCheckpointSequenceNumber',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\t\treturn String(resp);\n\t}\n\n\t/**\n\t * Returns information about a given checkpoint\n\t */\n\tasync getCheckpoint(input: GetCheckpointParams): Promise<Checkpoint> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getCheckpoint',\n\t\t\tparams: [input.id],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Returns historical checkpoints paginated\n\t */\n\tasync getCheckpoints(\n\t\tinput: PaginationArguments<CheckpointPage['nextCursor']> & GetCheckpointsParams,\n\t): Promise<CheckpointPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getCheckpoints',\n\t\t\tparams: [input.cursor, input?.limit, input.descendingOrder],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCommitteeInfo(input?: GetCommitteeInfoParams): Promise<CommitteeInfo> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCommitteeInfo',\n\t\t\tparams: [input?.epoch],\n\t\t\tsignal: input?.signal,\n\t\t});\n\t}\n\n\tasync getNetworkMetrics({ signal }: { signal?: AbortSignal } = {}): Promise<NetworkMetrics> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getNetworkMetrics',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\t}\n\n\tasync getAddressMetrics({ signal }: { signal?: AbortSignal } = {}): Promise<AddressMetrics> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getLatestAddressMetrics',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\t}\n\n\tasync getEpochMetrics(\n\t\tinput?: {\n\t\t\tdescendingOrder?: boolean;\n\t\t\tsignal?: AbortSignal;\n\t\t} & PaginationArguments<EpochMetricsPage['nextCursor']>,\n\t): Promise<EpochMetricsPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getEpochMetrics',\n\t\t\tparams: [input?.cursor, input?.limit, input?.descendingOrder],\n\t\t\tsignal: input?.signal,\n\t\t});\n\t}\n\n\tasync getAllEpochAddressMetrics(input?: {\n\t\tdescendingOrder?: boolean;\n\t\tsignal?: AbortSignal;\n\t}): Promise<AllEpochsAddressMetrics> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getAllEpochAddressMetrics',\n\t\t\tparams: [input?.descendingOrder],\n\t\t\tsignal: input?.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getEpochs(\n\t\tinput?: {\n\t\t\tdescendingOrder?: boolean;\n\t\t\tsignal?: AbortSignal;\n\t\t} & PaginationArguments<EpochPage['nextCursor']>,\n\t): Promise<EpochPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getEpochs',\n\t\t\tparams: [input?.cursor, input?.limit, input?.descendingOrder],\n\t\t\tsignal: input?.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Returns list of top move calls by usage\n\t */\n\tasync getMoveCallMetrics({ signal }: { signal?: AbortSignal } = {}): Promise<MoveCallMetrics> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getMoveCallMetrics',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCurrentEpoch({ signal }: { signal?: AbortSignal } = {}): Promise<EpochInfo> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCurrentEpoch',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t/**\n\t * Return the Validators APYs\n\t */\n\tasync getValidatorsApy({ signal }: { signal?: AbortSignal } = {}): Promise<ValidatorsApy> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getValidatorsApy',\n\t\t\tparams: [],\n\t\t\tsignal,\n\t\t});\n\t}\n\n\t// TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n\tasync getChainIdentifier({ signal }: { signal?: AbortSignal } = {}): Promise<string> {\n\t\tconst checkpoint = await this.getCheckpoint({ id: '0', signal });\n\t\tconst bytes = fromBase58(checkpoint.digest);\n\t\treturn toHex(bytes.slice(0, 4));\n\t}\n\n\tasync resolveNameServiceAddress(input: ResolveNameServiceAddressParams): Promise<string | null> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_resolveNameServiceAddress',\n\t\t\tparams: [input.name],\n\t\t\tsignal: input.signal,\n\t\t});\n\t}\n\n\tasync resolveNameServiceNames({\n\t\tformat = 'dot',\n\t\t...input\n\t}: ResolveNameServiceNamesParams & {\n\t\tformat?: 'at' | 'dot';\n\t}): Promise<ResolvedNameServiceNames> {\n\t\tconst { nextCursor, hasNextPage, data }: ResolvedNameServiceNames =\n\t\t\tawait this.transport.request({\n\t\t\t\tmethod: 'suix_resolveNameServiceNames',\n\t\t\t\tparams: [input.address, input.cursor, input.limit],\n\t\t\t\tsignal: input.signal,\n\t\t\t});\n\n\t\treturn {\n\t\t\thasNextPage,\n\t\t\tnextCursor,\n\t\t\tdata: data.map((name) => normalizeSuiNSName(name, format)),\n\t\t};\n\t}\n\n\tasync getProtocolConfig(input?: GetProtocolConfigParams): Promise<ProtocolConfig> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getProtocolConfig',\n\t\t\tparams: [input?.version],\n\t\t\tsignal: input?.signal,\n\t\t});\n\t}\n\n\t/**\n\t * Wait for a transaction block result to be available over the API.\n\t * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n\t * be available via the API.\n\t * This currently polls the `getTransactionBlock` API to check for the transaction.\n\t */\n\tasync waitForTransaction({\n\t\tsignal,\n\t\ttimeout = 60 * 1000,\n\t\tpollInterval = 2 * 1000,\n\t\t...input\n\t}: {\n\t\t/** An optional abort signal that can be used to cancel */\n\t\tsignal?: AbortSignal;\n\t\t/** The amount of time to wait for a transaction block. Defaults to one minute. */\n\t\ttimeout?: number;\n\t\t/** The amount of time to wait between checks for the transaction block. Defaults to 2 seconds. */\n\t\tpollInterval?: number;\n\t} & Parameters<SuiClient['getTransactionBlock']>[0]): Promise<SuiTransactionBlockResponse> {\n\t\tconst timeoutSignal = AbortSignal.timeout(timeout);\n\t\tconst timeoutPromise = new Promise((_, reject) => {\n\t\t\ttimeoutSignal.addEventListener('abort', () => reject(timeoutSignal.reason));\n\t\t});\n\n\t\ttimeoutPromise.catch(() => {\n\t\t\t// Swallow unhandled rejections that might be thrown after early return\n\t\t});\n\n\t\twhile (!timeoutSignal.aborted) {\n\t\t\tsignal?.throwIfAborted();\n\t\t\ttry {\n\t\t\t\treturn await this.getTransactionBlock(input);\n\t\t\t} catch (e) {\n\t\t\t\t// Wait for either the next poll interval, or the timeout.\n\t\t\t\tawait Promise.race([\n\t\t\t\t\tnew Promise((resolve) => setTimeout(resolve, pollInterval)),\n\t\t\t\t\ttimeoutPromise,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\ttimeoutSignal.throwIfAborted();\n\n\t\t// This should never happen, because the above case should always throw, but just adding it in the event that something goes horribly wrong.\n\t\tthrow new Error('Unexpected error while waiting for transaction block.');\n\t}\n\n\texperimental_asClientExtension(this: SuiClient) {\n\t\treturn {\n\t\t\tname: 'jsonRPC',\n\t\t\tregister: () => {\n\t\t\t\treturn this;\n\t\t\t},\n\t\t} as const;\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5459, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/cryptography/intent.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '../bcs/index.js';\n\nexport type IntentScope = Exclude<keyof typeof bcs.IntentScope.$inferType, '$kind'>;\n/**\n * Inserts a domain separator for a message that is being signed\n */\nexport function messageWithIntent(scope: IntentScope, message: Uint8Array) {\n\treturn bcs\n\t\t.IntentMessage(bcs.fixedArray(message.length, bcs.u8()))\n\t\t.serialize({\n\t\t\tintent: {\n\t\t\t\tscope: { [scope as 'PersonalMessage']: true },\n\t\t\t\tversion: { V0: true },\n\t\t\t\tappId: { Sui: true },\n\t\t\t},\n\t\t\tvalue: message,\n\t\t})\n\t\t.toBytes();\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,WAAW;;AAMb,SAAS,kBAAkB,KAAA,EAAoB,OAAA,EAAqB;IAC1E,8NAAO,MAAA,CACL,aAAA,wNAAc,MAAA,CAAI,UAAA,CAAW,QAAQ,MAAA,yNAAQ,MAAA,CAAI,EAAA,CAAG,CAAC,CAAC,EACtD,SAAA,CAAU;QACV,QAAQ;YACP,OAAO;gBAAE,CAAC,KAA0B,CAAA,EAAG;YAAK;YAC5C,SAAS;gBAAE,IAAI;YAAK;YACpB,OAAO;gBAAE,KAAK;YAAK;QACpB;QACA,OAAO;IACR,CAAC,EACA,OAAA,CAAQ;AACX","debugId":null}},
    {"offset": {"line": 5486, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/cryptography/signature-scheme.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport const SIGNATURE_SCHEME_TO_FLAG = {\n\tED25519: 0x00,\n\tSecp256k1: 0x01,\n\tSecp256r1: 0x02,\n\tMultiSig: 0x03,\n\tZkLogin: 0x05,\n\tPasskey: 0x06,\n} as const;\n\nexport const SIGNATURE_SCHEME_TO_SIZE = {\n\tED25519: 32,\n\tSecp256k1: 33,\n\tSecp256r1: 33,\n};\n\nexport const SIGNATURE_FLAG_TO_SCHEME = {\n\t0x00: 'ED25519',\n\t0x01: 'Secp256k1',\n\t0x02: 'Secp256r1',\n\t0x03: 'MultiSig',\n\t0x05: 'ZkLogin',\n\t0x06: 'Passkey',\n} as const;\n\nexport type SignatureScheme =\n\t| 'ED25519'\n\t| 'Secp256k1'\n\t| 'Secp256r1'\n\t| 'MultiSig'\n\t| 'ZkLogin'\n\t| 'Passkey';\n\nexport type SignatureFlag = keyof typeof SIGNATURE_FLAG_TO_SCHEME;\n"],"names":[],"mappings":";;;;;AAGO,MAAM,2BAA2B;IACvC,SAAS;IACT,WAAW;IACX,WAAW;IACX,UAAU;IACV,SAAS;IACT,SAAS;AACV;AAEO,MAAM,2BAA2B;IACvC,SAAS;IACT,WAAW;IACX,WAAW;AACZ;AAEO,MAAM,2BAA2B;IACvC,GAAM;IACN,GAAM;IACN,GAAM;IACN,GAAM;IACN,GAAM;IACN,GAAM;AACP","debugId":null}},
    {"offset": {"line": 5518, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/cryptography/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64 } from '@mysten/bcs';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nimport { bcs } from '../bcs/index.js';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../utils/sui-types.js';\nimport type { IntentScope } from './intent.js';\nimport { messageWithIntent } from './intent.js';\nimport { SIGNATURE_FLAG_TO_SCHEME, SIGNATURE_SCHEME_TO_SIZE } from './signature-scheme.js';\n\n/**\n * Value to be converted into public key.\n */\nexport type PublicKeyInitData = string | Uint8Array | Iterable<number>;\n\nexport function bytesEqual(a: Uint8Array, b: Uint8Array) {\n\tif (a === b) return true;\n\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * A public key\n */\nexport abstract class PublicKey {\n\t/**\n\t * Checks if two public keys are equal\n\t */\n\tequals(publicKey: PublicKey) {\n\t\treturn bytesEqual(this.toRawBytes(), publicKey.toRawBytes());\n\t}\n\n\t/**\n\t * Return the base-64 representation of the public key\n\t */\n\ttoBase64() {\n\t\treturn toBase64(this.toRawBytes());\n\t}\n\n\ttoString(): never {\n\t\tthrow new Error(\n\t\t\t'`toString` is not implemented on public keys. Use `toBase64()` or `toRawBytes()` instead.',\n\t\t);\n\t}\n\n\t/**\n\t * Return the Sui representation of the public key encoded in\n\t * base-64. A Sui public key is formed by the concatenation\n\t * of the scheme flag with the raw bytes of the public key\n\t */\n\ttoSuiPublicKey(): string {\n\t\tconst bytes = this.toSuiBytes();\n\t\treturn toBase64(bytes);\n\t}\n\n\tverifyWithIntent(\n\t\tbytes: Uint8Array,\n\t\tsignature: Uint8Array | string,\n\t\tintent: IntentScope,\n\t): Promise<boolean> {\n\t\tconst intentMessage = messageWithIntent(intent, bytes);\n\t\tconst digest = blake2b(intentMessage, { dkLen: 32 });\n\n\t\treturn this.verify(digest, signature);\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided PersonalMessage\n\t */\n\tverifyPersonalMessage(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\treturn this.verifyWithIntent(\n\t\t\tbcs.vector(bcs.u8()).serialize(message).toBytes(),\n\t\t\tsignature,\n\t\t\t'PersonalMessage',\n\t\t);\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided Transaction\n\t */\n\tverifyTransaction(transaction: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\treturn this.verifyWithIntent(transaction, signature, 'TransactionData');\n\t}\n\n\t/**\n\t * Verifies that the public key is associated with the provided address\n\t */\n\tverifyAddress(address: string): boolean {\n\t\treturn this.toSuiAddress() === address;\n\t}\n\n\t/**\n\t * Returns the bytes representation of the public key\n\t * prefixed with the signature scheme flag\n\t */\n\ttoSuiBytes(): Uint8Array {\n\t\tconst rawBytes = this.toRawBytes();\n\t\tconst suiBytes = new Uint8Array(rawBytes.length + 1);\n\t\tsuiBytes.set([this.flag()]);\n\t\tsuiBytes.set(rawBytes, 1);\n\n\t\treturn suiBytes;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\ttoSuiAddress(): string {\n\t\t// Each hex char represents half a byte, hence hex address doubles the length\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(this.toSuiBytes(), { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the byte array representation of the public key\n\t */\n\tabstract toRawBytes(): Uint8Array;\n\n\t/**\n\t * Return signature scheme flag of the public key\n\t */\n\tabstract flag(): number;\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tabstract verify(data: Uint8Array, signature: Uint8Array | string): Promise<boolean>;\n}\n\nexport function parseSerializedKeypairSignature(serializedSignature: string) {\n\tconst bytes = fromBase64(serializedSignature);\n\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n\tswitch (signatureScheme) {\n\t\tcase 'ED25519':\n\t\tcase 'Secp256k1':\n\t\tcase 'Secp256r1':\n\t\t\tconst size =\n\t\t\t\tSIGNATURE_SCHEME_TO_SIZE[signatureScheme as keyof typeof SIGNATURE_SCHEME_TO_SIZE];\n\t\t\tconst signature = bytes.slice(1, bytes.length - size);\n\t\t\tconst publicKey = bytes.slice(1 + signature.length);\n\n\t\t\treturn {\n\t\t\t\tserializedSignature,\n\t\t\t\tsignatureScheme,\n\t\t\t\tsignature,\n\t\t\t\tpublicKey,\n\t\t\t\tbytes,\n\t\t\t};\n\t\tdefault:\n\t\t\tthrow new Error('Unsupported signature scheme');\n\t}\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5640, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/keypairs/passkey/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64 } from '@mysten/bcs';\nimport { secp256r1 } from '@noble/curves/p256';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport { PasskeyAuthenticator } from '../../bcs/bcs.js';\nimport { bytesEqual, PublicKey } from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature-scheme.js';\n\nexport const PASSKEY_PUBLIC_KEY_SIZE = 33;\nexport const PASSKEY_UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;\nexport const PASSKEY_SIGNATURE_SIZE = 64;\n/** Fixed DER header for secp256r1 SubjectPublicKeyInfo\nDER structure for P-256 SPKI:\n30 -- SEQUENCE\n  59 -- length (89 bytes)\n  30 -- SEQUENCE\n    13 -- length (19 bytes)\n    06 -- OBJECT IDENTIFIER\n      07 -- length\n      2A 86 48 CE 3D 02 01 -- id-ecPublicKey\n    06 -- OBJECT IDENTIFIER\n      08 -- length\n      2A 86 48 CE 3D 03 01 07 -- secp256r1/prime256v1\n  03 -- BIT STRING\n    42 -- length (66 bytes)\n    00 -- padding\n\t===== above bytes are considered header =====\n    04 || x || y -- uncompressed point (65 bytes: 0x04 || 32-byte x || 32-byte y)\n*/\nexport const SECP256R1_SPKI_HEADER = new Uint8Array([\n\t0x30,\n\t0x59, // SEQUENCE, length 89\n\t0x30,\n\t0x13, // SEQUENCE, length 19\n\t0x06,\n\t0x07, // OID, length 7\n\t0x2a,\n\t0x86,\n\t0x48,\n\t0xce,\n\t0x3d,\n\t0x02,\n\t0x01, // OID: 1.2.840.10045.2.1 (ecPublicKey)\n\t0x06,\n\t0x08, // OID, length 8\n\t0x2a,\n\t0x86,\n\t0x48,\n\t0xce,\n\t0x3d,\n\t0x03,\n\t0x01,\n\t0x07, // OID: 1.2.840.10045.3.1.7 (prime256v1/secp256r1)\n\t0x03,\n\t0x42, // BIT STRING, length 66\n\t0x00, // no unused bits\n] as const);\n\n/**\n * A passkey public key\n */\nexport class PasskeyPublicKey extends PublicKey {\n\tstatic SIZE = PASSKEY_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new PasskeyPublicKey object\n\t * @param value passkey public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromBase64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== PASSKEY_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${PASSKEY_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two passkey public keys are equal\n\t */\n\toverride equals(publicKey: PasskeyPublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256r1 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256r1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Passkey'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\tconst parsed = parseSerializedPasskeySignature(signature);\n\t\tconst clientDataJSON = JSON.parse(parsed.clientDataJson);\n\n\t\tif (clientDataJSON.type !== 'webauthn.get') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// parse challenge from base64 url\n\t\tconst parsedChallenge = fromBase64(\n\t\t\tclientDataJSON.challenge.replace(/-/g, '+').replace(/_/g, '/'),\n\t\t);\n\t\tif (!bytesEqual(message, parsedChallenge)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst pk = parsed.userSignature.slice(1 + PASSKEY_SIGNATURE_SIZE);\n\t\tif (!bytesEqual(this.toRawBytes(), pk)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst payload = new Uint8Array([...parsed.authenticatorData, ...sha256(parsed.clientDataJson)]);\n\t\tconst sig = parsed.userSignature.slice(1, PASSKEY_SIGNATURE_SIZE + 1);\n\t\treturn secp256r1.verify(sig, sha256(payload), pk);\n\t}\n}\n\n/**\n * Parses a DER SubjectPublicKeyInfo into an uncompressed public key. This also verifies\n * that the curve used is P-256 (secp256r1).\n *\n * @param data: DER SubjectPublicKeyInfo\n * @returns uncompressed public key (`0x04 || x || y`)\n */\nexport function parseDerSPKI(derBytes: Uint8Array): Uint8Array {\n\t// Verify length and header bytes are expected\n\tif (derBytes.length !== SECP256R1_SPKI_HEADER.length + PASSKEY_UNCOMPRESSED_PUBLIC_KEY_SIZE) {\n\t\tthrow new Error('Invalid DER length');\n\t}\n\tfor (let i = 0; i < SECP256R1_SPKI_HEADER.length; i++) {\n\t\tif (derBytes[i] !== SECP256R1_SPKI_HEADER[i]) {\n\t\t\tthrow new Error('Invalid spki header');\n\t\t}\n\t}\n\n\tif (derBytes[SECP256R1_SPKI_HEADER.length] !== 0x04) {\n\t\tthrow new Error('Invalid point marker');\n\t}\n\n\t// Returns the last 65 bytes `04 || x || y`\n\treturn derBytes.slice(SECP256R1_SPKI_HEADER.length);\n}\n\n/**\n * Parse signature from bytes or base64 string into the following fields.\n */\nexport function parseSerializedPasskeySignature(signature: Uint8Array | string) {\n\tconst bytes = typeof signature === 'string' ? fromBase64(signature) : signature;\n\n\tif (bytes[0] !== SIGNATURE_SCHEME_TO_FLAG.Passkey) {\n\t\tthrow new Error('Invalid signature scheme');\n\t}\n\tconst dec = PasskeyAuthenticator.parse(bytes.slice(1));\n\treturn {\n\t\tsignatureScheme: 'Passkey' as const,\n\t\tserializedSignature: toBase64(bytes),\n\t\tsignature: bytes,\n\t\tauthenticatorData: dec.authenticatorData,\n\t\tclientDataJson: dec.clientDataJson,\n\t\tuserSignature: new Uint8Array(dec.userSignature),\n\t\tpublicKey: new Uint8Array(dec.userSignature.slice(1 + PASSKEY_SIGNATURE_SIZE)),\n\t};\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5792, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/graphql/client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport type { TadaDocumentNode } from 'gql.tada';\nimport type { DocumentNode } from 'graphql';\nimport { print } from 'graphql';\n\nexport type GraphQLDocument<\n\tResult = Record<string, unknown>,\n\tVariables = Record<string, unknown>,\n> =\n\t| string\n\t| DocumentNode\n\t| TypedDocumentNode<Result, Variables>\n\t| TadaDocumentNode<Result, Variables>;\n\nexport type GraphQLQueryOptions<\n\tResult = Record<string, unknown>,\n\tVariables = Record<string, unknown>,\n> = {\n\tquery: GraphQLDocument<Result, Variables>;\n\toperationName?: string;\n\textensions?: Record<string, unknown>;\n} & (Variables extends { [key: string]: never }\n\t? { variables?: Variables }\n\t: {\n\t\t\tvariables: Variables;\n\t\t});\n\nexport type GraphQLQueryResult<Result = Record<string, unknown>> = {\n\tdata?: Result;\n\terrors?: GraphQLResponseErrors;\n\textensions?: Record<string, unknown>;\n};\n\nexport type GraphQLResponseErrors = Array<{\n\tmessage: string;\n\tlocations?: { line: number; column: number }[];\n\tpath?: (string | number)[];\n}>;\n\nexport interface SuiGraphQLClientOptions<Queries extends Record<string, GraphQLDocument>> {\n\turl: string;\n\tfetch?: typeof fetch;\n\theaders?: Record<string, string>;\n\tqueries?: Queries;\n}\n\nexport class SuiGraphQLRequestError extends Error {}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class SuiGraphQLClient<Queries extends Record<string, GraphQLDocument> = {}> {\n\t#url: string;\n\t#queries: Queries;\n\t#headers: Record<string, string>;\n\t#fetch: typeof fetch;\n\n\tconstructor({\n\t\turl,\n\t\tfetch: fetchFn = fetch,\n\t\theaders = {},\n\t\tqueries = {} as Queries,\n\t}: SuiGraphQLClientOptions<Queries>) {\n\t\tthis.#url = url;\n\t\tthis.#queries = queries;\n\t\tthis.#headers = headers;\n\t\tthis.#fetch = (...args) => fetchFn(...args);\n\t}\n\n\tasync query<Result = Record<string, unknown>, Variables = Record<string, unknown>>(\n\t\toptions: GraphQLQueryOptions<Result, Variables>,\n\t): Promise<GraphQLQueryResult<Result>> {\n\t\tconst res = await this.#fetch(this.#url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...this.#headers,\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tquery: typeof options.query === 'string' ? String(options.query) : print(options.query),\n\t\t\t\tvariables: options.variables,\n\t\t\t\textensions: options.extensions,\n\t\t\t\toperationName: options.operationName,\n\t\t\t}),\n\t\t});\n\n\t\tif (!res.ok) {\n\t\t\tthrow new SuiGraphQLRequestError(`GraphQL request failed: ${res.statusText} (${res.status})`);\n\t\t}\n\n\t\treturn await res.json();\n\t}\n\n\tasync execute<\n\t\tconst Query extends Extract<keyof Queries, string>,\n\t\tResult = Queries[Query] extends GraphQLDocument<infer R, unknown> ? R : Record<string, unknown>,\n\t\tVariables = Queries[Query] extends GraphQLDocument<unknown, infer V>\n\t\t\t? V\n\t\t\t: Record<string, unknown>,\n\t>(\n\t\tquery: Query,\n\t\toptions: Omit<GraphQLQueryOptions<Result, Variables>, 'query'>,\n\t): Promise<GraphQLQueryResult<Result>> {\n\t\treturn this.query({\n\t\t\t...(options as { variables: Record<string, unknown> }),\n\t\t\tquery: this.#queries[query]!,\n\t\t}) as Promise<GraphQLQueryResult<Result>>;\n\t}\n}\n"],"names":[],"mappings":";;;;AAMA,SAAS,aAAa;;;;;;;;AANtB,IAAA,MAAA,UAAA,UAAA;;AAiDO,MAAM,+BAA+B,MAAM;AAAC;AAG5C,MAAM,iBAAuE;IAkBnF,MAAM,MACL,OAAA,EACsC;QACtC,MAAM,MAAM,MAAM,aAAA,IAAA,EAAK,QAAL,IAAA,CAAA,IAAA,EAAY,aAAA,IAAA,EAAK,OAAM;YACxC,QAAQ;YACR,SAAS;gBACR,gBAAgB;gBAChB,GAAG,aAAA,IAAA,EAAK,SAAA;YACT;YACA,MAAM,KAAK,SAAA,CAAU;gBACpB,OAAO,OAAO,QAAQ,KAAA,KAAU,WAAW,OAAO,QAAQ,KAAK,oJAAI,QAAA,EAAM,QAAQ,KAAK;gBACtF,WAAW,QAAQ,SAAA;gBACnB,YAAY,QAAQ,UAAA;gBACpB,eAAe,QAAQ,aAAA;YACxB,CAAC;QACF;QAEA,IAAI,CAAC,IAAI,EAAA,EAAI;YACZ,MAAM,IAAI,uBAAuB,kCAA2B,IAAI,UAAU,EAAA,MAAe,OAAV,IAAI,MAAM,EAAA,EAAG;QAC7F;QAEA,OAAO,MAAM,IAAI,IAAA,CAAK;IACvB;IAEA,MAAM,QAOL,KAAA,EACA,OAAA,EACsC;QACtC,OAAO,IAAA,CAAK,KAAA,CAAM;YACjB,GAAI,OAAA;YACJ,OAAO,aAAA,IAAA,EAAK,SAAA,CAAS,KAAK,CAAA;QAC3B,CAAC;IACF;IAlDA,YAAY,EACX,GAAA,EACA,OAAO,UAAU,KAAA,EACjB,UAAU,CAAC,CAAA,EACX,UAAU,CAAC,CAAA,EACZ,CAAqC;QAVrC,aAAA,IAAA,EAAA;QACA,aAAA,IAAA,EAAA;QACA,aAAA,IAAA,EAAA;QACA,aAAA,IAAA,EAAA;QAQC,aAAA,IAAA,EAAK,MAAO;QACZ,aAAA,IAAA,EAAK,UAAW;QAChB,aAAA,IAAA,EAAK,UAAW;QAChB,aAAA,IAAA,EAAK,QAAS;;gBAAI;;mBAAS,QAAQ,GAAG,IAAI;;IAC3C;AAyCD;AAxDC,OAAA,IAAA;AACA,WAAA,IAAA;AACA,WAAA,IAAA;AACA,SAAA,IAAA","debugId":null}},
    {"offset": {"line": 5860, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/graphql/schemas/latest/index.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { initGraphQLTada } from 'gql.tada';\n\nimport type { introspection } from '../../generated/latest/tada-env.js';\nimport type { CustomScalars } from '../../types.js';\n\nexport * from '../../types.js';\n\nexport type { FragmentOf, ResultOf, VariablesOf, TadaDocumentNode } from 'gql.tada';\nexport { readFragment, maskFragments } from 'gql.tada';\n\nexport const graphql = initGraphQLTada<{\n\tintrospection: typeof introspection;\n\tscalars: CustomScalars;\n}>();\n"],"names":[],"mappings":";;;AAGA,SAAS,uBAAuB;;;;AAUzB,MAAM,8JAAU,kBAAA,CAGpB","debugId":null}},
    {"offset": {"line": 5874, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/zklogin/jwt-decode.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/** Copied from https://github.com/auth0/jwt-decode/blob/3d372e9875ff673228a9f2d9df74e84690842a9c/lib/index.ts */\n\n/**\nThe MIT License (MIT)\n\nCopyright (c) 2015 Auth0, Inc. <support@auth0.com> (http://auth0.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n */\n\nexport interface JwtDecodeOptions {\n\theader?: boolean;\n}\n\nexport interface JwtHeader {\n\ttyp?: string;\n\talg?: string;\n\tkid?: string;\n}\n\nexport interface JwtPayload {\n\tiss?: string;\n\tsub?: string;\n\taud?: string[] | string;\n\texp?: number;\n\tnbf?: number;\n\tiat?: number;\n\tjti?: string;\n}\n\nexport class InvalidTokenError extends Error {}\n\nInvalidTokenError.prototype.name = 'InvalidTokenError';\n\nfunction b64DecodeUnicode(str: string) {\n\treturn decodeURIComponent(\n\t\tatob(str).replace(/(.)/g, (_m, p) => {\n\t\t\tlet code = (p as string).charCodeAt(0).toString(16).toUpperCase();\n\t\t\tif (code.length < 2) {\n\t\t\t\tcode = '0' + code;\n\t\t\t}\n\t\t\treturn '%' + code;\n\t\t}),\n\t);\n}\n\nfunction base64UrlDecode(str: string) {\n\tlet output = str.replace(/-/g, '+').replace(/_/g, '/');\n\tswitch (output.length % 4) {\n\t\tcase 0:\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\toutput += '==';\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\toutput += '=';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('base64 string is not of the correct length');\n\t}\n\n\ttry {\n\t\treturn b64DecodeUnicode(output);\n\t} catch (err) {\n\t\treturn atob(output);\n\t}\n}\n\nexport function jwtDecode<T = JwtHeader>(\n\ttoken: string,\n\toptions: JwtDecodeOptions & { header: true },\n): T;\nexport function jwtDecode<T = JwtPayload>(token: string, options?: JwtDecodeOptions): T;\nexport function jwtDecode<T = JwtHeader | JwtPayload>(\n\ttoken: string,\n\toptions?: JwtDecodeOptions,\n): T {\n\tif (typeof token !== 'string') {\n\t\tthrow new InvalidTokenError('Invalid token specified: must be a string');\n\t}\n\n\toptions ||= {};\n\n\tconst pos = options.header === true ? 0 : 1;\n\tconst part = token.split('.')[pos];\n\n\tif (typeof part !== 'string') {\n\t\tthrow new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n\t}\n\n\tlet decoded: string;\n\ttry {\n\t\tdecoded = base64UrlDecode(part);\n\t} catch (e) {\n\t\tthrow new InvalidTokenError(\n\t\t\t`Invalid token specified: invalid base64 for part #${pos + 1} (${(e as Error).message})`,\n\t\t);\n\t}\n\n\ttry {\n\t\treturn JSON.parse(decoded) as T;\n\t} catch (e) {\n\t\tthrow new InvalidTokenError(\n\t\t\t`Invalid token specified: invalid json for part #${pos + 1} (${(e as Error).message})`,\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;;AAiDO,MAAM,0BAA0B,MAAM;AAAC;AAE9C,kBAAkB,SAAA,CAAU,IAAA,GAAO;AAEnC,SAAS,iBAAiB,GAAA,EAAa;IACtC,OAAO,mBACN,KAAK,GAAG,EAAE,OAAA,CAAQ,QAAQ,CAAC,IAAI,MAAM;QACpC,IAAI,OAAQ,EAAa,UAAA,CAAW,CAAC,EAAE,QAAA,CAAS,EAAE,EAAE,WAAA,CAAY;QAChE,IAAI,KAAK,MAAA,GAAS,GAAG;YACpB,OAAO,MAAM;QACd;QACA,OAAO,MAAM;IACd,CAAC;AAEH;AAEA,SAAS,gBAAgB,GAAA,EAAa;IACrC,IAAI,SAAS,IAAI,OAAA,CAAQ,MAAM,GAAG,EAAE,OAAA,CAAQ,MAAM,GAAG;IACrD,OAAQ,OAAO,MAAA,GAAS,GAAG;QAC1B,KAAK;YACJ;QACD,KAAK;YACJ,UAAU;YACV;QACD,KAAK;YACJ,UAAU;YACV;QACD;YACC,MAAM,IAAI,MAAM,4CAA4C;IAC9D;IAEA,IAAI;QACH,OAAO,iBAAiB,MAAM;IAC/B,EAAA,OAAS,KAAK;QACb,OAAO,KAAK,MAAM;IACnB;AACD;AAOO,SAAS,UACf,KAAA,EACA,OAAA,EACI;IACJ,IAAI,OAAO,UAAU,UAAU;QAC9B,MAAM,IAAI,kBAAkB,2CAA2C;IACxE;IAEA,WAAA,CAAA,UAAY,CAAC,CAAA;IAEb,MAAM,MAAM,QAAQ,MAAA,KAAW,OAAO,IAAI;IAC1C,MAAM,OAAO,MAAM,KAAA,CAAM,GAAG,CAAA,CAAE,GAAG,CAAA;IAEjC,IAAI,OAAO,SAAS,UAAU;QAC7B,MAAM,IAAI,kBAAkB,0CAAiD,CAAE,MAAT,MAAM,CAAC;IAC9E;IAEA,IAAI;IACJ,IAAI;QACH,UAAU,gBAAgB,IAAI;IAC/B,EAAA,OAAS,GAAG;QACX,MAAM,IAAI,kBACT,4DAAqD,MAAM,CAAC,EAAA,MAAyB,OAAnB,EAAY,OAAO,EAAA;IAEvF;IAEA,IAAI;QACH,OAAO,KAAK,KAAA,CAAM,OAAO;IAC1B,EAAA,OAAS,GAAG;QACX,MAAM,IAAI,kBACT,0DAAmD,MAAM,CAAC,EAAA,MAAyB,OAAnB,EAAY,OAAO,EAAA;IAErF;AACD","debugId":null}},
    {"offset": {"line": 5938, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/zklogin/poseidon.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tposeidon1,\n\tposeidon2,\n\tposeidon3,\n\tposeidon4,\n\tposeidon5,\n\tposeidon6,\n\tposeidon7,\n\tposeidon8,\n\tposeidon9,\n\tposeidon10,\n\tposeidon11,\n\tposeidon12,\n\tposeidon13,\n\tposeidon14,\n\tposeidon15,\n\tposeidon16,\n} from 'poseidon-lite';\n\nconst poseidonNumToHashFN = [\n\tposeidon1,\n\tposeidon2,\n\tposeidon3,\n\tposeidon4,\n\tposeidon5,\n\tposeidon6,\n\tposeidon7,\n\tposeidon8,\n\tposeidon9,\n\tposeidon10,\n\tposeidon11,\n\tposeidon12,\n\tposeidon13,\n\tposeidon14,\n\tposeidon15,\n\tposeidon16,\n];\n\nexport const BN254_FIELD_SIZE =\n\t21888242871839275222246405745257275088548364400416034343698204186575808495617n;\n\nexport function poseidonHash(inputs: (number | bigint | string)[]): bigint {\n\tinputs.forEach((x) => {\n\t\tconst b = BigInt(x);\n\t\tif (b < 0 || b >= BN254_FIELD_SIZE) {\n\t\t\tthrow new Error(`Element ${b} not in the BN254 field`);\n\t\t}\n\t});\n\n\tconst hashFN = poseidonNumToHashFN[inputs.length - 1];\n\n\tif (hashFN) {\n\t\treturn hashFN(inputs);\n\t} else if (inputs.length <= 32) {\n\t\tconst hash1 = poseidonHash(inputs.slice(0, 16));\n\t\tconst hash2 = poseidonHash(inputs.slice(16));\n\t\treturn poseidonHash([hash1, hash2]);\n\t} else {\n\t\tthrow new Error(`Yet to implement: Unable to hash a vector of length ${inputs.length}`);\n\t}\n}\n"],"names":[],"mappings":";;;;AAGA;;AAmBA,MAAM,sBAAsB;0IAC3B,YAAA;0IACA,YAAA;0IACA,YAAA;0IACA,YAAA;0IACA,YAAA;IACA,kJAAA;0IACA,YAAA;0IACA,YAAA;0IACA,YAAA;0IACA,aAAA;0IACA,aAAA;IACA,mJAAA;0IACA,aAAA;0IACA,aAAA;0IACA,aAAA;yIACA,cAAA;CACD;AAEO,MAAM,mBACZ,8EAAA;AAEM,SAAS,aAAa,MAAA,EAA8C;IAC1E,OAAO,OAAA,CAAQ,CAAC,MAAM;QACrB,MAAM,IAAI,OAAO,CAAC;QAClB,IAAI,IAAI,KAAK,KAAK,kBAAkB;YACnC,MAAM,IAAI,MAAM,WAAY,OAAD,CAAC,EAAA,wBAAyB;QACtD;IACD,CAAC;IAED,MAAM,SAAS,mBAAA,CAAoB,OAAO,MAAA,GAAS,CAAC,CAAA;IAEpD,IAAI,QAAQ;QACX,OAAO,OAAO,MAAM;IACrB,OAAA,IAAW,OAAO,MAAA,IAAU,IAAI;QAC/B,MAAM,QAAQ,aAAa,OAAO,KAAA,CAAM,GAAG,EAAE,CAAC;QAC9C,MAAM,QAAQ,aAAa,OAAO,KAAA,CAAM,EAAE,CAAC;QAC3C,OAAO,aAAa;YAAC;YAAO,KAAK;SAAC;IACnC,OAAO;QACN,MAAM,IAAI,MAAM,uDAAoE,CAAE,MAAf,OAAO,MAAM;IACrF;AACD","debugId":null}},
    {"offset": {"line": 5990, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/zklogin/utils.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { hexToBytes } from '@noble/hashes/utils';\n\nimport type { PublicKey } from '../cryptography/publickey.js';\nimport { poseidonHash } from './poseidon.js';\n\nconst MAX_KEY_CLAIM_NAME_LENGTH = 32;\nconst MAX_KEY_CLAIM_VALUE_LENGTH = 115;\nconst MAX_AUD_VALUE_LENGTH = 145;\nconst PACK_WIDTH = 248;\n\nfunction findFirstNonZeroIndex(bytes: Uint8Array) {\n\tfor (let i = 0; i < bytes.length; i++) {\n\t\tif (bytes[i] !== 0) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n// Derive bytearray from num where the bytearray is padded to the left with 0s to the specified width.\nexport function toPaddedBigEndianBytes(num: bigint, width: number): Uint8Array {\n\tconst hex = num.toString(16);\n\treturn hexToBytes(hex.padStart(width * 2, '0').slice(-width * 2));\n}\n\n// Derive bytearray from num where the bytearray is not padded with 0.\nexport function toBigEndianBytes(num: bigint, width: number): Uint8Array {\n\tconst bytes = toPaddedBigEndianBytes(num, width);\n\n\tconst firstNonZeroIndex = findFirstNonZeroIndex(bytes);\n\n\tif (firstNonZeroIndex === -1) {\n\t\treturn new Uint8Array([0]);\n\t}\n\n\treturn bytes.slice(firstNonZeroIndex);\n}\n\nexport function getExtendedEphemeralPublicKey(publicKey: PublicKey) {\n\treturn publicKey.toSuiPublicKey();\n}\n\n/**\n * Splits an array into chunks of size chunk_size. If the array is not evenly\n * divisible by chunk_size, the first chunk will be smaller than chunk_size.\n *\n * E.g., arrayChunk([1, 2, 3, 4, 5], 2) => [[1], [2, 3], [4, 5]]\n *\n * Note: Can be made more efficient by avoiding the reverse() calls.\n */\nexport function chunkArray<T>(array: T[], chunk_size: number): T[][] {\n\tconst chunks = Array(Math.ceil(array.length / chunk_size));\n\tconst revArray = array.reverse();\n\tfor (let i = 0; i < chunks.length; i++) {\n\t\tchunks[i] = revArray.slice(i * chunk_size, (i + 1) * chunk_size).reverse();\n\t}\n\treturn chunks.reverse();\n}\n\nfunction bytesBEToBigInt(bytes: number[]): bigint {\n\tconst hex = bytes.map((b) => b.toString(16).padStart(2, '0')).join('');\n\tif (hex.length === 0) {\n\t\treturn BigInt(0);\n\t}\n\treturn BigInt('0x' + hex);\n}\n\n// hashes an ASCII string to a field element\nexport function hashASCIIStrToField(str: string, maxSize: number) {\n\tif (str.length > maxSize) {\n\t\tthrow new Error(`String ${str} is longer than ${maxSize} chars`);\n\t}\n\n\t// Note: Padding with zeroes is safe because we are only using this function to map human-readable sequence of bytes.\n\t// So the ASCII values of those characters will never be zero (null character).\n\tconst strPadded = str\n\t\t.padEnd(maxSize, String.fromCharCode(0))\n\t\t.split('')\n\t\t.map((c) => c.charCodeAt(0));\n\n\tconst chunkSize = PACK_WIDTH / 8;\n\tconst packed = chunkArray(strPadded, chunkSize).map((chunk) => bytesBEToBigInt(chunk));\n\treturn poseidonHash(packed);\n}\n\nexport function genAddressSeed(\n\tsalt: string | bigint,\n\tname: string,\n\tvalue: string,\n\taud: string,\n\tmax_name_length = MAX_KEY_CLAIM_NAME_LENGTH,\n\tmax_value_length = MAX_KEY_CLAIM_VALUE_LENGTH,\n\tmax_aud_length = MAX_AUD_VALUE_LENGTH,\n): bigint {\n\treturn poseidonHash([\n\t\thashASCIIStrToField(name, max_name_length),\n\t\thashASCIIStrToField(value, max_value_length),\n\t\thashASCIIStrToField(aud, max_aud_length),\n\t\tposeidonHash([BigInt(salt)]),\n\t]);\n}\n\nexport function normalizeZkLoginIssuer(iss: string) {\n\tif (iss === 'accounts.google.com') {\n\t\treturn 'https://accounts.google.com';\n\t}\n\treturn iss;\n}\n"],"names":[],"mappings":";;;;;;;;;AAGA,SAAS,kBAAkB;AAG3B,SAAS,oBAAoB;;;AAE7B,MAAM,4BAA4B;AAClC,MAAM,6BAA6B;AACnC,MAAM,uBAAuB;AAC7B,MAAM,aAAa;AAEnB,SAAS,sBAAsB,KAAA,EAAmB;IACjD,IAAA,IAAS,IAAI,GAAG,IAAI,MAAM,MAAA,EAAQ,IAAK;QACtC,IAAI,KAAA,CAAM,CAAC,CAAA,KAAM,GAAG;YACnB,OAAO;QACR;IACD;IAEA,OAAO,CAAA;AACR;AAGO,SAAS,uBAAuB,GAAA,EAAa,KAAA,EAA2B;IAC9E,MAAM,MAAM,IAAI,QAAA,CAAS,EAAE;IAC3B,OAAO,+JAAA,EAAW,IAAI,QAAA,CAAS,QAAQ,GAAG,GAAG,EAAE,KAAA,CAAM,CAAC,QAAQ,CAAC,CAAC;AACjE;AAGO,SAAS,iBAAiB,GAAA,EAAa,KAAA,EAA2B;IACxE,MAAM,QAAQ,uBAAuB,KAAK,KAAK;IAE/C,MAAM,oBAAoB,sBAAsB,KAAK;IAErD,IAAI,sBAAsB,CAAA,GAAI;QAC7B,OAAO,IAAI,WAAW;YAAC,CAAC;SAAC;IAC1B;IAEA,OAAO,MAAM,KAAA,CAAM,iBAAiB;AACrC;AAEO,SAAS,8BAA8B,SAAA,EAAsB;IACnE,OAAO,UAAU,cAAA,CAAe;AACjC;AAUO,SAAS,WAAc,KAAA,EAAY,UAAA,EAA2B;IACpE,MAAM,SAAS,MAAM,KAAK,IAAA,CAAK,MAAM,MAAA,GAAS,UAAU,CAAC;IACzD,MAAM,WAAW,MAAM,OAAA,CAAQ;IAC/B,IAAA,IAAS,IAAI,GAAG,IAAI,OAAO,MAAA,EAAQ,IAAK;QACvC,MAAA,CAAO,CAAC,CAAA,GAAI,SAAS,KAAA,CAAM,IAAI,YAAA,CAAa,IAAI,CAAA,IAAK,UAAU,EAAE,OAAA,CAAQ;IAC1E;IACA,OAAO,OAAO,OAAA,CAAQ;AACvB;AAEA,SAAS,gBAAgB,KAAA,EAAyB;IACjD,MAAM,MAAM,MAAM,GAAA,CAAI,CAAC,IAAM,EAAE,QAAA,CAAS,EAAE,EAAE,QAAA,CAAS,GAAG,GAAG,CAAC,EAAE,IAAA,CAAK,EAAE;IACrE,IAAI,IAAI,MAAA,KAAW,GAAG;QACrB,OAAO,OAAO,CAAC;IAChB;IACA,OAAO,OAAO,OAAO,GAAG;AACzB;AAGO,SAAS,oBAAoB,GAAA,EAAa,OAAA,EAAiB;IACjE,IAAI,IAAI,MAAA,GAAS,SAAS;QACzB,MAAM,IAAI,MAAM,iBAAU,GAAG,EAAA,oBAA0B,OAAP,OAAO,EAAA,OAAQ;IAChE;IAIA,MAAM,YAAY,IAChB,MAAA,CAAO,SAAS,OAAO,YAAA,CAAa,CAAC,CAAC,EACtC,KAAA,CAAM,EAAE,EACR,GAAA,CAAI,CAAC,IAAM,EAAE,UAAA,CAAW,CAAC,CAAC;IAE5B,MAAM,YAAY,aAAa;IAC/B,MAAM,SAAS,WAAW,WAAW,SAAS,EAAE,GAAA,CAAI,CAAC,QAAU,gBAAgB,KAAK,CAAC;IACrF,yNAAO,eAAA,EAAa,MAAM;AAC3B;AAEO,SAAS,eACf,IAAA,EACA,IAAA,EACA,KAAA,EACA,GAAA;0BACA,iEAAkB,8CAClB,iEAAmB,4BACnB,kFAAiB,sBACR;IACT,yNAAO,eAAA,EAAa;QACnB,oBAAoB,MAAM,eAAe;QACzC,oBAAoB,OAAO,gBAAgB;QAC3C,oBAAoB,KAAK,cAAc;0NACvC,eAAA,EAAa;YAAC,OAAO,IAAI,CAAC;SAAC;KAC3B;AACF;AAEO,SAAS,uBAAuB,GAAA,EAAa;IACnD,IAAI,QAAQ,uBAAuB;QAClC,OAAO;IACR;IACA,OAAO;AACR","debugId":null}},
    {"offset": {"line": 6079, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/zklogin/jwt-utils.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { JwtPayload } from './jwt-decode.js';\nimport { jwtDecode } from './jwt-decode.js';\nimport { normalizeZkLoginIssuer } from './utils.js';\n\nfunction base64UrlCharTo6Bits(base64UrlChar: string): number[] {\n\tif (base64UrlChar.length !== 1) {\n\t\tthrow new Error('Invalid base64Url character: ' + base64UrlChar);\n\t}\n\n\t// Define the base64URL character set\n\tconst base64UrlCharacterSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\n\n\t// Find the index of the input character in the base64URL character set\n\tconst index = base64UrlCharacterSet.indexOf(base64UrlChar);\n\n\tif (index === -1) {\n\t\tthrow new Error('Invalid base64Url character: ' + base64UrlChar);\n\t}\n\n\t// Convert the index to a 6-bit binary string\n\tconst binaryString = index.toString(2).padStart(6, '0');\n\n\t// Convert the binary string to an array of bits\n\tconst bits = Array.from(binaryString).map(Number);\n\n\treturn bits;\n}\n\nfunction base64UrlStringToBitVector(base64UrlString: string) {\n\tlet bitVector: number[] = [];\n\tfor (let i = 0; i < base64UrlString.length; i++) {\n\t\tconst base64UrlChar = base64UrlString.charAt(i);\n\t\tconst bits = base64UrlCharTo6Bits(base64UrlChar);\n\t\tbitVector = bitVector.concat(bits);\n\t}\n\treturn bitVector;\n}\n\nfunction decodeBase64URL(s: string, i: number): string {\n\tif (s.length < 2) {\n\t\tthrow new Error(`Input (s = ${s}) is not tightly packed because s.length < 2`);\n\t}\n\tlet bits = base64UrlStringToBitVector(s);\n\n\tconst firstCharOffset = i % 4;\n\tif (firstCharOffset === 0) {\n\t\t// skip\n\t} else if (firstCharOffset === 1) {\n\t\tbits = bits.slice(2);\n\t} else if (firstCharOffset === 2) {\n\t\tbits = bits.slice(4);\n\t} else {\n\t\t// (offset == 3)\n\t\tthrow new Error(`Input (s = ${s}) is not tightly packed because i%4 = 3 (i = ${i}))`);\n\t}\n\n\tconst lastCharOffset = (i + s.length - 1) % 4;\n\tif (lastCharOffset === 3) {\n\t\t// skip\n\t} else if (lastCharOffset === 2) {\n\t\tbits = bits.slice(0, bits.length - 2);\n\t} else if (lastCharOffset === 1) {\n\t\tbits = bits.slice(0, bits.length - 4);\n\t} else {\n\t\t// (offset == 0)\n\t\tthrow new Error(\n\t\t\t`Input (s = ${s}) is not tightly packed because (i + s.length - 1)%4 = 0 (i = ${i}))`,\n\t\t);\n\t}\n\n\tif (bits.length % 8 !== 0) {\n\t\tthrow new Error(`We should never reach here...`);\n\t}\n\n\tconst bytes = new Uint8Array(Math.floor(bits.length / 8));\n\tlet currentByteIndex = 0;\n\tfor (let i = 0; i < bits.length; i += 8) {\n\t\tconst bitChunk = bits.slice(i, i + 8);\n\n\t\t// Convert the 8-bit chunk to a byte and add it to the bytes array\n\t\tconst byte = parseInt(bitChunk.join(''), 2);\n\t\tbytes[currentByteIndex++] = byte;\n\t}\n\treturn new TextDecoder().decode(bytes);\n}\n\nfunction verifyExtendedClaim(claim: string) {\n\t// Last character of each extracted_claim must be '}' or ','\n\tif (!(claim.slice(-1) === '}' || claim.slice(-1) === ',')) {\n\t\tthrow new Error('Invalid claim');\n\t}\n\n\t// A hack to parse the JSON key-value pair.. but it should work\n\tconst json = JSON.parse('{' + claim.slice(0, -1) + '}');\n\tif (Object.keys(json).length !== 1) {\n\t\tthrow new Error('Invalid claim');\n\t}\n\tconst key = Object.keys(json)[0];\n\treturn [key, json[key]];\n}\n\nexport type Claim = {\n\tvalue: string;\n\tindexMod4: number;\n};\n\nexport function extractClaimValue<R>(claim: Claim, claimName: string): R {\n\tconst extendedClaim = decodeBase64URL(claim.value, claim.indexMod4);\n\tconst [name, value] = verifyExtendedClaim(extendedClaim);\n\tif (name !== claimName) {\n\t\tthrow new Error(`Invalid field name: found ${name} expected ${claimName}`);\n\t}\n\treturn value;\n}\n\nexport function decodeJwt(jwt: string): Omit<JwtPayload, 'iss' | 'aud' | 'sub'> & {\n\tiss: string;\n\taud: string;\n\tsub: string;\n\trawIss: string;\n} {\n\tconst { iss, aud, sub, ...decodedJWT } = jwtDecode(jwt);\n\n\tif (!sub || !iss || !aud) {\n\t\tthrow new Error('Missing jwt data');\n\t}\n\n\tif (Array.isArray(aud)) {\n\t\tthrow new Error('Not supported aud. Aud is an array, string was expected.');\n\t}\n\n\treturn {\n\t\t...decodedJWT,\n\t\tiss: normalizeZkLoginIssuer(iss),\n\t\trawIss: iss,\n\t\taud,\n\t\tsub,\n\t};\n}\n"],"names":["i"],"mappings":"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","debugId":null}},
    {"offset": {"line": 6186, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/zklogin/bcs.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { InferBcsInput } from '@mysten/bcs';\nimport { bcs } from '@mysten/bcs';\n\nexport const zkLoginSignature = bcs.struct('ZkLoginSignature', {\n\tinputs: bcs.struct('ZkLoginSignatureInputs', {\n\t\tproofPoints: bcs.struct('ZkLoginSignatureInputsProofPoints', {\n\t\t\ta: bcs.vector(bcs.string()),\n\t\t\tb: bcs.vector(bcs.vector(bcs.string())),\n\t\t\tc: bcs.vector(bcs.string()),\n\t\t}),\n\t\tissBase64Details: bcs.struct('ZkLoginSignatureInputsClaim', {\n\t\t\tvalue: bcs.string(),\n\t\t\tindexMod4: bcs.u8(),\n\t\t}),\n\t\theaderBase64: bcs.string(),\n\t\taddressSeed: bcs.string(),\n\t}),\n\tmaxEpoch: bcs.u64(),\n\tuserSignature: bcs.vector(bcs.u8()),\n});\n\nexport type ZkLoginSignature = InferBcsInput<typeof zkLoginSignature>;\nexport type ZkLoginSignatureInputs = ZkLoginSignature['inputs'];\n"],"names":[],"mappings":";;;AAIA,SAAS,WAAW;;AAEb,MAAM,iNAAmB,MAAA,CAAI,MAAA,CAAO,oBAAoB;IAC9D,sMAAQ,MAAA,CAAI,MAAA,CAAO,0BAA0B;QAC5C,2MAAa,MAAA,CAAI,MAAA,CAAO,qCAAqC;YAC5D,iMAAG,MAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,MAAA,CAAO,CAAC;YAC1B,iMAAG,MAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,MAAA,CAAO,CAAC,CAAC;YACtC,iMAAG,MAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,MAAA,CAAO,CAAC;QAC3B,CAAC;QACD,gNAAkB,MAAA,CAAI,MAAA,CAAO,+BAA+B;YAC3D,qMAAO,MAAA,CAAI,MAAA,CAAO;YAClB,yMAAW,MAAA,CAAI,EAAA,CAAG;QACnB,CAAC;QACD,4MAAc,MAAA,CAAI,MAAA,CAAO;QACzB,2MAAa,MAAA,CAAI,MAAA,CAAO;IACzB,CAAC;IACD,wMAAU,MAAA,CAAI,GAAA,CAAI;IAClB,6MAAe,MAAA,CAAI,MAAA,+LAAO,MAAA,CAAI,EAAA,CAAG,CAAC;AACnC,CAAC","debugId":null}},
    {"offset": {"line": 6214, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/zklogin/signature.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64 } from '@mysten/bcs';\n\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../cryptography/signature-scheme.js';\nimport type { ZkLoginSignature } from './bcs.js';\nimport { zkLoginSignature } from './bcs.js';\n\ninterface ZkLoginSignatureExtended extends Omit<ZkLoginSignature, 'userSignature'> {\n\tuserSignature: string | ZkLoginSignature['userSignature'];\n}\n\nfunction getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature }: ZkLoginSignatureExtended) {\n\treturn zkLoginSignature\n\t\t.serialize(\n\t\t\t{\n\t\t\t\tinputs,\n\t\t\t\tmaxEpoch,\n\t\t\t\tuserSignature:\n\t\t\t\t\ttypeof userSignature === 'string' ? fromBase64(userSignature) : userSignature,\n\t\t\t},\n\t\t\t{ maxSize: 2048 },\n\t\t)\n\t\t.toBytes();\n}\n\nexport function getZkLoginSignature({ inputs, maxEpoch, userSignature }: ZkLoginSignatureExtended) {\n\tconst bytes = getZkLoginSignatureBytes({ inputs, maxEpoch, userSignature });\n\tconst signatureBytes = new Uint8Array(bytes.length + 1);\n\tsignatureBytes.set([SIGNATURE_SCHEME_TO_FLAG.ZkLogin]);\n\tsignatureBytes.set(bytes, 1);\n\treturn toBase64(signatureBytes);\n}\n\nexport function parseZkLoginSignature(signature: string | Uint8Array) {\n\treturn zkLoginSignature.parse(typeof signature === 'string' ? fromBase64(signature) : signature);\n}\n"],"names":[],"mappings":";;;;AAGA,SAAS,YAAY,gBAAgB;AAErC,SAAS,gCAAgC;AAEzC,SAAS,wBAAwB;;;;AAMjC,SAAS,8BAA2D;UAAhC,MAAA,EAAQ,QAAA,EAAU,aAAA,CAAc,CAAA,EAA6B,CAA/D;IACjC,gNAAO,mBAAA,CACL,SAAA,CACA;QACC;QACA;QACA,eACC,OAAO,kBAAkB,6MAAW,aAAA,EAAW,aAAa,IAAI;IAClE,GACA;QAAE,SAAS;IAAK,GAEhB,OAAA,CAAQ;AACX;AAEO,SAAS,yBAAsD;UAAhC,MAAA,EAAQ,QAAA,EAAU,aAAA,CAAc,CAAA,EAA6B,CAA/D;IACnC,MAAM,QAAQ,yBAAyB;QAAE;QAAQ;QAAU;IAAc,CAAC;IAC1E,MAAM,iBAAiB,IAAI,WAAW,MAAM,MAAA,GAAS,CAAC;IACtD,eAAe,GAAA,CAAI;sOAAC,2BAAA,CAAyB,OAAO;KAAC;IACrD,eAAe,GAAA,CAAI,OAAO,CAAC;IAC3B,QAAO,4MAAA,EAAS,cAAc;AAC/B;AAEO,SAAS,sBAAsB,SAAA,EAAgC;IACrE,gNAAO,mBAAA,CAAiB,KAAA,CAAM,OAAO,cAAc,6MAAW,aAAA,EAAW,SAAS,IAAI,SAAS;AAChG","debugId":null}},
    {"offset": {"line": 6257, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/zklogin/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64, toHex } from '@mysten/bcs';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nimport { PublicKey } from '../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../cryptography/signature-scheme.js';\nimport { SuiGraphQLClient } from '../graphql/client.js';\nimport { graphql } from '../graphql/schemas/latest/index.js';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../utils/sui-types.js';\nimport type { ZkLoginSignatureInputs } from './bcs.js';\nimport { extractClaimValue } from './jwt-utils.js';\nimport { parseZkLoginSignature } from './signature.js';\nimport { normalizeZkLoginIssuer, toBigEndianBytes, toPaddedBigEndianBytes } from './utils.js';\n\n/**\n * A zkLogin public identifier\n */\nexport class ZkLoginPublicIdentifier extends PublicKey {\n\t#data: Uint8Array;\n\t#client?: SuiGraphQLClient;\n\t#legacyAddress: boolean;\n\n\t/**\n\t * Create a new ZkLoginPublicIdentifier object\n\t * @param value zkLogin public identifier as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData, { client }: { client?: SuiGraphQLClient } = {}) {\n\t\tsuper();\n\n\t\tthis.#client = client;\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.#data = fromBase64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.#data = value;\n\t\t} else {\n\t\t\tthis.#data = Uint8Array.from(value);\n\t\t}\n\t\tthis.#legacyAddress = this.#data.length !== this.#data[0] + 1 + 32;\n\n\t\tif (this.#legacyAddress) {\n\t\t\tthis.#data = normalizeZkLoginPublicKeyBytes(this.#data);\n\t\t}\n\t}\n\n\tstatic fromProof(address: string, proof: ZkLoginSignatureInputs) {\n\t\tconst { issBase64Details, addressSeed } = proof;\n\t\tconst iss = extractClaimValue<string>(issBase64Details, 'iss');\n\n\t\tconst legacyPublicKey = toZkLoginPublicIdentifier(BigInt(addressSeed), iss, {\n\t\t\tlegacyAddress: true,\n\t\t});\n\n\t\tif (legacyPublicKey.toSuiAddress() === address) {\n\t\t\treturn legacyPublicKey;\n\t\t}\n\n\t\tconst publicKey = toZkLoginPublicIdentifier(BigInt(addressSeed), iss, {\n\t\t\tlegacyAddress: false,\n\t\t});\n\n\t\tif (publicKey.toSuiAddress() !== address) {\n\t\t\tthrow new Error('Proof does not match address');\n\t\t}\n\n\t\treturn publicKey;\n\t}\n\n\t/**\n\t * Checks if two zkLogin public identifiers are equal\n\t */\n\toverride equals(publicKey: ZkLoginPublicIdentifier): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\toverride toSuiAddress(): string {\n\t\tif (this.#legacyAddress) {\n\t\t\treturn this.#toLegacyAddress();\n\t\t}\n\n\t\treturn super.toSuiAddress();\n\t}\n\n\t#toLegacyAddress() {\n\t\tconst legacyBytes = normalizeZkLoginPublicKeyBytes(this.#data, true);\n\t\tconst addressBytes = new Uint8Array(legacyBytes.length + 1);\n\t\taddressBytes[0] = this.flag();\n\t\taddressBytes.set(legacyBytes, 1);\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(addressBytes, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the byte array representation of the zkLogin public identifier\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.#data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this ZkLogin public identifier\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['ZkLogin'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(_message: Uint8Array, _signature: Uint8Array | string): Promise<boolean> {\n\t\tthrow Error('does not support');\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided PersonalMessage\n\t */\n\tverifyPersonalMessage(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\tconst parsedSignature = parseSerializedZkLoginSignature(signature);\n\t\tconst address = new ZkLoginPublicIdentifier(parsedSignature.publicKey).toSuiAddress();\n\n\t\treturn graphqlVerifyZkLoginSignature({\n\t\t\taddress: address,\n\t\t\tbytes: toBase64(message),\n\t\t\tsignature: parsedSignature.serializedSignature,\n\t\t\tintentScope: 'PERSONAL_MESSAGE',\n\t\t\tclient: this.#client,\n\t\t});\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided Transaction\n\t */\n\tverifyTransaction(transaction: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\tconst parsedSignature = parseSerializedZkLoginSignature(signature);\n\t\tconst address = new ZkLoginPublicIdentifier(parsedSignature.publicKey).toSuiAddress();\n\t\treturn graphqlVerifyZkLoginSignature({\n\t\t\taddress: address,\n\t\t\tbytes: toBase64(transaction),\n\t\t\tsignature: parsedSignature.serializedSignature,\n\t\t\tintentScope: 'TRANSACTION_DATA',\n\t\t\tclient: this.#client,\n\t\t});\n\t}\n\n\t/**\n\t * Verifies that the public key is associated with the provided address\n\t */\n\toverride verifyAddress(address: string): boolean {\n\t\treturn address === super.toSuiAddress() || address === this.#toLegacyAddress();\n\t}\n}\n\n// Derive the public identifier for zklogin based on address seed and iss.\nexport function toZkLoginPublicIdentifier(\n\taddressSeed: bigint,\n\tiss: string,\n\toptions?: { client?: SuiGraphQLClient; legacyAddress?: boolean },\n): ZkLoginPublicIdentifier {\n\t// Consists of iss_bytes_len || iss_bytes || padded_32_byte_address_seed.\n\tconst addressSeedBytesBigEndian = options?.legacyAddress\n\t\t? toBigEndianBytes(addressSeed, 32)\n\t\t: toPaddedBigEndianBytes(addressSeed, 32);\n\n\tconst issBytes = new TextEncoder().encode(normalizeZkLoginIssuer(iss));\n\tconst tmp = new Uint8Array(1 + issBytes.length + addressSeedBytesBigEndian.length);\n\ttmp.set([issBytes.length], 0);\n\ttmp.set(issBytes, 1);\n\ttmp.set(addressSeedBytesBigEndian, 1 + issBytes.length);\n\treturn new ZkLoginPublicIdentifier(tmp, options);\n}\n\nconst VerifyZkLoginSignatureQuery = graphql(`\n\tquery Zklogin(\n\t\t$bytes: Base64!\n\t\t$signature: Base64!\n\t\t$intentScope: ZkLoginIntentScope!\n\t\t$author: SuiAddress!\n\t) {\n\t\tverifyZkloginSignature(\n\t\t\tbytes: $bytes\n\t\t\tsignature: $signature\n\t\t\tintentScope: $intentScope\n\t\t\tauthor: $author\n\t\t) {\n\t\t\tsuccess\n\t\t\terrors\n\t\t}\n\t}\n`);\n\nfunction normalizeZkLoginPublicKeyBytes(bytes: Uint8Array, legacyAddress = false) {\n\tconst issByteLength = bytes[0] + 1;\n\tconst addressSeed = BigInt(`0x${toHex(bytes.slice(issByteLength))}`);\n\tconst seedBytes = legacyAddress\n\t\t? toBigEndianBytes(addressSeed, 32)\n\t\t: toPaddedBigEndianBytes(addressSeed, 32);\n\tconst data = new Uint8Array(issByteLength + seedBytes.length);\n\tdata.set(bytes.slice(0, issByteLength), 0);\n\tdata.set(seedBytes, issByteLength);\n\treturn data;\n}\n\nasync function graphqlVerifyZkLoginSignature({\n\taddress,\n\tbytes,\n\tsignature,\n\tintentScope,\n\tclient = new SuiGraphQLClient({\n\t\turl: 'https://sui-mainnet.mystenlabs.com/graphql',\n\t}),\n}: {\n\taddress: string;\n\tbytes: string;\n\tsignature: string;\n\tintentScope: 'PERSONAL_MESSAGE' | 'TRANSACTION_DATA';\n\tclient?: SuiGraphQLClient;\n}) {\n\tconst resp = await client.query({\n\t\tquery: VerifyZkLoginSignatureQuery,\n\t\tvariables: {\n\t\t\tbytes,\n\t\t\tsignature,\n\t\t\tintentScope,\n\t\t\tauthor: address,\n\t\t},\n\t});\n\n\treturn (\n\t\tresp.data?.verifyZkloginSignature.success === true &&\n\t\tresp.data?.verifyZkloginSignature.errors.length === 0\n\t);\n}\n\nexport function parseSerializedZkLoginSignature(signature: Uint8Array | string) {\n\tconst bytes = typeof signature === 'string' ? fromBase64(signature) : signature;\n\n\tif (bytes[0] !== SIGNATURE_SCHEME_TO_FLAG.ZkLogin) {\n\t\tthrow new Error('Invalid signature scheme');\n\t}\n\n\tconst signatureBytes = bytes.slice(1);\n\tconst { inputs, maxEpoch, userSignature } = parseZkLoginSignature(signatureBytes);\n\tconst { issBase64Details, addressSeed } = inputs;\n\tconst iss = extractClaimValue<string>(issBase64Details, 'iss');\n\tconst publicIdentifer = toZkLoginPublicIdentifier(BigInt(addressSeed), iss);\n\treturn {\n\t\tserializedSignature: toBase64(bytes),\n\t\tsignatureScheme: 'ZkLogin' as const,\n\t\tzkLogin: {\n\t\t\tinputs,\n\t\t\tmaxEpoch,\n\t\t\tuserSignature,\n\t\t\tiss,\n\t\t\taddressSeed: BigInt(addressSeed),\n\t\t},\n\t\tsignature: bytes,\n\t\tpublicKey: publicIdentifer.toRawBytes(),\n\t};\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6474, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/cryptography/signature.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64 } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport { parseSerializedPasskeySignature } from '../keypairs/passkey/publickey.js';\nimport type { MultiSigStruct } from '../multisig/publickey.js';\nimport { parseSerializedZkLoginSignature } from '../zklogin/publickey.js';\nimport { parseSerializedKeypairSignature } from './publickey.js';\nimport type { PublicKey } from './publickey.js';\nimport type { SignatureScheme } from './signature-scheme.js';\nimport { SIGNATURE_FLAG_TO_SCHEME, SIGNATURE_SCHEME_TO_FLAG } from './signature-scheme.js';\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SerializeSignatureInput = {\n\tsignatureScheme: SignatureScheme;\n\t/** Base64-encoded signature */\n\tsignature: Uint8Array;\n\t/** Base64-encoded public key */\n\tpublicKey?: PublicKey;\n};\n\n/**\n * Takes in a signature, its associated signing scheme and a public key, then serializes this data\n */\nexport function toSerializedSignature({\n\tsignature,\n\tsignatureScheme,\n\tpublicKey,\n}: SerializeSignatureInput): string {\n\tif (!publicKey) {\n\t\tthrow new Error('`publicKey` is required');\n\t}\n\n\tconst pubKeyBytes = publicKey.toRawBytes();\n\tconst serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);\n\tserializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n\tserializedSignature.set(signature, 1);\n\tserializedSignature.set(pubKeyBytes, 1 + signature.length);\n\treturn toBase64(serializedSignature);\n}\n\n/**\n * Decodes a serialized signature into its constituent components: the signature scheme, the actual signature, and the public key\n */\nexport function parseSerializedSignature(serializedSignature: string) {\n\tconst bytes = fromBase64(serializedSignature);\n\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n\tswitch (signatureScheme) {\n\t\tcase 'Passkey':\n\t\t\treturn parseSerializedPasskeySignature(serializedSignature);\n\t\tcase 'MultiSig':\n\t\t\tconst multisig: MultiSigStruct = bcs.MultiSig.parse(bytes.slice(1));\n\t\t\treturn {\n\t\t\t\tserializedSignature,\n\t\t\t\tsignatureScheme,\n\t\t\t\tmultisig,\n\t\t\t\tbytes,\n\t\t\t\tsignature: undefined,\n\t\t\t};\n\t\tcase 'ZkLogin':\n\t\t\treturn parseSerializedZkLoginSignature(serializedSignature);\n\t\tcase 'ED25519':\n\t\tcase 'Secp256k1':\n\t\tcase 'Secp256r1':\n\t\t\treturn parseSerializedKeypairSignature(serializedSignature);\n\t\tdefault:\n\t\t\tthrow new Error('Unsupported signature scheme');\n\t}\n}\n"],"names":[],"mappings":";;;;AAGA,SAAS,YAAY,gBAAgB;AAErC,SAAS,WAAW;AACpB,SAAS,uCAAuC;AAEhD,SAAS,uCAAuC;AAChD,SAAS,uCAAuC;AAGhD,SAAS,0BAA0B,gCAAgC;;;;;;;AAgB5D,SAAS,2BAIhB;UAHC,SAAA,EACA,eAAA,EACA,SAAA,EACD,EAAoC,CAJE;IAKrC,IAAI,CAAC,WAAW;QACf,MAAM,IAAI,MAAM,yBAAyB;IAC1C;IAEA,MAAM,cAAc,UAAU,UAAA,CAAW;IACzC,MAAM,sBAAsB,IAAI,WAAW,IAAI,UAAU,MAAA,GAAS,YAAY,MAAM;IACpF,oBAAoB,GAAA,CAAI;QAAC,yPAAA,CAAyB,eAAe,CAAC;KAAC;IACnE,oBAAoB,GAAA,CAAI,WAAW,CAAC;IACpC,oBAAoB,GAAA,CAAI,aAAa,IAAI,UAAU,MAAM;IACzD,OAAO,6MAAA,EAAS,mBAAmB;AACpC;AAKO,SAAS,yBAAyB,mBAAA,EAA6B;IACrE,MAAM,0MAAQ,aAAA,EAAW,mBAAmB;IAE5C,MAAM,+OACL,4BAAA,CAAyB,KAAA,CAAM,CAAC,CAA0C,CAAA;IAE3E,OAAQ,iBAAiB;QACxB,KAAK;YACJ,sOAAO,kCAAA,EAAgC,mBAAmB;QAC3D,KAAK;YACJ,MAAM,kOAA2B,MAAA,CAAI,QAAA,CAAS,KAAA,CAAM,MAAM,KAAA,CAAM,CAAC,CAAC;YAClE,OAAO;gBACN;gBACA;gBACA;gBACA;gBACA,WAAW,KAAA;YACZ;QACD,KAAK;YACJ,0NAAO,kCAAA,EAAgC,mBAAmB;QAC3D,KAAK;QACL,KAAK;QACL,KAAK;YACJ,+NAAO,kCAAA,EAAgC,mBAAmB;QAC3D;YACC,MAAM,IAAI,MAAM,8BAA8B;IAChD;AACD","debugId":null}},
    {"offset": {"line": 6535, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/keypairs/ed25519/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64 } from '@mysten/bcs';\nimport { ed25519 } from '@noble/curves/ed25519';\n\nimport {\n\tbytesEqual,\n\tparseSerializedKeypairSignature,\n\tPublicKey,\n} from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature-scheme.js';\n\nconst PUBLIC_KEY_SIZE = 32;\n\n/**\n * An Ed25519 public key\n */\nexport class Ed25519PublicKey extends PublicKey {\n\tstatic SIZE = PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Ed25519PublicKey object\n\t * @param value ed25519 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromBase64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Ed25519 public keys are equal\n\t */\n\toverride equals(publicKey: Ed25519PublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Ed25519 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['ED25519'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\tlet bytes;\n\t\tif (typeof signature === 'string') {\n\t\t\tconst parsed = parseSerializedKeypairSignature(signature);\n\t\t\tif (parsed.signatureScheme !== 'ED25519') {\n\t\t\t\tthrow new Error('Invalid signature scheme');\n\t\t\t}\n\n\t\t\tif (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n\t\t\t\tthrow new Error('Signature does not match public key');\n\t\t\t}\n\n\t\t\tbytes = parsed.signature;\n\t\t} else {\n\t\t\tbytes = signature;\n\t\t}\n\n\t\treturn ed25519.verify(bytes, message, this.toRawBytes());\n\t}\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,kBAAkB;AAC3B,SAAS,eAAe;AAExB;AAMA,SAAS,gCAAgC;;;;;AAEzC,MAAM,kBAAkB;AAKjB,MAAM,6OAAyB,YAAA,CAAU;IAwB/C;;GAAA,GAKS,OAAO,SAAA,EAAsC;QACrD,OAAO,KAAA,CAAM,OAAO,SAAS;IAC9B;IAAA;;GAAA,GAKA,aAAyB;QACxB,OAAO,IAAA,CAAK,IAAA;IACb;IAAA;;GAAA,GAKA,OAAe;QACd,qOAAO,2BAAA,CAAyB,SAAS,CAAA;IAC1C;IAAA;;GAAA,GAKA,MAAM,OAAO,OAAA,EAAqB,SAAA,EAAkD;QACnF,IAAI;QACJ,IAAI,OAAO,cAAc,UAAU;YAClC,MAAM,iOAAS,kCAAA,EAAgC,SAAS;YACxD,IAAI,OAAO,eAAA,KAAoB,WAAW;gBACzC,MAAM,IAAI,MAAM,0BAA0B;YAC3C;YAEA,IAAI,yNAAC,aAAA,EAAW,IAAA,CAAK,UAAA,CAAW,GAAG,OAAO,SAAS,GAAG;gBACrD,MAAM,IAAI,MAAM,qCAAqC;YACtD;YAEA,QAAQ,OAAO,SAAA;QAChB,OAAO;YACN,QAAQ;QACT;QAEA,uJAAO,UAAA,CAAQ,MAAA,CAAO,OAAO,SAAS,IAAA,CAAK,UAAA,CAAW,CAAC;IACxD;IApE+C;;;GAAA,GAQ/C,YAAY,KAAA,CAA0B;QACrC,KAAA,CAAM;QAEN,IAAI,OAAO,UAAU,UAAU;YAC9B,IAAA,CAAK,IAAA,qMAAO,aAAA,EAAW,KAAK;QAC7B,OAAA,IAAW,iBAAiB,YAAY;YACvC,IAAA,CAAK,IAAA,GAAO;QACb,OAAO;YACN,IAAA,CAAK,IAAA,GAAO,WAAW,IAAA,CAAK,KAAK;QAClC;QAEA,IAAI,IAAA,CAAK,IAAA,CAAK,MAAA,KAAW,iBAAiB;YACzC,MAAM,IAAI,MACT,6CAAsC,eAAe,EAAA,gBAA+B,OAAhB,IAAA,CAAK,IAAA,CAAK,MAAM;QAEtF;IACD;AA6CD;AArEa,iBACL,IAAA,GAAO","debugId":null}},
    {"offset": {"line": 6605, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/keypairs/secp256k1/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64 } from '@mysten/bcs';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport {\n\tbytesEqual,\n\tparseSerializedKeypairSignature,\n\tPublicKey,\n} from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature-scheme.js';\n\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey extends PublicKey {\n\tstatic SIZE = SECP256K1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256k1PublicKey object\n\t * @param value secp256k1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromBase64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256k1 public keys are equal\n\t */\n\toverride equals(publicKey: Secp256k1PublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256k1 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256k1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256k1'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\tlet bytes;\n\t\tif (typeof signature === 'string') {\n\t\t\tconst parsed = parseSerializedKeypairSignature(signature);\n\t\t\tif (parsed.signatureScheme !== 'Secp256k1') {\n\t\t\t\tthrow new Error('Invalid signature scheme');\n\t\t\t}\n\n\t\t\tif (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n\t\t\t\tthrow new Error('Signature does not match public key');\n\t\t\t}\n\n\t\t\tbytes = parsed.signature;\n\t\t} else {\n\t\t\tbytes = signature;\n\t\t}\n\n\t\treturn secp256k1.verify(\n\t\t\tsecp256k1.Signature.fromCompact(bytes),\n\t\t\tsha256(message),\n\t\t\tthis.toRawBytes(),\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,cAAc;AAEvB;AAMA,SAAS,gCAAgC;;;;;;AAEzC,MAAM,4BAA4B;AAK3B,MAAM,+OAA2B,YAAA,CAAU;IAwBjD;;GAAA,GAKS,OAAO,SAAA,EAAwC;QACvD,OAAO,KAAA,CAAM,OAAO,SAAS;IAC9B;IAAA;;GAAA,GAKA,aAAyB;QACxB,OAAO,IAAA,CAAK,IAAA;IACb;IAAA;;GAAA,GAKA,OAAe;QACd,qOAAO,2BAAA,CAAyB,WAAW,CAAA;IAC5C;IAAA;;GAAA,GAKA,MAAM,OAAO,OAAA,EAAqB,SAAA,EAAkD;QACnF,IAAI;QACJ,IAAI,OAAO,cAAc,UAAU;YAClC,MAAM,iOAAS,kCAAA,EAAgC,SAAS;YACxD,IAAI,OAAO,eAAA,KAAoB,aAAa;gBAC3C,MAAM,IAAI,MAAM,0BAA0B;YAC3C;YAEA,IAAI,yNAAC,aAAA,EAAW,IAAA,CAAK,UAAA,CAAW,GAAG,OAAO,SAAS,GAAG;gBACrD,MAAM,IAAI,MAAM,qCAAqC;YACtD;YAEA,QAAQ,OAAO,SAAA;QAChB,OAAO;YACN,QAAQ;QACT;QAEA,yJAAO,YAAA,CAAU,MAAA,mJAChB,YAAA,CAAU,SAAA,CAAU,WAAA,CAAY,KAAK,sJACrC,SAAA,EAAO,OAAO,GACd,IAAA,CAAK,UAAA,CAAW;IAElB;IAxEiD;;;GAAA,GAQjD,YAAY,KAAA,CAA0B;QACrC,KAAA,CAAM;QAEN,IAAI,OAAO,UAAU,UAAU;YAC9B,IAAA,CAAK,IAAA,qMAAO,aAAA,EAAW,KAAK;QAC7B,OAAA,IAAW,iBAAiB,YAAY;YACvC,IAAA,CAAK,IAAA,GAAO;QACb,OAAO;YACN,IAAA,CAAK,IAAA,GAAO,WAAW,IAAA,CAAK,KAAK;QAClC;QAEA,IAAI,IAAA,CAAK,IAAA,CAAK,MAAA,KAAW,2BAA2B;YACnD,MAAM,IAAI,MACT,6CAAsC,yBAAyB,EAAA,gBAA+B,OAAhB,IAAA,CAAK,IAAA,CAAK,MAAM;QAEhG;IACD;AAiDD;AAzEa,mBACL,IAAA,GAAO","debugId":null}},
    {"offset": {"line": 6677, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/keypairs/secp256r1/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64 } from '@mysten/bcs';\nimport { secp256r1 } from '@noble/curves/p256';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport { bytesEqual, PublicKey } from '../../cryptography/publickey.js';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature-scheme.js';\nimport { parseSerializedSignature } from '../../cryptography/signature.js';\n\nconst SECP256R1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256r1 public key\n */\nexport class Secp256r1PublicKey extends PublicKey {\n\tstatic SIZE = SECP256R1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256r1PublicKey object\n\t * @param value secp256r1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromBase64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256R1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256R1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256r1 public keys are equal\n\t */\n\toverride equals(publicKey: Secp256r1PublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256r1 public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256r1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256r1'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, signature: Uint8Array | string): Promise<boolean> {\n\t\tlet bytes;\n\t\tif (typeof signature === 'string') {\n\t\t\tconst parsed = parseSerializedSignature(signature);\n\t\t\tif (parsed.signatureScheme !== 'Secp256r1') {\n\t\t\t\tthrow new Error('Invalid signature scheme');\n\t\t\t}\n\n\t\t\tif (!bytesEqual(this.toRawBytes(), parsed.publicKey)) {\n\t\t\t\tthrow new Error('Signature does not match public key');\n\t\t\t}\n\n\t\t\tbytes = parsed.signature;\n\t\t} else {\n\t\t\tbytes = signature;\n\t\t}\n\n\t\treturn secp256r1.verify(\n\t\t\tsecp256r1.Signature.fromCompact(bytes),\n\t\t\tsha256(message),\n\t\t\tthis.toRawBytes(),\n\t\t);\n\t}\n}\n"],"names":[],"mappings":";;;AAGA,SAAS,kBAAkB;AAC3B,SAAS,iBAAiB;AAC1B,SAAS,cAAc;AAEvB,SAAS,YAAY,iBAAiB;AAEtC,SAAS,gCAAgC;AACzC,SAAS,gCAAgC;;;;;;;AAEzC,MAAM,4BAA4B;AAK3B,MAAM,+OAA2B,YAAA,CAAU;IAwBjD;;GAAA,GAKS,OAAO,SAAA,EAAwC;QACvD,OAAO,KAAA,CAAM,OAAO,SAAS;IAC9B;IAAA;;GAAA,GAKA,aAAyB;QACxB,OAAO,IAAA,CAAK,IAAA;IACb;IAAA;;GAAA,GAKA,OAAe;QACd,qOAAO,2BAAA,CAAyB,WAAW,CAAA;IAC5C;IAAA;;GAAA,GAKA,MAAM,OAAO,OAAA,EAAqB,SAAA,EAAkD;QACnF,IAAI;QACJ,IAAI,OAAO,cAAc,UAAU;YAClC,MAAM,iOAAS,2BAAA,EAAyB,SAAS;YACjD,IAAI,OAAO,eAAA,KAAoB,aAAa;gBAC3C,MAAM,IAAI,MAAM,0BAA0B;YAC3C;YAEA,IAAI,yNAAC,aAAA,EAAW,IAAA,CAAK,UAAA,CAAW,GAAG,OAAO,SAAS,GAAG;gBACrD,MAAM,IAAI,MAAM,qCAAqC;YACtD;YAEA,QAAQ,OAAO,SAAA;QAChB,OAAO;YACN,QAAQ;QACT;QAEA,oJAAO,YAAA,CAAU,MAAA,8IAChB,YAAA,CAAU,SAAA,CAAU,WAAA,CAAY,KAAK,sJACrC,SAAA,EAAO,OAAO,GACd,IAAA,CAAK,UAAA,CAAW;IAElB;IAxEiD;;;GAAA,GAQjD,YAAY,KAAA,CAA0B;QACrC,KAAA,CAAM;QAEN,IAAI,OAAO,UAAU,UAAU;YAC9B,IAAA,CAAK,IAAA,qMAAO,aAAA,EAAW,KAAK;QAC7B,OAAA,IAAW,iBAAiB,YAAY;YACvC,IAAA,CAAK,IAAA,GAAO;QACb,OAAO;YACN,IAAA,CAAK,IAAA,GAAO,WAAW,IAAA,CAAK,KAAK;QAClC;QAEA,IAAI,IAAA,CAAK,IAAA,CAAK,MAAA,KAAW,2BAA2B;YACnD,MAAM,IAAI,MACT,6CAAsC,yBAAyB,EAAA,gBAA+B,OAAhB,IAAA,CAAK,IAAA,CAAK,MAAM;QAEhG;IACD;AAiDD;AAzEa,mBACL,IAAA,GAAO","debugId":null}},
    {"offset": {"line": 6751, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/cryptography/keypair.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs, toBase64 } from '@mysten/bcs';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bech32 } from '@scure/base';\n\nimport type { IntentScope } from './intent.js';\nimport { messageWithIntent } from './intent.js';\nimport type { PublicKey } from './publickey.js';\nimport { SIGNATURE_FLAG_TO_SCHEME, SIGNATURE_SCHEME_TO_FLAG } from './signature-scheme.js';\nimport type { SignatureScheme } from './signature-scheme.js';\nimport { toSerializedSignature } from './signature.js';\n\nexport const PRIVATE_KEY_SIZE = 32;\nexport const LEGACY_PRIVATE_KEY_SIZE = 64;\nexport const SUI_PRIVATE_KEY_PREFIX = 'suiprivkey';\n\nexport type ParsedKeypair = {\n\tschema: SignatureScheme;\n\tsecretKey: Uint8Array;\n};\n\nexport interface SignatureWithBytes {\n\tbytes: string;\n\tsignature: string;\n}\n\n/**\n * TODO: Document\n */\nexport abstract class Signer {\n\tabstract sign(bytes: Uint8Array): Promise<Uint8Array>;\n\t/**\n\t * Sign messages with a specific intent. By combining the message bytes with the intent before hashing and signing,\n\t * it ensures that a signed message is tied to a specific purpose and domain separator is provided\n\t */\n\tasync signWithIntent(bytes: Uint8Array, intent: IntentScope): Promise<SignatureWithBytes> {\n\t\tconst intentMessage = messageWithIntent(intent, bytes);\n\t\tconst digest = blake2b(intentMessage, { dkLen: 32 });\n\n\t\tconst signature = toSerializedSignature({\n\t\t\tsignature: await this.sign(digest),\n\t\t\tsignatureScheme: this.getKeyScheme(),\n\t\t\tpublicKey: this.getPublicKey(),\n\t\t});\n\n\t\treturn {\n\t\t\tsignature,\n\t\t\tbytes: toBase64(bytes),\n\t\t};\n\t}\n\t/**\n\t * Signs provided transaction by calling `signWithIntent()` with a `TransactionData` provided as intent scope\n\t */\n\tasync signTransaction(bytes: Uint8Array) {\n\t\treturn this.signWithIntent(bytes, 'TransactionData');\n\t}\n\t/**\n\t * Signs provided personal message by calling `signWithIntent()` with a `PersonalMessage` provided as intent scope\n\t */\n\tasync signPersonalMessage(bytes: Uint8Array) {\n\t\tconst { signature } = await this.signWithIntent(\n\t\t\tbcs.vector(bcs.u8()).serialize(bytes).toBytes(),\n\t\t\t'PersonalMessage',\n\t\t);\n\n\t\treturn {\n\t\t\tbytes: toBase64(bytes),\n\t\t\tsignature,\n\t\t};\n\t}\n\n\ttoSuiAddress(): string {\n\t\treturn this.getPublicKey().toSuiAddress();\n\t}\n\n\t/**\n\t * Get the key scheme of the keypair: Secp256k1 or ED25519\n\t */\n\tabstract getKeyScheme(): SignatureScheme;\n\n\t/**\n\t * The public key for this keypair\n\t */\n\tabstract getPublicKey(): PublicKey;\n}\n\nexport abstract class Keypair extends Signer {\n\t/**\n\t * This returns the Bech32 secret key string for this keypair.\n\t */\n\tabstract getSecretKey(): string;\n}\n\n/**\n * This returns an ParsedKeypair object based by validating the\n * 33-byte Bech32 encoded string starting with `suiprivkey`, and\n * parse out the signature scheme and the private key in bytes.\n */\nexport function decodeSuiPrivateKey(value: string): ParsedKeypair {\n\tconst { prefix, words } = bech32.decode(value as `${string}1${string}`);\n\tif (prefix !== SUI_PRIVATE_KEY_PREFIX) {\n\t\tthrow new Error('invalid private key prefix');\n\t}\n\tconst extendedSecretKey = new Uint8Array(bech32.fromWords(words));\n\tconst secretKey = extendedSecretKey.slice(1);\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[extendedSecretKey[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\treturn {\n\t\tschema: signatureScheme,\n\t\tsecretKey: secretKey,\n\t};\n}\n\n/**\n * This returns a Bech32 encoded string starting with `suiprivkey`,\n * encoding 33-byte `flag || bytes` for the given the 32-byte private\n * key and its signature scheme.\n */\nexport function encodeSuiPrivateKey(bytes: Uint8Array, scheme: SignatureScheme): string {\n\tif (bytes.length !== PRIVATE_KEY_SIZE) {\n\t\tthrow new Error('Invalid bytes length');\n\t}\n\tconst flag = SIGNATURE_SCHEME_TO_FLAG[scheme];\n\tconst privKeyBytes = new Uint8Array(bytes.length + 1);\n\tprivKeyBytes.set([flag]);\n\tprivKeyBytes.set(bytes, 1);\n\treturn bech32.encode(SUI_PRIVATE_KEY_PREFIX, bech32.toWords(privKeyBytes));\n}\n"],"names":[],"mappings":";;;;;;;;;AAGA,SAAS,KAAK,gBAAgB;;AAC9B,SAAS,eAAe;AACxB,SAAS,cAAc;AAGvB,SAAS,yBAAyB;AAElC,SAAS,0BAA0B,gCAAgC;AAEnE,SAAS,6BAA6B;;;;;;;AAE/B,MAAM,mBAAmB;AACzB,MAAM,0BAA0B;AAChC,MAAM,yBAAyB;AAe/B,MAAe,OAAO;IAAA;;;GAAA,GAM5B,MAAM,eAAe,KAAA,EAAmB,MAAA,EAAkD;QACzF,MAAM,iBAAgB,wOAAA,EAAkB,QAAQ,KAAK;QACrD,MAAM,6JAAS,UAAA,EAAQ,eAAe;YAAE,OAAO;QAAG,CAAC;QAEnD,MAAM,oOAAY,wBAAA,EAAsB;YACvC,WAAW,MAAM,IAAA,CAAK,IAAA,CAAK,MAAM;YACjC,iBAAiB,IAAA,CAAK,YAAA,CAAa;YACnC,WAAW,IAAA,CAAK,YAAA,CAAa;QAC9B,CAAC;QAED,OAAO;YACN;YACA,yMAAO,WAAA,EAAS,KAAK;QACtB;IACD;IAAA;;GAAA,GAIA,MAAM,gBAAgB,KAAA,EAAmB;QACxC,OAAO,IAAA,CAAK,cAAA,CAAe,OAAO,iBAAiB;IACpD;IAAA;;GAAA,GAIA,MAAM,oBAAoB,KAAA,EAAmB;QAC5C,MAAM,EAAE,SAAA,CAAU,CAAA,GAAI,MAAM,IAAA,CAAK,cAAA,+LAChC,MAAA,CAAI,MAAA,8LAAO,OAAA,CAAI,EAAA,CAAG,CAAC,EAAE,SAAA,CAAU,KAAK,EAAE,OAAA,CAAQ,GAC9C;QAGD,OAAO;YACN,yMAAO,WAAA,EAAS,KAAK;YACrB;QACD;IACD;IAEA,eAAuB;QACtB,OAAO,IAAA,CAAK,YAAA,CAAa,EAAE,YAAA,CAAa;IACzC;AAWD;AAEO,MAAe,gBAAgB,OAAO;AAK7C;AAOO,SAAS,oBAAoB,KAAA,EAA8B;IACjE,MAAM,EAAE,MAAA,EAAQ,KAAA,CAAM,CAAA,qJAAI,UAAA,CAAO,MAAA,CAAO,KAA8B;IACtE,IAAI,WAAW,wBAAwB;QACtC,MAAM,IAAI,MAAM,4BAA4B;IAC7C;IACA,MAAM,oBAAoB,IAAI,6JAAW,UAAA,CAAO,SAAA,CAAU,KAAK,CAAC;IAChE,MAAM,YAAY,kBAAkB,KAAA,CAAM,CAAC;IAC3C,MAAM,gPACL,2BAAA,CAAyB,iBAAA,CAAkB,CAAC,CAA0C,CAAA;IACvF,OAAO;QACN,QAAQ;QACR;IACD;AACD;AAOO,SAAS,oBAAoB,KAAA,EAAmB,MAAA,EAAiC;IACvF,IAAI,MAAM,MAAA,KAAW,kBAAkB;QACtC,MAAM,IAAI,MAAM,sBAAsB;IACvC;IACA,MAAM,qOAAO,2BAAA,CAAyB,MAAM,CAAA;IAC5C,MAAM,eAAe,IAAI,WAAW,MAAM,MAAA,GAAS,CAAC;IACpD,aAAa,GAAA,CAAI;QAAC,IAAI;KAAC;IACvB,aAAa,GAAA,CAAI,OAAO,CAAC;IACzB,0JAAO,SAAA,CAAO,MAAA,CAAO,2KAAwB,SAAA,CAAO,OAAA,CAAQ,YAAY,CAAC;AAC1E","debugId":null}},
    {"offset": {"line": 6846, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/multisig/signer.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { toBase64 } from '@mysten/bcs';\n\nimport type { SignatureScheme } from '../cryptography/index.js';\nimport { Signer } from '../cryptography/index.js';\nimport type { MultiSigPublicKey } from './publickey.js';\n\nexport class MultiSigSigner extends Signer {\n\t#pubkey: MultiSigPublicKey;\n\t#signers: Signer[];\n\n\tconstructor(pubkey: MultiSigPublicKey, signers: Signer[] = []) {\n\t\tsuper();\n\t\tthis.#pubkey = pubkey;\n\t\tthis.#signers = signers;\n\n\t\tconst uniqueKeys = new Set();\n\t\tlet combinedWeight = 0;\n\n\t\tconst weights = pubkey.getPublicKeys().map(({ weight, publicKey }) => ({\n\t\t\tweight,\n\t\t\taddress: publicKey.toSuiAddress(),\n\t\t}));\n\n\t\tfor (const signer of signers) {\n\t\t\tconst address = signer.toSuiAddress();\n\t\t\tif (uniqueKeys.has(address)) {\n\t\t\t\tthrow new Error(`Can't create MultiSigSigner with duplicate signers`);\n\t\t\t}\n\t\t\tuniqueKeys.add(address);\n\n\t\t\tconst weight = weights.find((w) => w.address === address)?.weight;\n\n\t\t\tif (!weight) {\n\t\t\t\tthrow new Error(`Signer ${address} is not part of the MultiSig public key`);\n\t\t\t}\n\n\t\t\tcombinedWeight += weight;\n\t\t}\n\n\t\tif (combinedWeight < pubkey.getThreshold()) {\n\t\t\tthrow new Error(`Combined weight of signers is less than threshold`);\n\t\t}\n\t}\n\n\tgetKeyScheme(): SignatureScheme {\n\t\treturn 'MultiSig';\n\t}\n\n\tgetPublicKey(): MultiSigPublicKey {\n\t\treturn this.#pubkey;\n\t}\n\n\tsign(_data: Uint8Array): never {\n\t\tthrow new Error(\n\t\t\t'MultiSigSigner does not support signing directly. Use signTransaction or signPersonalMessage instead',\n\t\t);\n\t}\n\n\tsignData(_data: Uint8Array): never {\n\t\tthrow new Error(\n\t\t\t'MultiSigSigner does not support signing directly. Use signTransaction or signPersonalMessage instead',\n\t\t);\n\t}\n\n\tasync signTransaction(bytes: Uint8Array) {\n\t\tconst signature = this.#pubkey.combinePartialSignatures(\n\t\t\tawait Promise.all(\n\t\t\t\tthis.#signers.map(async (signer) => (await signer.signTransaction(bytes)).signature),\n\t\t\t),\n\t\t);\n\n\t\treturn {\n\t\t\tsignature,\n\t\t\tbytes: toBase64(bytes),\n\t\t};\n\t}\n\n\tasync signPersonalMessage(bytes: Uint8Array) {\n\t\tconst signature = this.#pubkey.combinePartialSignatures(\n\t\t\tawait Promise.all(\n\t\t\t\tthis.#signers.map(async (signer) => (await signer.signPersonalMessage(bytes)).signature),\n\t\t\t),\n\t\t);\n\n\t\treturn {\n\t\t\tsignature,\n\t\t\tbytes: toBase64(bytes),\n\t\t};\n\t}\n}\n"],"names":[],"mappings":";;;AAEA,SAAS,gBAAgB;AAGzB,SAAS,cAAc;;;;;;;;AALvB,IAAA,SAAA;;;AAQO,MAAM,yOAAuB,SAAA,CAAO;IAsC1C,eAAgC;QAC/B,OAAO;IACR;IAEA,eAAkC;QACjC,OAAO,aAAA,IAAA,EAAK;IACb;IAEA,KAAK,KAAA,EAA0B;QAC9B,MAAM,IAAI,MACT;IAEF;IAEA,SAAS,KAAA,EAA0B;QAClC,MAAM,IAAI,MACT;IAEF;IAEA,MAAM,gBAAgB,KAAA,EAAmB;QACxC,MAAM,YAAY,aAAA,IAAA,EAAK,SAAQ,wBAAA,CAC9B,MAAM,QAAQ,GAAA,CACb,aAAA,IAAA,EAAK,UAAS,GAAA,CAAI,OAAO,SAAA,CAAY,MAAM,OAAO,eAAA,CAAgB,KAAK,CAAA,EAAG,SAAS;QAIrF,OAAO;YACN;YACA,yMAAO,WAAA,EAAS,KAAK;QACtB;IACD;IAEA,MAAM,oBAAoB,KAAA,EAAmB;QAC5C,MAAM,YAAY,aAAA,IAAA,EAAK,SAAQ,wBAAA,CAC9B,MAAM,QAAQ,GAAA,CACb,aAAA,IAAA,EAAK,UAAS,GAAA,CAAI,OAAO,SAAA,CAAY,MAAM,OAAO,mBAAA,CAAoB,KAAK,CAAA,EAAG,SAAS;QAIzF,OAAO;YACN;YACA,yMAAO,WAAA,EAAS,KAAK;QACtB;IACD;IA9EA,YAAY,MAAA,EAA2B,UAAoB,CAAC,CAAA,CAAG;QAC9D,KAAA,CAAM;QAJP,aAAA,IAAA,EAAA;QACA,aAAA,IAAA,EAAA;QAIC,aAAA,IAAA,EAAK,SAAU;QACf,aAAA,IAAA,EAAK,UAAW;QAEhB,MAAM,aAAa,aAAA,GAAA,IAAI,IAAI;QAC3B,IAAI,iBAAiB;QAErB,MAAM,UAAU,OAAO,aAAA,CAAc,EAAE,GAAA,CAAI;gBAAC,EAAE,MAAA,EAAQ,SAAA,CAAU,CAAA;mBAAO;gBACtE;gBACA,SAAS,UAAU,YAAA,CAAa;YACjC,EAAE;;QAEF,KAAA,MAAW,UAAU,QAAS;gBAOd;YANf,MAAM,UAAU,OAAO,YAAA,CAAa;YACpC,IAAI,WAAW,GAAA,CAAI,OAAO,GAAG;gBAC5B,MAAM,IAAI,MAAM,mDAAoD;YACrE;YACA,WAAW,GAAA,CAAI,OAAO;YAEtB,MAAM,kCAAiB,IAAA,CAAK,CAAC,IAAM,EAAE,OAAA,KAAY,OAAO,iEAAG,MAAA;YAE3D,IAAI,CAAC,QAAQ;gBACZ,MAAM,IAAI,MAAM,UAAiB,OAAP,OAAO,EAAA,wCAAyC;YAC3E;YAEA,kBAAkB;QACnB;QAEA,IAAI,iBAAiB,OAAO,YAAA,CAAa,GAAG;YAC3C,MAAM,IAAI,MAAM,kDAAmD;QACpE;IACD;AA+CD;AAlFC,UAAA,IAAA;AACA,WAAA,IAAA","debugId":null}},
    {"offset": {"line": 6929, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/multisig/publickey.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64 } from '@mysten/bcs';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nimport { bcs } from '../bcs/index.js';\nimport type { Signer } from '../cryptography/keypair.js';\nimport { bytesEqual, PublicKey } from '../cryptography/publickey.js';\nimport {\n\tSIGNATURE_FLAG_TO_SCHEME,\n\tSIGNATURE_SCHEME_TO_FLAG,\n} from '../cryptography/signature-scheme.js';\nimport type { SignatureFlag, SignatureScheme } from '../cryptography/signature-scheme.js';\nimport { parseSerializedSignature } from '../cryptography/signature.js';\nimport type { SuiGraphQLClient } from '../graphql/client.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\n// eslint-disable-next-line import/no-cycle\nimport { publicKeyFromRawBytes } from '../verify/index.js';\nimport { toZkLoginPublicIdentifier } from '../zklogin/publickey.js';\nimport { MultiSigSigner } from './signer.js';\n\ntype CompressedSignature =\n\t| { ED25519: number[] }\n\t| { Secp256k1: number[] }\n\t| { Secp256r1: number[] }\n\t| { ZkLogin: number[] };\n\ntype PublicKeyEnum =\n\t| { ED25519: number[] }\n\t| { Secp256k1: number[] }\n\t| { Secp256r1: number[] }\n\t| { ZkLogin: number[] };\n\ntype PubkeyEnumWeightPair = {\n\tpubKey: PublicKeyEnum;\n\tweight: number;\n};\n\ntype MultiSigPublicKeyStruct = {\n\tpk_map: PubkeyEnumWeightPair[];\n\tthreshold: number;\n};\n\nexport type MultiSigStruct = {\n\tsigs: CompressedSignature[];\n\tbitmap: number;\n\tmultisig_pk: MultiSigPublicKeyStruct;\n};\n\ntype ParsedPartialMultiSigSignature = {\n\tsignatureScheme: SignatureScheme;\n\tsignature: Uint8Array;\n\tpublicKey: PublicKey;\n\tweight: number;\n};\n\nexport const MAX_SIGNER_IN_MULTISIG = 10;\nexport const MIN_SIGNER_IN_MULTISIG = 1;\n/**\n * A MultiSig public key\n */\nexport class MultiSigPublicKey extends PublicKey {\n\tprivate rawBytes: Uint8Array;\n\tprivate multisigPublicKey: MultiSigPublicKeyStruct;\n\tprivate publicKeys: {\n\t\tweight: number;\n\t\tpublicKey: PublicKey;\n\t}[];\n\t/**\n\t * Create a new MultiSigPublicKey object\n\t */\n\tconstructor(\n\t\t/**\n\t\t *  MultiSig public key as buffer or base-64 encoded string\n\t\t */\n\t\tvalue: string | Uint8Array | MultiSigPublicKeyStruct,\n\t\toptions: { client?: SuiGraphQLClient } = {},\n\t) {\n\t\tsuper();\n\n\t\tif (typeof value === 'string') {\n\t\t\tthis.rawBytes = fromBase64(value);\n\n\t\t\tthis.multisigPublicKey = bcs.MultiSigPublicKey.parse(this.rawBytes);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.rawBytes = value;\n\t\t\tthis.multisigPublicKey = bcs.MultiSigPublicKey.parse(this.rawBytes);\n\t\t} else {\n\t\t\tthis.multisigPublicKey = value;\n\t\t\tthis.rawBytes = bcs.MultiSigPublicKey.serialize(value).toBytes();\n\t\t}\n\t\tif (this.multisigPublicKey.threshold < 1) {\n\t\t\tthrow new Error('Invalid threshold');\n\t\t}\n\n\t\tconst seenPublicKeys = new Set<string>();\n\n\t\tthis.publicKeys = this.multisigPublicKey.pk_map.map(({ pubKey, weight }) => {\n\t\t\tconst [scheme, bytes] = Object.entries(pubKey).filter(([name]) => name !== '$kind')[0] as [\n\t\t\t\tSignatureScheme,\n\t\t\t\tnumber[],\n\t\t\t];\n\t\t\tconst publicKeyStr = Uint8Array.from(bytes).toString();\n\n\t\t\tif (seenPublicKeys.has(publicKeyStr)) {\n\t\t\t\tthrow new Error(`Multisig does not support duplicate public keys`);\n\t\t\t}\n\t\t\tseenPublicKeys.add(publicKeyStr);\n\n\t\t\tif (weight < 1) {\n\t\t\t\tthrow new Error(`Invalid weight`);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tpublicKey: publicKeyFromRawBytes(scheme, Uint8Array.from(bytes), options),\n\t\t\t\tweight,\n\t\t\t};\n\t\t});\n\n\t\tconst totalWeight = this.publicKeys.reduce((sum, { weight }) => sum + weight, 0);\n\n\t\tif (this.multisigPublicKey.threshold > totalWeight) {\n\t\t\tthrow new Error(`Unreachable threshold`);\n\t\t}\n\n\t\tif (this.publicKeys.length > MAX_SIGNER_IN_MULTISIG) {\n\t\t\tthrow new Error(`Max number of signers in a multisig is ${MAX_SIGNER_IN_MULTISIG}`);\n\t\t}\n\n\t\tif (this.publicKeys.length < MIN_SIGNER_IN_MULTISIG) {\n\t\t\tthrow new Error(`Min number of signers in a multisig is ${MIN_SIGNER_IN_MULTISIG}`);\n\t\t}\n\t}\n\t/**\n\t * \tA static method to create a new MultiSig publickey instance from a set of public keys and their associated weights pairs and threshold.\n\t */\n\n\tstatic fromPublicKeys({\n\t\tthreshold,\n\t\tpublicKeys,\n\t}: {\n\t\tthreshold: number;\n\t\tpublicKeys: { publicKey: PublicKey; weight: number }[];\n\t}) {\n\t\treturn new MultiSigPublicKey({\n\t\t\tpk_map: publicKeys.map(({ publicKey, weight }) => {\n\t\t\t\tconst scheme = SIGNATURE_FLAG_TO_SCHEME[publicKey.flag() as SignatureFlag];\n\n\t\t\t\treturn {\n\t\t\t\t\tpubKey: { [scheme]: Array.from(publicKey.toRawBytes()) } as PublicKeyEnum,\n\t\t\t\t\tweight,\n\t\t\t\t};\n\t\t\t}),\n\t\t\tthreshold,\n\t\t});\n\t}\n\n\t/**\n\t * Checks if two MultiSig public keys are equal\n\t */\n\toverride equals(publicKey: MultiSigPublicKey): boolean {\n\t\treturn super.equals(publicKey);\n\t}\n\n\t/**\n\t * Return the byte array representation of the MultiSig public key\n\t */\n\ttoRawBytes(): Uint8Array {\n\t\treturn this.rawBytes;\n\t}\n\n\tgetPublicKeys() {\n\t\treturn this.publicKeys;\n\t}\n\n\tgetThreshold() {\n\t\treturn this.multisigPublicKey.threshold;\n\t}\n\n\tgetSigner(...signers: [signer: Signer]) {\n\t\treturn new MultiSigSigner(this, signers);\n\t}\n\n\t/**\n\t * Return the Sui address associated with this MultiSig public key\n\t */\n\toverride toSuiAddress(): string {\n\t\t// max length = 1 flag byte + (max pk size + max weight size (u8)) * max signer size + 2 threshold bytes (u16)\n\t\tconst maxLength = 1 + (64 + 1) * MAX_SIGNER_IN_MULTISIG + 2;\n\t\tconst tmp = new Uint8Array(maxLength);\n\t\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['MultiSig']]);\n\n\t\ttmp.set(bcs.u16().serialize(this.multisigPublicKey.threshold).toBytes(), 1);\n\t\t// The initial value 3 ensures that following data will be after the flag byte and threshold bytes\n\t\tlet i = 3;\n\t\tfor (const { publicKey, weight } of this.publicKeys) {\n\t\t\tconst bytes = publicKey.toSuiBytes();\n\t\t\ttmp.set(bytes, i);\n\t\t\ti += bytes.length;\n\t\t\ttmp.set([weight], i++);\n\t\t}\n\t\treturn normalizeSuiAddress(bytesToHex(blake2b(tmp.slice(0, i), { dkLen: 32 })));\n\t}\n\n\t/**\n\t * Return the Sui address associated with this MultiSig public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['MultiSig'];\n\t}\n\n\t/**\n\t * Verifies that the signature is valid for for the provided message\n\t */\n\tasync verify(message: Uint8Array, multisigSignature: string): Promise<boolean> {\n\t\t// Multisig verification only supports serialized signature\n\t\tconst parsed = parseSerializedSignature(multisigSignature);\n\n\t\tif (parsed.signatureScheme !== 'MultiSig') {\n\t\t\tthrow new Error('Invalid signature scheme');\n\t\t}\n\n\t\tconst { multisig } = parsed;\n\n\t\tlet signatureWeight = 0;\n\n\t\tif (\n\t\t\t!bytesEqual(\n\t\t\t\tbcs.MultiSigPublicKey.serialize(this.multisigPublicKey).toBytes(),\n\t\t\t\tbcs.MultiSigPublicKey.serialize(multisig.multisig_pk).toBytes(),\n\t\t\t)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const { publicKey, weight, signature } of parsePartialSignatures(multisig)) {\n\t\t\tif (!(await publicKey.verify(message, signature))) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tsignatureWeight += weight;\n\t\t}\n\n\t\treturn signatureWeight >= this.multisigPublicKey.threshold;\n\t}\n\n\t/**\n\t * Combines multiple partial signatures into a single multisig, ensuring that each public key signs only once\n\t * and that all the public keys involved are known and valid, and then serializes multisig into the standard format\n\t */\n\tcombinePartialSignatures(signatures: string[]): string {\n\t\tif (signatures.length > MAX_SIGNER_IN_MULTISIG) {\n\t\t\tthrow new Error(`Max number of signatures in a multisig is ${MAX_SIGNER_IN_MULTISIG}`);\n\t\t}\n\n\t\tlet bitmap = 0;\n\t\tconst compressedSignatures: CompressedSignature[] = new Array(signatures.length);\n\n\t\tfor (let i = 0; i < signatures.length; i++) {\n\t\t\tconst parsed = parseSerializedSignature(signatures[i]);\n\t\t\tif (parsed.signatureScheme === 'MultiSig') {\n\t\t\t\tthrow new Error('MultiSig is not supported inside MultiSig');\n\t\t\t}\n\n\t\t\tlet publicKey;\n\t\t\tif (parsed.signatureScheme === 'ZkLogin') {\n\t\t\t\tpublicKey = toZkLoginPublicIdentifier(\n\t\t\t\t\tparsed.zkLogin?.addressSeed,\n\t\t\t\t\tparsed.zkLogin?.iss,\n\t\t\t\t).toRawBytes();\n\t\t\t} else {\n\t\t\t\tpublicKey = parsed.publicKey;\n\t\t\t}\n\n\t\t\tcompressedSignatures[i] = {\n\t\t\t\t[parsed.signatureScheme]: Array.from(parsed.signature.map((x: number) => Number(x))),\n\t\t\t} as CompressedSignature;\n\n\t\t\tlet publicKeyIndex;\n\t\t\tfor (let j = 0; j < this.publicKeys.length; j++) {\n\t\t\t\tif (bytesEqual(publicKey, this.publicKeys[j].publicKey.toRawBytes())) {\n\t\t\t\t\tif (bitmap & (1 << j)) {\n\t\t\t\t\t\tthrow new Error('Received multiple signatures from the same public key');\n\t\t\t\t\t}\n\n\t\t\t\t\tpublicKeyIndex = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (publicKeyIndex === undefined) {\n\t\t\t\tthrow new Error('Received signature from unknown public key');\n\t\t\t}\n\n\t\t\tbitmap |= 1 << publicKeyIndex;\n\t\t}\n\n\t\tconst multisig: MultiSigStruct = {\n\t\t\tsigs: compressedSignatures,\n\t\t\tbitmap,\n\t\t\tmultisig_pk: this.multisigPublicKey,\n\t\t};\n\t\tconst bytes = bcs.MultiSig.serialize(multisig, { maxSize: 8192 }).toBytes();\n\t\tconst tmp = new Uint8Array(bytes.length + 1);\n\t\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['MultiSig']]);\n\t\ttmp.set(bytes, 1);\n\t\treturn toBase64(tmp);\n\t}\n}\n\n/**\n * Parse multisig structure into an array of individual signatures: signature scheme, the actual individual signature, public key and its weight.\n */\nexport function parsePartialSignatures(\n\tmultisig: MultiSigStruct,\n\toptions: { client?: SuiGraphQLClient } = {},\n): ParsedPartialMultiSigSignature[] {\n\tconst res: ParsedPartialMultiSigSignature[] = new Array(multisig.sigs.length);\n\tfor (let i = 0; i < multisig.sigs.length; i++) {\n\t\tconst [signatureScheme, signature] = Object.entries(multisig.sigs[i]).filter(\n\t\t\t([name]) => name !== '$kind',\n\t\t)[0] as [SignatureScheme, number[]];\n\t\tconst pkIndex = asIndices(multisig.bitmap).at(i)!;\n\t\tconst pair = multisig.multisig_pk.pk_map[pkIndex];\n\t\tconst pkBytes = Uint8Array.from(Object.values(pair.pubKey)[0]);\n\n\t\tif (signatureScheme === 'MultiSig') {\n\t\t\tthrow new Error('MultiSig is not supported inside MultiSig');\n\t\t}\n\n\t\tconst publicKey = publicKeyFromRawBytes(signatureScheme, pkBytes, options);\n\n\t\tres[i] = {\n\t\t\tsignatureScheme,\n\t\t\tsignature: Uint8Array.from(signature),\n\t\t\tpublicKey: publicKey,\n\t\t\tweight: pair.weight,\n\t\t};\n\t}\n\treturn res;\n}\n\nfunction asIndices(bitmap: number): Uint8Array {\n\tif (bitmap < 0 || bitmap > 1024) {\n\t\tthrow new Error('Invalid bitmap');\n\t}\n\tconst res: number[] = [];\n\tfor (let i = 0; i < 10; i++) {\n\t\tif ((bitmap & (1 << i)) !== 0) {\n\t\t\tres.push(i);\n\t\t}\n\t}\n\treturn Uint8Array.from(res);\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7195, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/node_modules/%40suiet/wallet-kit/node_modules/%40mysten/sui/src/verify/verify.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64 } from '@mysten/bcs';\n\nimport type { PublicKey, SignatureFlag, SignatureScheme } from '../cryptography/index.js';\nimport { parseSerializedSignature, SIGNATURE_FLAG_TO_SCHEME } from '../cryptography/index.js';\nimport type { SuiGraphQLClient } from '../graphql/client.js';\nimport { Ed25519PublicKey } from '../keypairs/ed25519/publickey.js';\nimport { PasskeyPublicKey } from '../keypairs/passkey/publickey.js';\nimport { Secp256k1PublicKey } from '../keypairs/secp256k1/publickey.js';\nimport { Secp256r1PublicKey } from '../keypairs/secp256r1/publickey.js';\n// eslint-disable-next-line import/no-cycle\nimport { MultiSigPublicKey } from '../multisig/publickey.js';\nimport { ZkLoginPublicIdentifier } from '../zklogin/publickey.js';\n\nexport async function verifySignature(\n\tbytes: Uint8Array,\n\tsignature: string,\n\toptions?: {\n\t\taddress?: string;\n\t},\n): Promise<PublicKey> {\n\tconst parsedSignature = parseSignature(signature);\n\n\tif (!(await parsedSignature.publicKey.verify(bytes, parsedSignature.serializedSignature))) {\n\t\tthrow new Error(`Signature is not valid for the provided data`);\n\t}\n\n\tif (options?.address && !parsedSignature.publicKey.verifyAddress(options.address)) {\n\t\tthrow new Error(`Signature is not valid for the provided address`);\n\t}\n\n\treturn parsedSignature.publicKey;\n}\n\nexport async function verifyPersonalMessageSignature(\n\tmessage: Uint8Array,\n\tsignature: string,\n\toptions: { client?: SuiGraphQLClient; address?: string } = {},\n): Promise<PublicKey> {\n\tconst parsedSignature = parseSignature(signature, options);\n\n\tif (\n\t\t!(await parsedSignature.publicKey.verifyPersonalMessage(\n\t\t\tmessage,\n\t\t\tparsedSignature.serializedSignature,\n\t\t))\n\t) {\n\t\tthrow new Error(`Signature is not valid for the provided message`);\n\t}\n\n\tif (options?.address && !parsedSignature.publicKey.verifyAddress(options.address)) {\n\t\tthrow new Error(`Signature is not valid for the provided address`);\n\t}\n\n\treturn parsedSignature.publicKey;\n}\n\nexport async function verifyTransactionSignature(\n\ttransaction: Uint8Array,\n\tsignature: string,\n\toptions: { client?: SuiGraphQLClient; address?: string } = {},\n): Promise<PublicKey> {\n\tconst parsedSignature = parseSignature(signature, options);\n\n\tif (\n\t\t!(await parsedSignature.publicKey.verifyTransaction(\n\t\t\ttransaction,\n\t\t\tparsedSignature.serializedSignature,\n\t\t))\n\t) {\n\t\tthrow new Error(`Signature is not valid for the provided Transaction`);\n\t}\n\n\tif (options?.address && !parsedSignature.publicKey.verifyAddress(options.address)) {\n\t\tthrow new Error(`Signature is not valid for the provided address`);\n\t}\n\n\treturn parsedSignature.publicKey;\n}\n\nfunction parseSignature(signature: string, options: { client?: SuiGraphQLClient } = {}) {\n\tconst parsedSignature = parseSerializedSignature(signature);\n\n\tif (parsedSignature.signatureScheme === 'MultiSig') {\n\t\treturn {\n\t\t\t...parsedSignature,\n\t\t\tpublicKey: new MultiSigPublicKey(parsedSignature.multisig.multisig_pk),\n\t\t};\n\t}\n\n\tconst publicKey = publicKeyFromRawBytes(\n\t\tparsedSignature.signatureScheme,\n\t\tparsedSignature.publicKey,\n\t\toptions,\n\t);\n\treturn {\n\t\t...parsedSignature,\n\t\tpublicKey,\n\t};\n}\n\nexport function publicKeyFromRawBytes(\n\tsignatureScheme: SignatureScheme,\n\tbytes: Uint8Array,\n\toptions: { client?: SuiGraphQLClient } = {},\n): PublicKey {\n\tswitch (signatureScheme) {\n\t\tcase 'ED25519':\n\t\t\treturn new Ed25519PublicKey(bytes);\n\t\tcase 'Secp256k1':\n\t\t\treturn new Secp256k1PublicKey(bytes);\n\t\tcase 'Secp256r1':\n\t\t\treturn new Secp256r1PublicKey(bytes);\n\t\tcase 'MultiSig':\n\t\t\treturn new MultiSigPublicKey(bytes);\n\t\tcase 'ZkLogin':\n\t\t\treturn new ZkLoginPublicIdentifier(bytes, options);\n\t\tcase 'Passkey':\n\t\t\treturn new PasskeyPublicKey(bytes);\n\t\tdefault:\n\t\t\tthrow new Error(`Unsupported signature scheme ${signatureScheme}`);\n\t}\n}\n\nexport function publicKeyFromSuiBytes(\n\tpublicKey: string | Uint8Array,\n\toptions: { client?: SuiGraphQLClient } = {},\n) {\n\tconst bytes = typeof publicKey === 'string' ? fromBase64(publicKey) : publicKey;\n\n\tconst signatureScheme = SIGNATURE_FLAG_TO_SCHEME[bytes[0] as SignatureFlag];\n\n\treturn publicKeyFromRawBytes(signatureScheme, bytes.slice(1), options);\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}