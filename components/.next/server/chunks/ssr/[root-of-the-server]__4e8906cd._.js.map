{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/wallet/useWallet.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { getWallets } from '@mysten/wallet-standard';\r\nimport { SuiClient, getFullnodeUrl } from '@mysten/sui.js/client';\r\nimport { TransactionBlock } from '@mysten/sui.js/transactions';\r\n\r\n// Sui devnet configuration\r\nconst SUI_DEVNET_RPC = 'https://fullnode.devnet.sui.io:443';\r\nconst SUI_DEVNET_FAUCET = 'https://faucet.devnet.sui.io/gas';\r\n\r\n// Initialize Sui client for devnet\r\nexport const suiClient = new SuiClient({\r\n  url: getFullnodeUrl('devnet'),\r\n});\r\n\r\n// Utility function to validate Sui address format\r\nfunction isValidSuiAddress(address) {\r\n  console.log('🔍 Validating address:', address);\r\n  \r\n  if (!address || typeof address !== 'string') {\r\n    console.log('❌ Address validation failed: not a string or empty');\r\n    return false;\r\n  }\r\n  \r\n  // Remove '0x' prefix if present\r\n  const cleanAddress = address.startsWith('0x') ? address.slice(2) : address;\r\n  console.log('🧹 Clean address:', cleanAddress, 'Length:', cleanAddress.length);\r\n  \r\n  // Sui addresses should be 64 characters of hex (32 bytes)\r\n  if (cleanAddress.length !== 64) {\r\n    console.log('❌ Address validation failed: wrong length', cleanAddress.length, 'expected 64');\r\n    return false;\r\n  }\r\n  \r\n  // Check if it's valid hex\r\n  const isValidHex = /^[0-9a-fA-F]+$/.test(cleanAddress);\r\n  console.log('🔢 Hex validation:', isValidHex);\r\n  \r\n  if (!isValidHex) {\r\n    console.log('❌ Address validation failed: invalid hex characters');\r\n    return false;\r\n  }\r\n  \r\n  console.log('✅ Address validation passed');\r\n  return true;\r\n}\r\n\r\n// Custom hook for Sui wallet management\r\nexport function useSuiWallet() {\r\n  const [wallets, setWallets] = useState([]);\r\n  const [currentWallet, setCurrentWallet] = useState(null);\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [balance, setBalance] = useState('0');\r\n  const [error, setError] = useState(null);\r\n  const [justConnected, setJustConnected] = useState(false);\r\n  const [skipConnectionCheck, setSkipConnectionCheck] = useState(false);\r\n\r\n  // Initialize wallets\r\n  useEffect(() => {\r\n    const initializeWallets = () => {\r\n      const availableWallets = getWallets().get();\r\n      setWallets(availableWallets);\r\n    };\r\n\r\n    initializeWallets();\r\n\r\n    // Listen for wallet changes\r\n    const unsubscribe = getWallets().on('change', (wallets) => {\r\n      setWallets(wallets);\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  // Disconnect wallet (defined early to avoid dependency issues)\r\n  const disconnect = useCallback(async () => {\r\n    try {\r\n      if (currentWallet && currentWallet.features['standard:disconnect']) {\r\n        await currentWallet.features['standard:disconnect'].disconnect();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error disconnecting wallet:', error);\r\n    } finally {\r\n      setCurrentWallet(null);\r\n      setCurrentAccount(null);\r\n      setIsConnected(false);\r\n      setBalance('0');\r\n      setError(null);\r\n      setJustConnected(false);\r\n      setSkipConnectionCheck(false);\r\n\r\n      // Clear localStorage\r\n      localStorage.removeItem('connected_wallet');\r\n      localStorage.removeItem('wallet_account');\r\n      localStorage.removeItem('walletConnected');\r\n      localStorage.removeItem('walletAddress');\r\n\r\n      // Dispatch storage event\r\n      window.dispatchEvent(new Event('storage'));\r\n    }\r\n  }, [currentWallet]);\r\n\r\n  // Check existing connection on mount\r\n  useEffect(() => {\r\n    const checkConnection = async () => {\r\n      try {\r\n        // Don't check connection if we just connected or if disabled\r\n        if (justConnected || skipConnectionCheck) {\r\n          console.log('⏭️ Skipping connection check - just connected or disabled');\r\n          if (justConnected) setJustConnected(false);\r\n          return;\r\n        }\r\n\r\n        console.log('🔍 Checking existing connection...');\r\n        \r\n        // Add small delay to prevent race conditions during navigation\r\n        await new Promise(resolve => setTimeout(resolve, 100));\r\n        \r\n        // TEMPORARY: Clear any potentially corrupted data on startup\r\n        const allStorageData = {\r\n          connected_wallet: localStorage.getItem('connected_wallet'),\r\n          wallet_account: localStorage.getItem('wallet_account'),\r\n          walletConnected: localStorage.getItem('walletConnected'),\r\n          walletAddress: localStorage.getItem('walletAddress')\r\n        };\r\n        console.log('📋 All localStorage data on startup:', allStorageData);\r\n        \r\n        const savedWalletName = localStorage.getItem('connected_wallet');\r\n        const savedAccount = localStorage.getItem('wallet_account');\r\n        \r\n        console.log('📋 Saved wallet name:', savedWalletName);\r\n        console.log('📋 Saved account (raw):', savedAccount);\r\n        \r\n        if (savedWalletName && savedAccount) {\r\n          const wallet = wallets.find(w => w.name === savedWalletName);\r\n          console.log('🔍 Found wallet:', wallet?.name);\r\n          \r\n          // Check for corrupted account data (empty object)\r\n          if (savedAccount === '{}') {\r\n            console.warn('🧹 Found corrupted account data (empty object), clearing...');\r\n            disconnect();\r\n            return;\r\n          }\r\n          \r\n          if (wallet) {\r\n            const accountData = JSON.parse(savedAccount);\r\n            console.log('📋 Parsed account data:', accountData);\r\n            console.log('📋 Account data keys:', Object.keys(accountData));\r\n            \r\n            // Validate address format before proceeding\r\n            console.log('🔍 About to validate saved address:', accountData.address);\r\n            if (!accountData.address) {\r\n              console.warn('❌ No address found in localStorage, clearing connection');\r\n              disconnect();\r\n              return;\r\n            }\r\n            \r\n            if (!isValidSuiAddress(accountData.address)) {\r\n              console.warn('❌ Invalid Sui address format found in localStorage, clearing connection');\r\n              disconnect();\r\n              return;\r\n            }\r\n            \r\n            // Reconstruct the account object with proper format\r\n            const restoredAccount = {\r\n              address: accountData.address,\r\n              publicKey: accountData.publicKey ? new Uint8Array(accountData.publicKey) : null,\r\n              chains: accountData.chains || [],\r\n              features: accountData.features || []\r\n            };\r\n            \r\n            console.log('✅ Address validation passed, restoring connection');\r\n            console.log('🔄 Restored account:', restoredAccount);\r\n            setCurrentWallet(wallet);\r\n            setCurrentAccount(restoredAccount);\r\n            setIsConnected(true);\r\n            await fetchBalance(accountData.address);\r\n          }\r\n        } else {\r\n          console.log('ℹ️ No saved connection found');\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ Error checking existing connection:', error);\r\n        disconnect();\r\n      }\r\n    };\r\n\r\n    if (wallets.length > 0) {\r\n      checkConnection();\r\n    }\r\n  }, [wallets, justConnected, skipConnectionCheck, disconnect]);\r\n\r\n  // Fetch balance for current account\r\n  const fetchBalance = useCallback(async (address) => {\r\n    try {\r\n      // Validate address before making the API call\r\n      if (!address || !isValidSuiAddress(address)) {\r\n        console.warn('Invalid address provided to fetchBalance:', address);\r\n        setBalance('0');\r\n        return;\r\n      }\r\n\r\n      const balanceData = await suiClient.getBalance({\r\n        owner: address,\r\n        coinType: '0x2::sui::SUI'\r\n      });\r\n      setBalance(balanceData.totalBalance);\r\n    } catch (error) {\r\n      console.error('Error fetching balance:', error);\r\n      setBalance('0');\r\n      \r\n      // If it's an invalid address error, clear the connection\r\n      if (error.message && error.message.includes('Invalid Sui address')) {\r\n        console.warn('Invalid Sui address detected, disconnecting wallet');\r\n        disconnect();\r\n      }\r\n    }\r\n  }, [disconnect]);\r\n\r\n  // Connect to wallet\r\n  const connect = useCallback(async (wallet) => {\r\n    console.log('🔗 Attempting to connect wallet:', wallet?.name);\r\n    \r\n    if (!wallet) {\r\n      console.error('❌ No wallet provided to connect function');\r\n      setError('No wallet provided');\r\n      return false;\r\n    }\r\n    \r\n    if (isConnecting) {\r\n      console.log('⏳ Already connecting, skipping...');\r\n      return false;\r\n    }\r\n\r\n    setIsConnecting(true);\r\n    setError(null);\r\n    setSkipConnectionCheck(true); // Disable connection checking during connection\r\n\r\n    try {\r\n      console.log('📋 Wallet features available:', Object.keys(wallet.features || {}));\r\n      \r\n      // Check if wallet has the required connection feature\r\n      if (!wallet.features || !wallet.features['standard:connect']) {\r\n        throw new Error(`Wallet ${wallet.name} does not support standard connection`);\r\n      }\r\n\r\n      console.log('🚀 Calling wallet connect...');\r\n      const result = await wallet.features['standard:connect'].connect();\r\n      console.log('📥 Connection result:', result);\r\n      \r\n      if (result.accounts && result.accounts.length > 0) {\r\n        const account = result.accounts[0];\r\n        console.log('✅ Account received:', {\r\n          address: account.address,\r\n          publicKey: account.publicKey\r\n        });\r\n        console.log('🔍 Full account object:', account);\r\n        console.log('🔍 Account object keys:', Object.keys(account));\r\n        console.log('🔍 JSON.stringify test:', JSON.stringify(account));\r\n\r\n        // Validate the account address\r\n        if (!account.address || !isValidSuiAddress(account.address)) {\r\n          throw new Error(`Invalid address received from wallet: ${account.address}`);\r\n        }\r\n\r\n        setCurrentWallet(wallet);\r\n        setCurrentAccount(account);\r\n        setIsConnected(true);\r\n\r\n        // Create a serializable account object with only the essential properties\r\n        const serializableAccount = {\r\n          address: account.address,\r\n          publicKey: account.publicKey ? Array.from(account.publicKey) : null,\r\n          chains: account.chains || [],\r\n          features: account.features || []\r\n        };\r\n        \r\n        console.log('📦 Serializable account:', serializableAccount);\r\n\r\n        // Save to localStorage\r\n        localStorage.setItem('connected_wallet', wallet.name);\r\n        localStorage.setItem('wallet_account', JSON.stringify(serializableAccount));\r\n        localStorage.setItem('walletConnected', 'true');\r\n        localStorage.setItem('walletAddress', account.address);\r\n\r\n        console.log('💾 Wallet data saved to localStorage');\r\n        // Verify data was saved correctly\r\n        const verification = {\r\n          connected_wallet: localStorage.getItem('connected_wallet'),\r\n          wallet_account: localStorage.getItem('wallet_account'),\r\n          walletConnected: localStorage.getItem('walletConnected'),\r\n          walletAddress: localStorage.getItem('walletAddress')\r\n        };\r\n        console.log('📋 Saved data verification:', verification);\r\n\r\n        // Fetch balance\r\n        console.log('💰 Fetching balance...');\r\n        await fetchBalance(account.address);\r\n\r\n        // Dispatch storage event for other components\r\n        window.dispatchEvent(new Event('storage'));\r\n\r\n        console.log('🎉 Wallet connected successfully!');\r\n        setJustConnected(true);\r\n        setSkipConnectionCheck(false); // Re-enable connection checking\r\n        return true;\r\n      } else {\r\n        console.error('❌ No accounts in connection result:', result);\r\n        throw new Error('No accounts returned from wallet');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Wallet connection failed:', error);\r\n      \r\n      // More specific error messages\r\n      let errorMessage = 'Failed to connect wallet';\r\n      if (error.message.includes('User rejected')) {\r\n        errorMessage = 'Connection was cancelled by user';\r\n      } else if (error.message.includes('not found') || error.message.includes('undefined')) {\r\n        errorMessage = `Wallet ${wallet.name} is not properly installed or initialized`;\r\n      } else if (error.message.includes('Invalid address')) {\r\n        errorMessage = 'Wallet returned an invalid address format';\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      setError(errorMessage);\r\n      return false;\r\n    } finally {\r\n      setIsConnecting(false);\r\n      setSkipConnectionCheck(false); // Re-enable connection checking even on failure\r\n      console.log('🔓 Connection attempt finished');\r\n    }\r\n  }, [isConnecting, fetchBalance]);\r\n\r\n  // Execute transaction\r\n  const executeTransaction = useCallback(async (transaction) => {\r\n    if (!currentWallet || !currentAccount || !isConnected) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      const result = await currentWallet.features['sui:signAndExecuteTransaction'].signAndExecuteTransaction({\r\n        transaction,\r\n        account: currentAccount,\r\n        chain: 'sui:devnet',\r\n      });\r\n\r\n      // Refresh balance after transaction\r\n      if (currentAccount) {\r\n        await fetchBalance(currentAccount.address);\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Error executing transaction:', error);\r\n      throw error;\r\n    }\r\n  }, [currentWallet, currentAccount, isConnected, fetchBalance]);\r\n\r\n  // Request funds from faucet (devnet only)\r\n  const requestFaucetFunds = useCallback(async () => {\r\n    if (!currentAccount) {\r\n      throw new Error('No account connected');\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(SUI_DEVNET_FAUCET, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          FixedAmountRequest: {\r\n            recipient: currentAccount.address\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to request faucet funds');\r\n      }\r\n\r\n      // Wait a bit for the transaction to be processed\r\n      setTimeout(() => {\r\n        fetchBalance(currentAccount.address);\r\n      }, 3000);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error requesting faucet funds:', error);\r\n      throw error;\r\n    }\r\n  }, [currentAccount, fetchBalance]);\r\n\r\n  // Get formatted balance in SUI\r\n  const getFormattedBalance = useCallback(() => {\r\n    const suiBalance = parseInt(balance) / 1_000_000_000; // Convert MIST to SUI\r\n    return suiBalance.toFixed(2);\r\n  }, [balance]);\r\n\r\n  // Check if balance is sufficient for transaction\r\n  const hasSufficientBalance = useCallback((requiredAmount) => {\r\n    const currentBalance = parseInt(balance);\r\n    const required = parseInt(requiredAmount);\r\n    return currentBalance >= required;\r\n  }, [balance]);\r\n\r\n  return {\r\n    // State\r\n    wallets,\r\n    currentWallet,\r\n    currentAccount,\r\n    isConnected,\r\n    isConnecting,\r\n    balance,\r\n    error,\r\n\r\n    // Actions\r\n    connect,\r\n    disconnect,\r\n    executeTransaction,\r\n    requestFaucetFunds,\r\n    fetchBalance,\r\n\r\n    // Utilities\r\n    getFormattedBalance,\r\n    hasSufficientBalance,\r\n    \r\n    // Client\r\n    suiClient,\r\n  };\r\n}\r\n\r\n// Debug helper function - can be called manually in browser console\r\nexport const debugWalletConnection = () => {\r\n  console.log('🔍 === WALLET DEBUG INFO ===');\r\n  console.log('Available wallets:', getWallets().get());\r\n  console.log('Local storage data:', {\r\n    connected_wallet: localStorage.getItem('connected_wallet'),\r\n    wallet_account: localStorage.getItem('wallet_account'),\r\n    walletConnected: localStorage.getItem('walletConnected'),\r\n    walletAddress: localStorage.getItem('walletAddress')\r\n  });\r\n  \r\n  const wallets = getWallets().get();\r\n  wallets.forEach(wallet => {\r\n    console.log(`Wallet ${wallet.name}:`, {\r\n      features: Object.keys(wallet.features || {}),\r\n      hasStandardConnect: !!(wallet.features && wallet.features['standard:connect']),\r\n      version: wallet.version\r\n    });\r\n  });\r\n  console.log('🔍 === END DEBUG INFO ===');\r\n};\r\n\r\n// Force clear all wallet data - can be called manually\r\nexport const forceClearWalletData = () => {\r\n  console.log('🧹 Force clearing all wallet data...');\r\n  localStorage.removeItem('connected_wallet');\r\n  localStorage.removeItem('wallet_account');\r\n  localStorage.removeItem('walletConnected');\r\n  localStorage.removeItem('walletAddress');\r\n  \r\n  // Also clear any other potential wallet-related keys\r\n  const keysToRemove = [];\r\n  for (let i = 0; i < localStorage.length; i++) {\r\n    const key = localStorage.key(i);\r\n    if (key && (key.includes('wallet') || key.includes('Wallet') || key.includes('sui') || key.includes('Sui'))) {\r\n      keysToRemove.push(key);\r\n    }\r\n  }\r\n  \r\n  keysToRemove.forEach(key => {\r\n    console.log('🧹 Removing key:', key);\r\n    localStorage.removeItem(key);\r\n  });\r\n  \r\n  window.dispatchEvent(new Event('storage'));\r\n  console.log('✅ All wallet data cleared');\r\n  window.location.reload();\r\n};\r\n\r\n// Fix corrupted wallet data (specifically empty account objects)\r\nexport const fixCorruptedWalletData = () => {\r\n  console.log('🔧 Checking for corrupted wallet data...');\r\n  const savedAccount = localStorage.getItem('wallet_account');\r\n  \r\n  if (savedAccount === '{}') {\r\n    console.log('🧹 Found corrupted account data, clearing...');\r\n    forceClearWalletData();\r\n  } else {\r\n    console.log('✅ No corrupted data found');\r\n  }\r\n};\r\n\r\n// Make debug functions available globally for manual testing\r\nif (typeof window !== 'undefined') {\r\n  window.debugWalletConnection = debugWalletConnection;\r\n  window.forceClearWalletData = forceClearWalletData;\r\n  window.fixCorruptedWalletData = fixCorruptedWalletData;\r\n}\r\n\r\n// Utility functions for smart contract interactions\r\nexport const contractUtils = {\r\n  // Convert SUI to MIST\r\n  suiToMist: (suiAmount) => {\r\n    return Math.floor(parseFloat(suiAmount) * 1_000_000_000);\r\n  },\r\n\r\n  // Convert MIST to SUI\r\n  mistToSui: (mistAmount) => {\r\n    return parseInt(mistAmount) / 1_000_000_000;\r\n  },\r\n\r\n  // Format address for display\r\n  formatAddress: (address) => {\r\n    if (!address || !isValidSuiAddress(address)) return '';\r\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\r\n  },\r\n\r\n  // Clear wallet data from localStorage\r\n  clearWalletData: () => {\r\n    localStorage.removeItem('connected_wallet');\r\n    localStorage.removeItem('wallet_account');\r\n    localStorage.removeItem('walletConnected');\r\n    localStorage.removeItem('walletAddress');\r\n    window.dispatchEvent(new Event('storage'));\r\n  },\r\n\r\n  // Generate seat ID string\r\n  generateSeatId: (row, seat) => {\r\n    return `${String.fromCharCode(64 + row)}${seat}`;\r\n  },\r\n\r\n  // Create purchase transaction\r\n  createPurchaseTransaction: (params) => {\r\n    const {\r\n      eventObjectId,\r\n      walletTrackerObjectId,\r\n      suiAmount,\r\n      seatId,\r\n      seatType,\r\n      imageUrl,\r\n      metadataUrl,\r\n      clockObjectId,\r\n      packageId\r\n    } = params;\r\n\r\n    const tx = new TransactionBlock();\r\n\r\n    // Split SUI from gas coin for payment\r\n    const [coin] = tx.splitCoins(tx.gas, [tx.pure(suiAmount)]);\r\n\r\n    // Call the purchase_ticket function\r\n    tx.moveCall({\r\n      target: `${packageId}::ticket_nft::purchase_ticket`,\r\n      arguments: [\r\n        tx.object(eventObjectId),\r\n        tx.object(walletTrackerObjectId),\r\n        coin,\r\n        tx.pure(seatId),\r\n        tx.pure(seatType),\r\n        tx.pure(imageUrl),\r\n        tx.pure(metadataUrl),\r\n        tx.object(clockObjectId),\r\n      ],\r\n    });\r\n\r\n    return tx;\r\n  }\r\n};\r\n\r\nexport default useSuiWallet; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 556, "column": 0}, "map": {"version":3,"sources":["file:///D:/printx/redmoo/pages/connect-wallet.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useSuiWallet, contractUtils } from \"../wallet/useWallet\";\r\n\r\nfunction Toast({ message, type, onClose }) {\r\n  useEffect(() => {\r\n    if (!message) return;\r\n    const timer = setTimeout(onClose, 3000);\r\n    return () => clearTimeout(timer);\r\n  }, [message, onClose]);\r\n  if (!message) return null;\r\n  return (\r\n    <div className={`fixed top-6 left-1/2 transform -translate-x-1/2 z-50 px-6 py-3 rounded shadow-lg text-white font-bold ${type === \"error\" ? \"bg-red-600\" : \"bg-green-600\"}`}>{message}</div>\r\n  );\r\n}\r\n\r\nexport default function ConnectWallet() {\r\n  const router = useRouter();\r\n  const {\r\n    wallets,\r\n    currentWallet,\r\n    isConnected,\r\n    isConnecting,\r\n    balance,\r\n    error,\r\n    connect,\r\n    requestFaucetFunds,\r\n    getFormattedBalance\r\n  } = useSuiWallet();\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [selectedWallet, setSelectedWallet] = useState(null);\r\n  const [localError, setLocalError] = useState(\"\");\r\n  const [toast, setToast] = useState({ message: \"\", type: \"success\" });\r\n  const [requestingFaucet, setRequestingFaucet] = useState(false);\r\n  const connectBtnRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // If already connected, redirect to profile\r\n    if (isConnected) {\r\n      router.replace('/profile');\r\n    }\r\n  }, [isConnected, router]);\r\n\r\n  const handleOpenModal = () => {\r\n    setShowModal(true);\r\n    setSelectedWallet(null);\r\n    setLocalError(\"\");\r\n  };\r\n\r\n  const handleSelectWallet = (wallet) => {\r\n    setSelectedWallet(wallet);\r\n    setLocalError(\"\");\r\n  };\r\n\r\n  const handleConnect = async (e) => {\r\n    e?.preventDefault?.();\r\n    setLocalError(\"\");\r\n    \r\n    if (!selectedWallet) {\r\n      setLocalError(\"Please select a wallet.\");\r\n      return;\r\n    }\r\n\r\n    console.log('🖱️ Connect button clicked, selected wallet:', selectedWallet.name);\r\n\r\n    try {\r\n      const success = await connect(selectedWallet);\r\n      console.log('📊 Connection result:', success);\r\n      \r\n      if (success) {\r\n        setShowModal(false);\r\n        setToast({ message: `Connected to ${selectedWallet.name}`, type: \"success\" });\r\n        setTimeout(() => router.replace(\"/profile\"), 500);\r\n      } else {\r\n        // If connection failed but no error was thrown\r\n        const errorMsg = error || \"Connection failed - please try again\";\r\n        setLocalError(errorMsg);\r\n        setToast({ message: errorMsg, type: \"error\" });\r\n        console.log('❌ Connection failed silently:', errorMsg);\r\n      }\r\n    } catch (err) {\r\n      console.error('💥 Connection error caught:', err);\r\n      const errorMsg = \"Failed to connect: \" + (err?.message || err);\r\n      setLocalError(errorMsg);\r\n      setToast({ message: \"Failed to connect\", type: \"error\" });\r\n    }\r\n  };\r\n\r\n  const handleRequestFaucet = async () => {\r\n    if (!isConnected) return;\r\n    \r\n    setRequestingFaucet(true);\r\n    try {\r\n      await requestFaucetFunds();\r\n      setToast({ message: \"Faucet request sent! Funds will appear shortly.\", type: \"success\" });\r\n    } catch (err) {\r\n      setToast({ message: \"Failed to request faucet funds\", type: \"error\" });\r\n    } finally {\r\n      setRequestingFaucet(false);\r\n    }\r\n  };\r\n\r\n  // Accessibility: close modal on Escape\r\n  useEffect(() => {\r\n    if (!showModal) return;\r\n    const onKeyDown = (e) => {\r\n      if (e.key === \"Escape\") setShowModal(false);\r\n    };\r\n    window.addEventListener(\"keydown\", onKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\r\n  }, [showModal]);\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center h-full\">\r\n      <Toast message={toast.message} type={toast.type} onClose={() => setToast({ message: \"\", type: \"success\" })} />\r\n      <div className=\"bg-white p-8 rounded-lg shadow-lg text-center w-full max-w-lg\">\r\n        <h1 className=\"text-3xl font-bold text-[#A31D1D] mb-4 font-chonburi\">Connect Your Wallet</h1>\r\n        <p className=\"text-gray-700 font-domine mb-4\">\r\n          Click below to connect your Sui wallet.\r\n        </p>\r\n        <div className=\"space-y-4\">\r\n          <button\r\n            className=\"bg-[#D84040] text-white px-6 py-2 rounded-full hover:bg-[#A31D1D] transition-all duration-200 font-medium font-domine hover:scale-110 transform hover:shadow-lg\"\r\n            onClick={handleOpenModal}\r\n          >\r\n            Connect Wallet\r\n          </button>\r\n          \r\n          {/* Devnet Info Banner */}\r\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-sm\">\r\n            <div className=\"flex items-center mb-2\">\r\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-2\"></div>\r\n              <span className=\"font-semibold text-blue-800\">Devnet Mode</span>\r\n            </div>\r\n            <p className=\"text-blue-700\">\r\n              This dApp operates on Sui Devnet. You can get free test SUI from the faucet after connecting your wallet.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        \r\n        {(error || localError) && (\r\n          <div className=\"text-red-600 mb-2 text-center\">\r\n            {error || localError}\r\n          </div>\r\n        )}\r\n        {/* Modal for wallet selection */}\r\n        {showModal && (\r\n          <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50\">\r\n            <div\r\n              className=\"bg-white rounded-lg p-8 max-w-md w-full mx-4 shadow-2xl relative focus:outline-none\"\r\n              tabIndex={-1}\r\n              aria-modal=\"true\"\r\n              role=\"dialog\"\r\n            >\r\n              <button\r\n                className=\"absolute top-2 right-2 text-gray-400 hover:text-gray-700 text-2xl\"\r\n                onClick={() => setShowModal(false)}\r\n                aria-label=\"Close\"\r\n              >\r\n                ×\r\n              </button>\r\n              <h2 className=\"text-xl font-bold mb-4\">Select Wallet</h2>\r\n              <div className=\"mb-4 flex flex-col items-center\">\r\n                {wallets.length === 0 && (\r\n                  <div className=\"text-gray-500 mb-2 text-center\">\r\n                    No Sui wallets detected.<br />\r\n                    <a href=\"https://suiet.app/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-[#D84040] underline\">Install Suiet</a> or <a href=\"https://wallet.sui.io/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-[#D84040] underline\">Sui Wallet</a>\r\n                  </div>\r\n                )}\r\n                {wallets.map((wallet) => (\r\n                  <button\r\n                    key={wallet.name}\r\n                    className={`flex items-center px-4 py-2 mb-2 rounded border w-full justify-center transition-colors focus:outline-none focus:ring-2 focus:ring-[#D84040] ${\r\n                      selectedWallet?.name === wallet.name\r\n                        ? \"border-[#D84040] bg-[#F8F2DE]\"\r\n                        : \"border-gray-200\"\r\n                    }`}\r\n                    onClick={() => handleSelectWallet(wallet)}\r\n                    tabIndex={0}\r\n                    aria-pressed={selectedWallet?.name === wallet.name}\r\n                  >\r\n                    <img\r\n                      src={wallet.icon}\r\n                      alt={wallet.name}\r\n                      className=\"w-6 h-6 mr-2 rounded-full\"\r\n                    />\r\n                    <span className=\"font-domine\">{wallet.name}</span>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n              <button\r\n                className=\"bg-[#D84040] text-white px-6 py-2 rounded-full hover:bg-[#A31D1D] transition-all duration-200 font-medium font-domine hover:scale-110 transform hover:shadow-lg w-full flex items-center justify-center\"\r\n                onClick={handleConnect}\r\n                disabled={!selectedWallet || isConnecting}\r\n                ref={connectBtnRef}\r\n                aria-busy={isConnecting}\r\n              >\r\n                {isConnecting && (\r\n                  <svg className=\"animate-spin h-5 w-5 mr-2 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"><circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle><path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8v8z\"></path></svg>\r\n                )}\r\n                Connect\r\n              </button>\r\n              {(error || localError) && (\r\n                <div className=\"text-red-600 mt-2 text-center\">\r\n                  {error || localError}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <style jsx>{`\r\n        @media (max-width: 600px) {\r\n          .max-w-lg, .max-w-md { max-width: 98vw !important; }\r\n          .p-8 { padding: 1.5rem !important; }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}